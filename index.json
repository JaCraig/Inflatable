{
  "api/Inflatable.Aspect.EndMethod.IListProperty.html": {
    "href": "api/Inflatable.Aspect.EndMethod.IListProperty.html",
    "title": "Class IListProperty | Inflatable API Reference",
    "keywords": "Class IListProperty Namespace Inflatable.Aspect.EndMethod Assembly Inflatable.dll List property public class IListProperty : IEndMethodHelper Inheritance object IListProperty Implements IEndMethodHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup(string, MethodInfo, IMapping, StringBuilder) Setups the specified return value name. public void Setup(string returnValueName, MethodInfo method, IMapping mapping, StringBuilder builder) Parameters returnValueName string Name of the return value. method MethodInfo The method. mapping IMapping The mapping. builder StringBuilder The builder. See Also IEndMethodHelper"
  },
  "api/Inflatable.Aspect.EndMethod.IManyToOnePropertyLazyLoad.html": {
    "href": "api/Inflatable.Aspect.EndMethod.IManyToOnePropertyLazyLoad.html",
    "title": "Class IManyToOnePropertyLazyLoad | Inflatable API Reference",
    "keywords": "Class IManyToOnePropertyLazyLoad Namespace Inflatable.Aspect.EndMethod Assembly Inflatable.dll Many to one lazy loading setup. public class IManyToOnePropertyLazyLoad : IEndMethodHelper Inheritance object IManyToOnePropertyLazyLoad Implements IEndMethodHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup(string, MethodInfo, IMapping, StringBuilder) Setups the specified return value name. public void Setup(string returnValueName, MethodInfo method, IMapping mapping, StringBuilder builder) Parameters returnValueName string Name of the return value. method MethodInfo The method. mapping IMapping The mapping. builder StringBuilder The builder. See Also IEndMethodHelper"
  },
  "api/Inflatable.Aspect.EndMethod.SingleProperty.html": {
    "href": "api/Inflatable.Aspect.EndMethod.SingleProperty.html",
    "title": "Class SingleProperty | Inflatable API Reference",
    "keywords": "Class SingleProperty Namespace Inflatable.Aspect.EndMethod Assembly Inflatable.dll Single mapped property public class SingleProperty : IEndMethodHelper Inheritance object SingleProperty Implements IEndMethodHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup(string, MethodInfo, IMapping, StringBuilder) Setups the specified return value name. public void Setup(string returnValueName, MethodInfo method, IMapping mapping, StringBuilder builder) Parameters returnValueName string Name of the return value. method MethodInfo The method. mapping IMapping The mapping. builder StringBuilder The builder. See Also IEndMethodHelper"
  },
  "api/Inflatable.Aspect.EndMethod.html": {
    "href": "api/Inflatable.Aspect.EndMethod.html",
    "title": "Namespace Inflatable.Aspect.EndMethod | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Aspect.EndMethod Classes IListProperty List property IManyToOnePropertyLazyLoad Many to one lazy loading setup. SingleProperty Single mapped property"
  },
  "api/Inflatable.Aspect.InterfaceImplementation.SetupIORMInitializationMethod.html": {
    "href": "api/Inflatable.Aspect.InterfaceImplementation.SetupIORMInitializationMethod.html",
    "title": "Class SetupIORMInitializationMethod | Inflatable API Reference",
    "keywords": "Class SetupIORMInitializationMethod Namespace Inflatable.Aspect.InterfaceImplementation Assembly Inflatable.dll public class SetupIORMInitializationMethod : IInterfaceImplementationHelper Inheritance object SetupIORMInitializationMethod Implements IInterfaceImplementationHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods Setup(Type, ORMAspect, ObjectPool<StringBuilder>) Setups the specified type. public string Setup(Type type, ORMAspect aspect, ObjectPool<StringBuilder> objectPool) Parameters type Type The type. aspect ORMAspect The aspect. objectPool ObjectPool<StringBuilder> The object pool. Returns string The resulting code in string format. See Also IInterfaceImplementationHelper"
  },
  "api/Inflatable.Aspect.InterfaceImplementation.SetupIORMObjectProperties.html": {
    "href": "api/Inflatable.Aspect.InterfaceImplementation.SetupIORMObjectProperties.html",
    "title": "Class SetupIORMObjectProperties | Inflatable API Reference",
    "keywords": "Class SetupIORMObjectProperties Namespace Inflatable.Aspect.InterfaceImplementation Assembly Inflatable.dll Sets up the IORM Object properties public class SetupIORMObjectProperties : IInterfaceImplementationHelper Inheritance object SetupIORMObjectProperties Implements IInterfaceImplementationHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods Setup(Type, ORMAspect, ObjectPool<StringBuilder>) Setups the specified type. public string Setup(Type type, ORMAspect aspect, ObjectPool<StringBuilder> objectPool) Parameters type Type The type. aspect ORMAspect The aspect. objectPool ObjectPool<StringBuilder> The object pool. Returns string The resulting code in string format. See Also IInterfaceImplementationHelper"
  },
  "api/Inflatable.Aspect.InterfaceImplementation.SetupManyToManyFields.html": {
    "href": "api/Inflatable.Aspect.InterfaceImplementation.SetupManyToManyFields.html",
    "title": "Class SetupManyToManyFields | Inflatable API Reference",
    "keywords": "Class SetupManyToManyFields Namespace Inflatable.Aspect.InterfaceImplementation Assembly Inflatable.dll Sets up many to many fields. public class SetupManyToManyFields : IInterfaceImplementationHelper Inheritance object SetupManyToManyFields Implements IInterfaceImplementationHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods Setup(Type, ORMAspect, ObjectPool<StringBuilder>) Setups the specified type. public string Setup(Type type, ORMAspect aspect, ObjectPool<StringBuilder> objectPool) Parameters type Type The type. aspect ORMAspect The aspect. objectPool ObjectPool<StringBuilder> The object pool. Returns string The resulting code in string format. See Also IInterfaceImplementationHelper"
  },
  "api/Inflatable.Aspect.InterfaceImplementation.SetupMapFields.html": {
    "href": "api/Inflatable.Aspect.InterfaceImplementation.SetupMapFields.html",
    "title": "Class SetupMapFields | Inflatable API Reference",
    "keywords": "Class SetupMapFields Namespace Inflatable.Aspect.InterfaceImplementation Assembly Inflatable.dll Sets up the map fields public class SetupMapFields : IInterfaceImplementationHelper Inheritance object SetupMapFields Implements IInterfaceImplementationHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods Setup(Type, ORMAspect, ObjectPool<StringBuilder>) Setups the specified type. public string Setup(Type type, ORMAspect aspect, ObjectPool<StringBuilder> objectPool) Parameters type Type The type. aspect ORMAspect The aspect. objectPool ObjectPool<StringBuilder> The object pool. Returns string The resulting code in string format. See Also IInterfaceImplementationHelper"
  },
  "api/Inflatable.Aspect.InterfaceImplementation.SetupReferenceFields.html": {
    "href": "api/Inflatable.Aspect.InterfaceImplementation.SetupReferenceFields.html",
    "title": "Class SetupReferenceFields | Inflatable API Reference",
    "keywords": "Class SetupReferenceFields Namespace Inflatable.Aspect.InterfaceImplementation Assembly Inflatable.dll Sets up the reference fields public class SetupReferenceFields : IInterfaceImplementationHelper Inheritance object SetupReferenceFields Implements IInterfaceImplementationHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods Setup(Type, ORMAspect, ObjectPool<StringBuilder>) Setups the specified type. public string Setup(Type type, ORMAspect aspect, ObjectPool<StringBuilder> objectPool) Parameters type Type The type. aspect ORMAspect The aspect. objectPool ObjectPool<StringBuilder> The object pool. Returns string The resulting code in string format. See Also IInterfaceImplementationHelper"
  },
  "api/Inflatable.Aspect.InterfaceImplementation.html": {
    "href": "api/Inflatable.Aspect.InterfaceImplementation.html",
    "title": "Namespace Inflatable.Aspect.InterfaceImplementation | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Aspect.InterfaceImplementation Classes SetupIORMInitializationMethod SetupIORMObjectProperties Sets up the IORM Object properties SetupManyToManyFields Sets up many to many fields. SetupMapFields Sets up the map fields SetupReferenceFields Sets up the reference fields"
  },
  "api/Inflatable.Aspect.Interfaces.IEndMethodHelper.html": {
    "href": "api/Inflatable.Aspect.Interfaces.IEndMethodHelper.html",
    "title": "Interface IEndMethodHelper | Inflatable API Reference",
    "keywords": "Interface IEndMethodHelper Namespace Inflatable.Aspect.Interfaces Assembly Inflatable.dll End method helper public interface IEndMethodHelper Methods Setup(string, MethodInfo, IMapping, StringBuilder) Setups the specified return value name. void Setup(string returnValueName, MethodInfo method, IMapping mapping, StringBuilder builder) Parameters returnValueName string Name of the return value. method MethodInfo The method. mapping IMapping The mapping. builder StringBuilder The builder."
  },
  "api/Inflatable.Aspect.Interfaces.IInterfaceImplementationHelper.html": {
    "href": "api/Inflatable.Aspect.Interfaces.IInterfaceImplementationHelper.html",
    "title": "Interface IInterfaceImplementationHelper | Inflatable API Reference",
    "keywords": "Interface IInterfaceImplementationHelper Namespace Inflatable.Aspect.Interfaces Assembly Inflatable.dll Interface implementation helper public interface IInterfaceImplementationHelper Properties Order Gets the order. int Order { get; } Property Value int The order. Methods Setup(Type, ORMAspect, ObjectPool<StringBuilder>) Setups the specified type. string Setup(Type type, ORMAspect aspect, ObjectPool<StringBuilder> objectPool) Parameters type Type The type. aspect ORMAspect The aspect. objectPool ObjectPool<StringBuilder> The object pool. Returns string The resulting code in string format."
  },
  "api/Inflatable.Aspect.Interfaces.IORMObject.html": {
    "href": "api/Inflatable.Aspect.Interfaces.IORMObject.html",
    "title": "Interface IORMObject | Inflatable API Reference",
    "keywords": "Interface IORMObject Namespace Inflatable.Aspect.Interfaces Assembly Inflatable.dll ORM object interface public interface IORMObject : INotifyPropertyChanged Inherited Members INotifyPropertyChanged.PropertyChanged Properties PropertiesChanged0 Gets the properties changed. IList<string> PropertiesChanged0 { get; set; } Property Value IList<string> The properties changed. Session0 ORM session that this item came from (used for lazy loading) ISession Session0 { get; set; } Property Value ISession The ORM session object. Methods InitializeORMObject0(ISession) Initializes the orm object. void InitializeORMObject0(ISession session) Parameters session ISession The session."
  },
  "api/Inflatable.Aspect.Interfaces.IStartMethodHelper.html": {
    "href": "api/Inflatable.Aspect.Interfaces.IStartMethodHelper.html",
    "title": "Interface IStartMethodHelper | Inflatable API Reference",
    "keywords": "Interface IStartMethodHelper Namespace Inflatable.Aspect.Interfaces Assembly Inflatable.dll Start of method helper interface public interface IStartMethodHelper Methods Setup(MethodInfo, IMapping, StringBuilder) Sets up the specified method. void Setup(MethodInfo method, IMapping mapping, StringBuilder builder) Parameters method MethodInfo The method. mapping IMapping The mapping. builder StringBuilder The builder."
  },
  "api/Inflatable.Aspect.Interfaces.html": {
    "href": "api/Inflatable.Aspect.Interfaces.html",
    "title": "Namespace Inflatable.Aspect.Interfaces | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Aspect.Interfaces Interfaces IEndMethodHelper End method helper IInterfaceImplementationHelper Interface implementation helper IORMObject ORM object interface IStartMethodHelper Start of method helper interface"
  },
  "api/Inflatable.Aspect.ORMAspect.html": {
    "href": "api/Inflatable.Aspect.ORMAspect.html",
    "title": "Class ORMAspect | Inflatable API Reference",
    "keywords": "Class ORMAspect Namespace Inflatable.Aspect Assembly Inflatable.dll ORM Aspect public class ORMAspect : IAspect Inheritance object ORMAspect Implements IAspect Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ORMAspect(MappingManager, IEnumerable<IStartMethodHelper>, IEnumerable<IInterfaceImplementationHelper>, IEnumerable<IEndMethodHelper>, ObjectPool<StringBuilder>) Initializes a new instance of the ORMAspect class. public ORMAspect(MappingManager classManager, IEnumerable<IStartMethodHelper> startMethodHelpers, IEnumerable<IInterfaceImplementationHelper> interfaceImplementationHelpers, IEnumerable<IEndMethodHelper> endMethodHelpers, ObjectPool<StringBuilder> objectPool) Parameters classManager MappingManager The class manager. startMethodHelpers IEnumerable<IStartMethodHelper> The start method helpers. interfaceImplementationHelpers IEnumerable<IInterfaceImplementationHelper> The interface implementation helpers. endMethodHelpers IEnumerable<IEndMethodHelper> The end method helpers. objectPool ObjectPool<StringBuilder> The object pool. Exceptions ArgumentNullException classManager ArgumentNullException classManager Properties AssembliesUsing Set of assemblies that the aspect requires public ICollection<MetadataReference> AssembliesUsing { get; } Property Value ICollection<MetadataReference> ClassManager Gets the class manager. public MappingManager ClassManager { get; } Property Value MappingManager The class manager. EndMethodHelpers Gets the end method helpers. public IEnumerable<IEndMethodHelper> EndMethodHelpers { get; } Property Value IEnumerable<IEndMethodHelper> The end method helpers. IDFields Gets or sets the identifier fields that have been completed already. public List<IIDProperty> IDFields { get; } Property Value List<IIDProperty> The identifier fields that have been completed already. InterfaceImplementationHelpers Gets the interface implementation helpers. public IEnumerable<IInterfaceImplementationHelper> InterfaceImplementationHelpers { get; } Property Value IEnumerable<IInterfaceImplementationHelper> The interface implementation helpers. InterfacesUsing List of interfaces that need to be injected by this aspect public ICollection<Type> InterfacesUsing { get; } Property Value ICollection<Type> ManyToManyFields Gets or sets the many to many fields. public List<IManyToManyProperty> ManyToManyFields { get; } Property Value List<IManyToManyProperty> The many to many fields. ManyToOneFields Gets or sets the many to one fields. public List<IManyToOneProperty> ManyToOneFields { get; } Property Value List<IManyToOneProperty> The many to one fields. MapFields Gets or sets the map fields. public List<IMapProperty> MapFields { get; } Property Value List<IMapProperty> The map fields. ObjectPool Gets the object pool. public ObjectPool<StringBuilder> ObjectPool { get; } Property Value ObjectPool<StringBuilder> The object pool. ReferenceFields The reference fields that have been completed already. public List<IProperty> ReferenceFields { get; } Property Value List<IProperty> The reference fields that have been completed already. StartMethodHelpers Gets the start method helpers. public IEnumerable<IStartMethodHelper> StartMethodHelpers { get; } Property Value IEnumerable<IStartMethodHelper> The start method helpers. Usings Using statements that the aspect requires public ICollection<string> Usings { get; } Property Value ICollection<string> Methods Setup(object) Used to hook into the object once it has been created public void Setup(object value) Parameters value object Object created by the system SetupDefaultConstructor(Type) Used to insert code into the default constructor public string SetupDefaultConstructor(Type baseType) Parameters baseType Type Base type Returns string The code to insert SetupEndMethod(MethodInfo, Type, string) Used to insert code at the end of the method public string SetupEndMethod(MethodInfo method, Type baseType, string returnValueName) Parameters method MethodInfo Overridding Method baseType Type Base type returnValueName string Local holder for the value returned by the function Returns string The code to insert SetupExceptionMethod(MethodInfo, Type) Used to insert code within the catch portion of the try/catch portion of the method public string SetupExceptionMethod(MethodInfo method, Type baseType) Parameters method MethodInfo Overridding Method baseType Type Base type Returns string The code to insert SetupInterfaces(Type) Sets up the interfaces. public string SetupInterfaces(Type type) Parameters type Type The type. Returns string The code required to set them up. SetupStartMethod(MethodInfo, Type) Used to insert code at the beginning of the method public string SetupStartMethod(MethodInfo method, Type baseType) Parameters method MethodInfo Overridding Method baseType Type Base type Returns string The code to insert See Also IAspect"
  },
  "api/Inflatable.Aspect.StartMethod.IDStartMethod.html": {
    "href": "api/Inflatable.Aspect.StartMethod.IDStartMethod.html",
    "title": "Class IDStartMethod | Inflatable API Reference",
    "keywords": "Class IDStartMethod Namespace Inflatable.Aspect.StartMethod Assembly Inflatable.dll ID start method helper public class IDStartMethod : IStartMethodHelper Inheritance object IDStartMethod Implements IStartMethodHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup(MethodInfo, IMapping, StringBuilder) Sets up the specified method. public void Setup(MethodInfo method, IMapping mapping, StringBuilder builder) Parameters method MethodInfo The method. mapping IMapping The mapping. builder StringBuilder The builder. See Also IStartMethodHelper"
  },
  "api/Inflatable.Aspect.StartMethod.IManyToOneSingleStartMethod.html": {
    "href": "api/Inflatable.Aspect.StartMethod.IManyToOneSingleStartMethod.html",
    "title": "Class IManyToOneSingleStartMethod | Inflatable API Reference",
    "keywords": "Class IManyToOneSingleStartMethod Namespace Inflatable.Aspect.StartMethod Assembly Inflatable.dll Many to one single property start method public class IManyToOneSingleStartMethod : IStartMethodHelper Inheritance object IManyToOneSingleStartMethod Implements IStartMethodHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup(MethodInfo, IMapping, StringBuilder) Sets up the specified method. public void Setup(MethodInfo method, IMapping mapping, StringBuilder builder) Parameters method MethodInfo The method. mapping IMapping The mapping. builder StringBuilder The builder. See Also IStartMethodHelper"
  },
  "api/Inflatable.Aspect.StartMethod.MapStartMethod.html": {
    "href": "api/Inflatable.Aspect.StartMethod.MapStartMethod.html",
    "title": "Class MapStartMethod | Inflatable API Reference",
    "keywords": "Class MapStartMethod Namespace Inflatable.Aspect.StartMethod Assembly Inflatable.dll Map start method public class MapStartMethod : IStartMethodHelper Inheritance object MapStartMethod Implements IStartMethodHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup(MethodInfo, IMapping, StringBuilder) Sets up the specified method. public void Setup(MethodInfo method, IMapping mapping, StringBuilder builder) Parameters method MethodInfo The method. mapping IMapping The mapping. builder StringBuilder The builder. See Also IStartMethodHelper"
  },
  "api/Inflatable.Aspect.StartMethod.ReferenceStartMethod.html": {
    "href": "api/Inflatable.Aspect.StartMethod.ReferenceStartMethod.html",
    "title": "Class ReferenceStartMethod | Inflatable API Reference",
    "keywords": "Class ReferenceStartMethod Namespace Inflatable.Aspect.StartMethod Assembly Inflatable.dll Reference start method public class ReferenceStartMethod : IStartMethodHelper Inheritance object ReferenceStartMethod Implements IStartMethodHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup(MethodInfo, IMapping, StringBuilder) Sets up the specified method. public void Setup(MethodInfo method, IMapping mapping, StringBuilder builder) Parameters method MethodInfo The method. mapping IMapping The mapping. builder StringBuilder The builder. See Also IStartMethodHelper"
  },
  "api/Inflatable.Aspect.StartMethod.html": {
    "href": "api/Inflatable.Aspect.StartMethod.html",
    "title": "Namespace Inflatable.Aspect.StartMethod | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Aspect.StartMethod Classes IDStartMethod ID start method helper IManyToOneSingleStartMethod Many to one single property start method MapStartMethod Map start method ReferenceStartMethod Reference start method"
  },
  "api/Inflatable.Aspect.html": {
    "href": "api/Inflatable.Aspect.html",
    "title": "Namespace Inflatable.Aspect | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Aspect Classes ORMAspect ORM Aspect"
  },
  "api/Inflatable.BaseClasses.MappingBaseClass-2.html": {
    "href": "api/Inflatable.BaseClasses.MappingBaseClass-2.html",
    "title": "Class MappingBaseClass<TClassType, TDatabaseType> | Inflatable API Reference",
    "keywords": "Class MappingBaseClass<TClassType, TDatabaseType> Namespace Inflatable.BaseClasses Assembly Inflatable.dll Mapping base class public abstract class MappingBaseClass<TClassType, TDatabaseType> : IMapping<TClassType>, IMapping where TClassType : class where TDatabaseType : IDatabase Type Parameters TClassType The type of the lass type. TDatabaseType The type of the atabase type. Inheritance object MappingBaseClass<TClassType, TDatabaseType> Implements IMapping<TClassType> IMapping Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MappingBaseClass(string, string, string, string, int, bool) Initializes a new instance of the MappingBaseClass<TClassType, TDatabaseType> class. protected MappingBaseClass(string tableName = \"\", string schemaName = \"dbo\", string suffix = \"_\", string prefix = \"\", int order = 10, bool merge = false) Parameters tableName string Name of the table. schemaName string Name of the schema. suffix string The suffix. prefix string The prefix. order int The order. merge bool if set to true [merge] this mapping when possible. Properties AutoIDProperties Gets the automatic identifier properties. public List<IAutoIDProperty> AutoIDProperties { get; } Property Value List<IAutoIDProperty> The automatic identifier properties. DatabaseConfigType Gets the type of the database configuration. public Type DatabaseConfigType { get; } Property Value Type The type of the database configuration. IDProperties ID properties public List<IIDProperty> IDProperties { get; } Property Value List<IIDProperty> The identifier properties. ManyToManyProperties Gets the many to many properties. public List<IManyToManyProperty> ManyToManyProperties { get; } Property Value List<IManyToManyProperty> The many to many properties. ManyToOneProperties Gets the many to one properties. public List<IManyToOneProperty> ManyToOneProperties { get; } Property Value List<IManyToOneProperty> The many to one properties. MapProperties Gets the map properties. public List<IMapProperty> MapProperties { get; } Property Value List<IMapProperty> The map properties. Merge Gets a value indicating whether this IMapping should be merged. public bool Merge { get; } Property Value bool true if merge this instance; otherwise, false. ObjectType The object type associated with the mapping public Type ObjectType { get; } Property Value Type The type of the object. Order Order that the mappings are initialized public int Order { get; } Property Value int The order. Prefix Prefix used for defining properties/table name public string Prefix { get; } Property Value string The prefix. Queries Gets the queries. public IQueries Queries { get; } Property Value IQueries The queries. ReferenceProperties Reference Properties list public List<IProperty> ReferenceProperties { get; } Property Value List<IProperty> The reference properties. SchemaName Gets the name of the schema. public string SchemaName { get; } Property Value string The name of the schema. Suffix Suffix used for defining properties/table name public string Suffix { get; } Property Value string The suffix. TableName Table name public string TableName { get; } Property Value string The name of the table. Methods AddAutoKey() Adds an automatic key. public void AddAutoKey() ContainsProperty(string) Determines whether the mapping contains a property. public bool ContainsProperty(string propertyName) Parameters propertyName string Name of the property. Returns bool true if the mapping contains the specified property; otherwise, false. Copy(IMapping) Copies the specified mapping. public void Copy(IMapping mapping) Parameters mapping IMapping The mapping. CopyProperty(IIDProperty) Copies the property. public void CopyProperty(IIDProperty prop) Parameters prop IIDProperty The property. CopyProperty(IManyToManyProperty) Copies the property. public void CopyProperty(IManyToManyProperty prop) Parameters prop IManyToManyProperty The property. CopyProperty(IManyToOneProperty) Copies the property. public void CopyProperty(IManyToOneProperty prop) Parameters prop IManyToOneProperty The property. CopyProperty(IMapProperty) Copies the property. public void CopyProperty(IMapProperty prop) Parameters prop IMapProperty The property. CopyProperty(IProperty) Copies the property. public void CopyProperty(IProperty prop) Parameters prop IProperty The property. Equals(object?) determines if the mappings are equal public override bool Equals(object? obj) Parameters obj object Returns bool GetColumnName(string) Gets the name of the column based on property name. public string GetColumnName(string propertyName) Parameters propertyName string Name of the property. Returns string The column name. GetHashCode() Gets the mapping's hash code public override int GetHashCode() Returns int Hash code for the mapping ID<TDataType>(Expression<Func<TClassType, TDataType>>) Declares a property as an ID public ID<TClassType, TDataType> ID<TDataType>(Expression<Func<TClassType, TDataType>> expression) Parameters expression Expression<Func<TClassType, TDataType>> Expression pointing to the property Returns ID<TClassType, TDataType> the ID object Type Parameters TDataType Data type Exceptions ArgumentNullException expression ManyToMany<TDataType>(Expression<Func<TClassType, IList<TDataType>>>) Sets a property as a many to many type. public ManyToMany<TClassType, TDataType> ManyToMany<TDataType>(Expression<Func<TClassType, IList<TDataType>>> expression) where TDataType : class Parameters expression Expression<Func<TClassType, IList<TDataType>>> Expression pointing to the property Returns ManyToMany<TClassType, TDataType> The many to many object Type Parameters TDataType The type of the data type. ManyToOne<TDataType>(Expression<Func<TClassType, IList<TDataType>>>) Sets a property as a many to one type. public ManyToOneMany<TClassType, TDataType> ManyToOne<TDataType>(Expression<Func<TClassType, IList<TDataType>>> expression) where TDataType : class Parameters expression Expression<Func<TClassType, IList<TDataType>>> Expression pointing to the property Returns ManyToOneMany<TClassType, TDataType> The many to many object Type Parameters TDataType The type of the data type. ManyToOne<TDataType>(Expression<Func<TClassType, TDataType?>>) Sets a property as a many to one type. public ManyToOneSingle<TClassType, TDataType> ManyToOne<TDataType>(Expression<Func<TClassType, TDataType?>> expression) where TDataType : class Parameters expression Expression<Func<TClassType, TDataType>> Expression pointing to the property Returns ManyToOneSingle<TClassType, TDataType> The many to many object Type Parameters TDataType The type of the data type. Map<TDataType>(Expression<Func<TClassType, TDataType?>>) Sets a property as a map type. public Map<TClassType, TDataType> Map<TDataType>(Expression<Func<TClassType, TDataType?>> expression) where TDataType : class Parameters expression Expression<Func<TClassType, TDataType>> Expression pointing to the property Returns Map<TClassType, TDataType> The map object Type Parameters TDataType The type of the data type. Exceptions ArgumentNullException expression Reduce(IMapping, ILogger) Reduces this instance based on parent mapping properties. public void Reduce(IMapping parentMapping, ILogger logger) Parameters parentMapping IMapping The parent mapping. logger ILogger The logger. Reduce(ILogger) Reduces this instance and removes duplicate properties public void Reduce(ILogger logger) Parameters logger ILogger The logger. Reference<TDataType>(Expression<Func<TClassType, TDataType>>) Sets a property as a reference type public Reference<TClassType, TDataType> Reference<TDataType>(Expression<Func<TClassType, TDataType>> expression) Parameters expression Expression<Func<TClassType, TDataType>> Expression pointing to the property Returns Reference<TClassType, TDataType> the reference object Type Parameters TDataType Data type Exceptions ArgumentNullException expression SetQuery(QueryType, string, CommandType, params IParameter[]) Sets the default query based on query type public IMapping SetQuery(QueryType queryType, string queryString, CommandType databaseCommandType, params IParameter[] parameters) Parameters queryType QueryType Type of the query. queryString string The query string. databaseCommandType CommandType Type of the database command. parameters IParameter[] The parameters. Returns IMapping This Exceptions ArgumentNullException queryString Setup() Sets up the mapping public void Setup() ToString() Converts the mapping to a string public override string ToString() Returns string The table name Operators operator ==(MappingBaseClass<TClassType, TDatabaseType>?, MappingBaseClass<TClassType, TDatabaseType>?) Determines if the two items are equal public static bool operator ==(MappingBaseClass<TClassType, TDatabaseType>? Item1, MappingBaseClass<TClassType, TDatabaseType>? Item2) Parameters Item1 MappingBaseClass<TClassType, TDatabaseType> Item 1 Item2 MappingBaseClass<TClassType, TDatabaseType> Item 2 Returns bool True if they are equal, false otherwise operator !=(MappingBaseClass<TClassType, TDatabaseType>?, MappingBaseClass<TClassType, TDatabaseType>?) Determines if the two items are not equal public static bool operator !=(MappingBaseClass<TClassType, TDatabaseType>? Item1, MappingBaseClass<TClassType, TDatabaseType>? Item2) Parameters Item1 MappingBaseClass<TClassType, TDatabaseType> Item 1 Item2 MappingBaseClass<TClassType, TDatabaseType> Item 2 Returns bool True if they are not equal, false otherwise See Also IMapping IMapping<TClassType>"
  },
  "api/Inflatable.BaseClasses.ObjectBaseClass-2.html": {
    "href": "api/Inflatable.BaseClasses.ObjectBaseClass-2.html",
    "title": "Class ObjectBaseClass<TObjectType, TIDType> | Inflatable API Reference",
    "keywords": "Class ObjectBaseClass<TObjectType, TIDType> Namespace Inflatable.BaseClasses Assembly Inflatable.dll Object base class helper. This is not required but automatically sets up basic functions and properties to simplify things a bit. public abstract class ObjectBaseClass<TObjectType, TIDType> : IComparable, IComparable<TObjectType>, IObject<TIDType> where TObjectType : ObjectBaseClass<TObjectType, TIDType>, new() where TIDType : IComparable Type Parameters TObjectType Object type (must be the child object type) TIDType ID type Inheritance object ObjectBaseClass<TObjectType, TIDType> Implements IComparable IComparable<TObjectType> IObject<TIDType> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ObjectBaseClass() Constructor protected ObjectBaseClass() Properties Active Is the object active? [BoolGenerator] public bool Active { get; set; } Property Value bool DateCreated Date object was created [Between(\"1/1/1900\", \"1/1/2100\", \"\")] [DateTimeGenerator(\"1/1/1900\", \"1/1/2100\")] public DateTime DateCreated { get; set; } Property Value DateTime DateModified Date last modified [Between(\"1/1/1900\", \"1/1/2100\", \"\")] [DateTimeGenerator(\"1/1/1900\", \"1/1/2100\")] public DateTime DateModified { get; set; } Property Value DateTime ID ID for the object public TIDType ID { get; set; } Property Value TIDType Methods CompareTo(object?) Compares the object to another object public int CompareTo(object? obj) Parameters obj object Object to compare to Returns int 0 if they are equal, -1 if this is smaller, 1 if it is larger CompareTo(TObjectType?) Compares the object to another object public virtual int CompareTo(TObjectType? other) Parameters other TObjectType Object to compare to Returns int 0 if they are equal, -1 if this is smaller, 1 if it is larger Equals(object?) Determines if two items are equal public override bool Equals(object? obj) Parameters obj object The object to compare this to Returns bool true if they are the same, false otherwise GetHashCode() Returns the hash of this item public override int GetHashCode() Returns int the int hash of the item SetupObject() Sets up the object for saving purposes public virtual void SetupObject() Operators operator ==(ObjectBaseClass<TObjectType, TIDType>, ObjectBaseClass<TObjectType, TIDType>) The == operator public static bool operator ==(ObjectBaseClass<TObjectType, TIDType> left, ObjectBaseClass<TObjectType, TIDType> right) Parameters left ObjectBaseClass<TObjectType, TIDType> The left. right ObjectBaseClass<TObjectType, TIDType> The right. Returns bool true if the first and second item are the same, false otherwise operator >(ObjectBaseClass<TObjectType, TIDType>, ObjectBaseClass<TObjectType, TIDType>) The > operator public static bool operator >(ObjectBaseClass<TObjectType, TIDType> left, ObjectBaseClass<TObjectType, TIDType> right) Parameters left ObjectBaseClass<TObjectType, TIDType> The left. right ObjectBaseClass<TObjectType, TIDType> The right. Returns bool True if the first item is greater than the second, false otherwise operator >=(ObjectBaseClass<TObjectType, TIDType>, ObjectBaseClass<TObjectType, TIDType>) Implements the operator >=. public static bool operator >=(ObjectBaseClass<TObjectType, TIDType> left, ObjectBaseClass<TObjectType, TIDType> right) Parameters left ObjectBaseClass<TObjectType, TIDType> The left. right ObjectBaseClass<TObjectType, TIDType> The right. Returns bool The result of the operator. operator !=(ObjectBaseClass<TObjectType, TIDType>, ObjectBaseClass<TObjectType, TIDType>) != operator public static bool operator !=(ObjectBaseClass<TObjectType, TIDType> first, ObjectBaseClass<TObjectType, TIDType> second) Parameters first ObjectBaseClass<TObjectType, TIDType> First item second ObjectBaseClass<TObjectType, TIDType> Second item Returns bool returns true if they are not equal, false otherwise operator <(ObjectBaseClass<TObjectType, TIDType>, ObjectBaseClass<TObjectType, TIDType>) The < operator public static bool operator <(ObjectBaseClass<TObjectType, TIDType> left, ObjectBaseClass<TObjectType, TIDType> right) Parameters left ObjectBaseClass<TObjectType, TIDType> The left. right ObjectBaseClass<TObjectType, TIDType> The right. Returns bool True if the first item is less than the second, false otherwise operator <=(ObjectBaseClass<TObjectType, TIDType>, ObjectBaseClass<TObjectType, TIDType>) Implements the operator <=. public static bool operator <=(ObjectBaseClass<TObjectType, TIDType> left, ObjectBaseClass<TObjectType, TIDType> right) Parameters left ObjectBaseClass<TObjectType, TIDType> The left. right ObjectBaseClass<TObjectType, TIDType> The right. Returns bool The result of the operator."
  },
  "api/Inflatable.BaseClasses.html": {
    "href": "api/Inflatable.BaseClasses.html",
    "title": "Namespace Inflatable.BaseClasses | Inflatable API Reference",
    "keywords": "Namespace Inflatable.BaseClasses Classes MappingBaseClass<TClassType, TDatabaseType> Mapping base class ObjectBaseClass<TObjectType, TIDType> Object base class helper. This is not required but automatically sets up basic functions and properties to simplify things a bit."
  },
  "api/Inflatable.ClassMapper.BaseClasses.IDPropertyBase-3.html": {
    "href": "api/Inflatable.ClassMapper.BaseClasses.IDPropertyBase-3.html",
    "title": "Class IDPropertyBase<TClassType, TDataType, TReturnType> | Inflatable API Reference",
    "keywords": "Class IDPropertyBase<TClassType, TDataType, TReturnType> Namespace Inflatable.ClassMapper.BaseClasses Assembly Inflatable.dll ID property base class public abstract class IDPropertyBase<TClassType, TDataType, TReturnType> : IIDProperty<TClassType, TDataType, TReturnType>, IFluentInterface, IIDProperty<TClassType, TDataType>, IIDProperty, IPropertyColumns where TClassType : class where TReturnType : IIDProperty<TClassType, TDataType, TReturnType> Type Parameters TClassType The type of the lass type. TDataType The type of the ata type. TReturnType The type of the eturn type. Inheritance object IDPropertyBase<TClassType, TDataType, TReturnType> Implements IIDProperty<TClassType, TDataType, TReturnType> IFluentInterface IIDProperty<TClassType, TDataType> IIDProperty IPropertyColumns Derived ID<ClassType, DataType> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors IDPropertyBase(Expression<Func<TClassType, TDataType>>, IMapping) Constructor protected IDPropertyBase(Expression<Func<TClassType, TDataType>> expression, IMapping mapping) Parameters expression Expression<Func<TClassType, TDataType>> Expression used to point to the property mapping IMapping Mapping the StringID is added to Properties AutoIncrement Gets a value indicating whether to [automatic increment]. public bool AutoIncrement { get; } Property Value bool true if [automatic increment]; otherwise, false. ColumnName Gets the name of the column. public string ColumnName { get; } Property Value string The name of the column. Columns Gets the columns associated with this property. public IQueryColumnInfo[]? Columns { get; protected set; } Property Value IQueryColumnInfo[] The columns associated with this property. CompiledExpression Compiled version of the expression public Func<TClassType, TDataType> CompiledExpression { get; } Property Value Func<TClassType, TDataType> ComputedColumnSpecification Gets the computed column specification. public string ComputedColumnSpecification { get; } Property Value string The computed column specification. Constraints Gets the constraints if the data source supports them. public IList<string> Constraints { get; } Property Value IList<string> The constraints if the data source supports them. DefaultValue Default value for this property public Func<TDataType> DefaultValue { get; } Property Value Func<TDataType> Expression Expression pointing to the property public Expression<Func<TClassType, TDataType>> Expression { get; } Property Value Expression<Func<TClassType, TDataType>> Index Gets a value indicating whether this IIDProperty is indexed. public bool Index { get; } Property Value bool true if index; otherwise, false. InternalFieldName Gets the name of the internal field. public string InternalFieldName { get; } Property Value string The name of the internal field. MaxLength Gets the maximum length. public int MaxLength { get; } Property Value int The maximum length. Name Gets the name. public string Name { get; } Property Value string The name. Nullable Gets a value indicating whether this IIDProperty is nullable. public bool Nullable { get; } Property Value bool true if nullable; otherwise, false. ParentMapping Gets the parent mapping. public IMapping ParentMapping { get; } Property Value IMapping The parent mapping. PropertyType Gets the type of the property. public Type PropertyType { get; } Property Value Type The type of the property. ReadOnly Gets a value indicating whether [read only]. public bool ReadOnly { get; } Property Value bool true if [read only]; otherwise, false. SetAction Gets or sets the expression used to set the value. protected Action<TClassType, TDataType> SetAction { get; set; } Property Value Action<TClassType, TDataType> The set expression. TypeName Gets the name of the type. public string TypeName { get; } Property Value string The name of the type. Unique Gets a value indicating whether this IIDProperty is unique. public bool Unique { get; } Property Value bool true if unique; otherwise, false. Methods AddToChildTable(ITable) Adds to a child table. public void AddToChildTable(ITable table) Parameters table ITable The table. AddToTable(ITable) Adds to table. public void AddToTable(ITable table) Parameters table ITable The table. CompareTo(IDPropertyBase<TClassType, TDataType, TReturnType>?) Compares to. public virtual int CompareTo(IDPropertyBase<TClassType, TDataType, TReturnType>? other) Parameters other IDPropertyBase<TClassType, TDataType, TReturnType> The other. Returns int 1 if it's greater, 0 if they're equal, -1 if it's less than. CompareTo(object?) Compares the object to another object public int CompareTo(object? other) Parameters other object Object to compare to Returns int 0 if they are equal, -1 if this is smaller, 1 if it is larger Convert<TResult>(IMapping) Converts this instance to the class specified public abstract IIDProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters mapping IMapping The mapping. Returns IIDProperty The resulting property Type Parameters TResult The type of the result. Equals(object) Determines if the two objects are equal and returns true if they are, false otherwise public override bool Equals(object obj) Parameters obj object Object to compare to Returns bool True if they are equal, false otherwise GetColumnInfo() Gets the column information. public IQueryColumnInfo[] GetColumnInfo() Returns IQueryColumnInfo[] The column information. GetHashCode() Returns the hash code for the property public override int GetHashCode() Returns int The hash code for the property IsAutoIncremented() Determines whether this [is auto incremented]. public TReturnType IsAutoIncremented() Returns TReturnType this IsIndexed() Determines whether this instance is indexed. public TReturnType IsIndexed() Returns TReturnType this IsReadOnly() Determines whether [is read only]. public TReturnType IsReadOnly() Returns TReturnType this IsUnique() Determines whether this instance is unique. public TReturnType IsUnique() Returns TReturnType this SetColumnInfo(IMappingSource?) Sets the column information. public abstract void SetColumnInfo(IMappingSource? mappings) Parameters mappings IMappingSource The mappings. Setup() Sets up the property (used internally) public abstract void Setup() ToString() Gets the property as a string public override string ToString() Returns string The string representation of the property WithColumnName(string) Sets the name of the field in the database. public TReturnType WithColumnName(string columnName) Parameters columnName string Name of the field. Returns TReturnType this WithComputedColumnSpecification(string) Sets the computed column specification if the source allows it. public TReturnType WithComputedColumnSpecification(string computedColumnSpecification) Parameters computedColumnSpecification string The computed column specification. Returns TReturnType this WithConstraint(string) Sets a constraint on the field if the source allows it. public TReturnType WithConstraint(string constraint) Parameters constraint string The constraint. Returns TReturnType this WithDefaultValue(Func<TDataType>) Sets the default value of the property. public TReturnType WithDefaultValue(Func<TDataType> value) Parameters value Func<TDataType> The value. Returns TReturnType this WithMaxLength() Sets the length for the property to MAX. public TReturnType WithMaxLength() Returns TReturnType this. WithMaxLength(int) Sets the max length. public TReturnType WithMaxLength(int maxLength) Parameters maxLength int The maximum length. Returns TReturnType This Operators operator ==(IDPropertyBase<TClassType, TDataType, TReturnType>, IDPropertyBase<TClassType, TDataType, TReturnType>) The == operator public static bool operator ==(IDPropertyBase<TClassType, TDataType, TReturnType> left, IDPropertyBase<TClassType, TDataType, TReturnType> right) Parameters left IDPropertyBase<TClassType, TDataType, TReturnType> left item right IDPropertyBase<TClassType, TDataType, TReturnType> right item Returns bool true if the left and right item are the same, false otherwise operator >(IDPropertyBase<TClassType, TDataType, TReturnType>, IDPropertyBase<TClassType, TDataType, TReturnType>) The > operator public static bool operator >(IDPropertyBase<TClassType, TDataType, TReturnType> left, IDPropertyBase<TClassType, TDataType, TReturnType> right) Parameters left IDPropertyBase<TClassType, TDataType, TReturnType> left item right IDPropertyBase<TClassType, TDataType, TReturnType> right item Returns bool True if the left item is greater than the right, false otherwise operator >=(IDPropertyBase<TClassType, TDataType, TReturnType>, IDPropertyBase<TClassType, TDataType, TReturnType>) Implements the operator >=. public static bool operator >=(IDPropertyBase<TClassType, TDataType, TReturnType> left, IDPropertyBase<TClassType, TDataType, TReturnType> right) Parameters left IDPropertyBase<TClassType, TDataType, TReturnType> The left. right IDPropertyBase<TClassType, TDataType, TReturnType> The right. Returns bool The result of the operator. operator !=(IDPropertyBase<TClassType, TDataType, TReturnType>, IDPropertyBase<TClassType, TDataType, TReturnType>) != operator public static bool operator !=(IDPropertyBase<TClassType, TDataType, TReturnType> left, IDPropertyBase<TClassType, TDataType, TReturnType> right) Parameters left IDPropertyBase<TClassType, TDataType, TReturnType> left item right IDPropertyBase<TClassType, TDataType, TReturnType> right item Returns bool returns true if they are not equal, false otherwise operator <(IDPropertyBase<TClassType, TDataType, TReturnType>, IDPropertyBase<TClassType, TDataType, TReturnType>) The < operator public static bool operator <(IDPropertyBase<TClassType, TDataType, TReturnType> left, IDPropertyBase<TClassType, TDataType, TReturnType> right) Parameters left IDPropertyBase<TClassType, TDataType, TReturnType> left item right IDPropertyBase<TClassType, TDataType, TReturnType> right item Returns bool True if the left item is less than the right, false otherwise operator <=(IDPropertyBase<TClassType, TDataType, TReturnType>, IDPropertyBase<TClassType, TDataType, TReturnType>) Implements the operator <=. public static bool operator <=(IDPropertyBase<TClassType, TDataType, TReturnType> left, IDPropertyBase<TClassType, TDataType, TReturnType> right) Parameters left IDPropertyBase<TClassType, TDataType, TReturnType> The left. right IDPropertyBase<TClassType, TDataType, TReturnType> The right. Returns bool The result of the operator. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType>"
  },
  "api/Inflatable.ClassMapper.BaseClasses.ManyClassPropertyBase-3.html": {
    "href": "api/Inflatable.ClassMapper.BaseClasses.ManyClassPropertyBase-3.html",
    "title": "Class ManyClassPropertyBase<TClassType, TDataType, TReturnType> | Inflatable API Reference",
    "keywords": "Class ManyClassPropertyBase<TClassType, TDataType, TReturnType> Namespace Inflatable.ClassMapper.BaseClasses Assembly Inflatable.dll Many class property base. public abstract class ManyClassPropertyBase<TClassType, TDataType, TReturnType> : IManyToManyProperty<TClassType, IList<TDataType>, TReturnType>, IFluentInterface, IManyToManyProperty<TClassType, IList<TDataType>>, IManyToManyProperty, IClassProperty, IPropertyColumns where TClassType : class where TDataType : class where TReturnType : IManyToManyProperty<TClassType, IList<TDataType>, TReturnType> Type Parameters TClassType The class type. TDataType The data type. TReturnType The return type. Inheritance object ManyClassPropertyBase<TClassType, TDataType, TReturnType> Implements IManyToManyProperty<TClassType, IList<TDataType>, TReturnType> IFluentInterface IManyToManyProperty<TClassType, IList<TDataType>> IManyToManyProperty IClassProperty IPropertyColumns Derived ManyToMany<TClassType, TDataType> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ManyClassPropertyBase(Expression<Func<TClassType, IList<TDataType>>>, IMapping) Constructor protected ManyClassPropertyBase(Expression<Func<TClassType, IList<TDataType>>> expression, IMapping mapping) Parameters expression Expression<Func<TClassType, IList<TDataType>>> Expression used to point to the property mapping IMapping Mapping the StringID is added to Properties Cascade Gets a value indicating whether this is cascade. public bool Cascade { get; protected set; } Property Value bool true if cascade; otherwise, false. Columns Gets the columns associated with this property. public IQueryColumnInfo[]? Columns { get; protected set; } Property Value IQueryColumnInfo[] The columns associated with this property. CompiledExpression Compiled version of the expression public Func<TClassType, IList<TDataType>> CompiledExpression { get; } Property Value Func<TClassType, IList<TDataType>> The compiled expression. DatabaseJoinsCascade Gets a value indicating whether [database joins cascade]. public bool DatabaseJoinsCascade { get; protected set; } Property Value bool true if [database joins cascade]; otherwise, false. Expression Expression pointing to the property public Expression<Func<TClassType, IList<TDataType>>> Expression { get; } Property Value Expression<Func<TClassType, IList<TDataType>>> The expression. ForeignMapping Gets the foreign mapping. public List<IMapping> ForeignMapping { get; protected set; } Property Value List<IMapping> The foreign mapping. InternalFieldName Gets the name of the internal field. public string InternalFieldName { get; } Property Value string The name of the internal field. LoadPropertyQuery Gets the load property query. public Query? LoadPropertyQuery { get; protected set; } Property Value Query The load property query. Name Gets the name. public string Name { get; } Property Value string The name. OnDeleteDoNothingValue Gets or sets a value indicating whether [on delete do nothing]. protected bool OnDeleteDoNothingValue { get; set; } Property Value bool true if [on delete do nothing]; otherwise, false. ParentMapping Gets the parent mapping. public IMapping ParentMapping { get; } Property Value IMapping The parent mapping. PropertyType Gets the type of the property. public Type PropertyType { get; protected set; } Property Value Type The type of the property. TableName Gets the name of the table. public string? TableName { get; protected set; } Property Value string The name of the table. TypeName Gets the name of the type. public string TypeName { get; protected set; } Property Value string The name of the type. Methods CascadeChanges() Cascades changes to the mapped instance. public TReturnType CascadeChanges() Returns TReturnType This Convert<TResult>(IMapping) Converts this instance to the class specified public abstract IManyToManyProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters mapping IMapping The mapping. Returns IManyToManyProperty The resulting property Type Parameters TResult The type of the result. Equals(object) Determines if the two objects are equal and returns true if they are, false otherwise public override bool Equals(object obj) Parameters obj object Object to compare to Returns bool True if they are equal, false otherwise GetColumnInfo() Gets the column information. public IQueryColumnInfo[] GetColumnInfo() Returns IQueryColumnInfo[] The column information. GetHashCode() Returns the hash code for the property public override int GetHashCode() Returns int The hash code for the property GetValue(object) Gets the property's value from the object sent in public object? GetValue(object Object) Parameters Object object Object to get the value from Returns object The value of the property LoadUsing(string, CommandType) Loads the property using the query specified. public TReturnType LoadUsing(string queryText, CommandType type) Parameters queryText string The query text. type CommandType The type. Returns TReturnType This OnDeleteDoNothing() Called when you want to override the default referential integrity and do nothing on delete. public TReturnType OnDeleteDoNothing() Returns TReturnType This SetColumnInfo(IMappingSource) Sets the column information. public abstract void SetColumnInfo(IMappingSource mappings) Parameters mappings IMappingSource The mappings. SetTableName(string) Sets the table's name. public TReturnType SetTableName(string tableName) Parameters tableName string Name of the table. Returns TReturnType This Setup(IMappingSource, ISource) Sets up the property (used internally) public abstract void Setup(IMappingSource mappings, ISource sourceSpec) Parameters mappings IMappingSource The mappings. sourceSpec ISource The source spec. Similar(IManyToManyProperty) Checks if the properties are similar to one another public bool Similar(IManyToManyProperty secondProperty) Parameters secondProperty IManyToManyProperty The second property. Returns bool True if they are similar, false otherwise ToString() Gets the property as a string public override string ToString() Returns string The string representation of the property Operators operator ==(ManyClassPropertyBase<TClassType, TDataType, TReturnType>, ManyClassPropertyBase<TClassType, TDataType, TReturnType>) The == operator public static bool operator ==(ManyClassPropertyBase<TClassType, TDataType, TReturnType> first, ManyClassPropertyBase<TClassType, TDataType, TReturnType> second) Parameters first ManyClassPropertyBase<TClassType, TDataType, TReturnType> First item second ManyClassPropertyBase<TClassType, TDataType, TReturnType> Second item Returns bool true if the first and second item are the same, false otherwise operator >(ManyClassPropertyBase<TClassType, TDataType, TReturnType>, ManyClassPropertyBase<TClassType, TDataType, TReturnType>) The > operator public static bool operator >(ManyClassPropertyBase<TClassType, TDataType, TReturnType> first, ManyClassPropertyBase<TClassType, TDataType, TReturnType> second) Parameters first ManyClassPropertyBase<TClassType, TDataType, TReturnType> First item second ManyClassPropertyBase<TClassType, TDataType, TReturnType> Second item Returns bool True if the first item is greater than the second, false otherwise operator !=(ManyClassPropertyBase<TClassType, TDataType, TReturnType>, ManyClassPropertyBase<TClassType, TDataType, TReturnType>) != operator public static bool operator !=(ManyClassPropertyBase<TClassType, TDataType, TReturnType> first, ManyClassPropertyBase<TClassType, TDataType, TReturnType> second) Parameters first ManyClassPropertyBase<TClassType, TDataType, TReturnType> First item second ManyClassPropertyBase<TClassType, TDataType, TReturnType> Second item Returns bool returns true if they are not equal, false otherwise operator <(ManyClassPropertyBase<TClassType, TDataType, TReturnType>, ManyClassPropertyBase<TClassType, TDataType, TReturnType>) The < operator public static bool operator <(ManyClassPropertyBase<TClassType, TDataType, TReturnType> first, ManyClassPropertyBase<TClassType, TDataType, TReturnType> second) Parameters first ManyClassPropertyBase<TClassType, TDataType, TReturnType> First item second ManyClassPropertyBase<TClassType, TDataType, TReturnType> Second item Returns bool True if the first item is less than the second, false otherwise"
  },
  "api/Inflatable.ClassMapper.BaseClasses.ManyToOneManyPropertyBase-3.html": {
    "href": "api/Inflatable.ClassMapper.BaseClasses.ManyToOneManyPropertyBase-3.html",
    "title": "Class ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> | Inflatable API Reference",
    "keywords": "Class ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> Namespace Inflatable.ClassMapper.BaseClasses Assembly Inflatable.dll Many to one single property base public abstract class ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> : IManyToOneProperty<TClassType, IList<TDataType>, TReturnType>, IFluentInterface, IManyToOneProperty<TClassType, IList<TDataType>>, IManyToOneListProperty, IManyToOneProperty, IClassProperty, IPropertyColumns where TClassType : class where TDataType : class where TReturnType : IManyToOneProperty<TClassType, IList<TDataType>, TReturnType> Type Parameters TClassType The type of the class type. TDataType The type of the data type. TReturnType The type of the return type. Inheritance object ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> Implements IManyToOneProperty<TClassType, IList<TDataType>, TReturnType> IFluentInterface IManyToOneProperty<TClassType, IList<TDataType>> IManyToOneListProperty IManyToOneProperty IClassProperty IPropertyColumns Derived ManyToOneMany<TClassType, TDataType> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ManyToOneManyPropertyBase(Expression<Func<TClassType, IList<TDataType>>>, IMapping) Constructor protected ManyToOneManyPropertyBase(Expression<Func<TClassType, IList<TDataType>>> expression, IMapping mapping) Parameters expression Expression<Func<TClassType, IList<TDataType>>> Expression used to point to the property mapping IMapping Mapping the StringID is added to Properties Cascade Gets a value indicating whether this is cascade. public bool Cascade { get; protected set; } Property Value bool true if cascade; otherwise, false. ColumnName Gets or sets the name of the column. public string ColumnName { get; protected set; } Property Value string The name of the column. Columns Gets the columns associated with this property. public IQueryColumnInfo[]? Columns { get; protected set; } Property Value IQueryColumnInfo[] The columns associated with this property. CompiledExpression Compiled version of the expression public Func<TClassType, IList<TDataType>> CompiledExpression { get; } Property Value Func<TClassType, IList<TDataType>> The compiled expression. Expression Expression pointing to the property public Expression<Func<TClassType, IList<TDataType>>> Expression { get; } Property Value Expression<Func<TClassType, IList<TDataType>>> The expression. ForeignMapping Gets the foreign mapping. public List<IMapping> ForeignMapping { get; protected set; } Property Value List<IMapping> The foreign mapping. InternalFieldName Gets the name of the internal field. public string InternalFieldName { get; } Property Value string The name of the internal field. LoadPropertyQuery Gets the load property query. public Query? LoadPropertyQuery { get; protected set; } Property Value Query The load property query. Name Gets the name. public string Name { get; } Property Value string The name. OnDeleteDoNothingValue Gets or sets a value indicating whether [on delete do nothing]. protected bool OnDeleteDoNothingValue { get; set; } Property Value bool true if [on delete do nothing]; otherwise, false. ParentMapping Gets the parent mapping. public IMapping ParentMapping { get; } Property Value IMapping The parent mapping. PropertyType Gets the type of the property. public Type PropertyType { get; } Property Value Type The type of the property. TypeName Gets the name of the type. public string TypeName { get; } Property Value string The name of the type. Methods CascadeChanges() Cascades changes to the mapped instance. public TReturnType CascadeChanges() Returns TReturnType This Convert<TResult>(IMapping) Converts this instance to the class specified public abstract IManyToOneProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters mapping IMapping The mapping. Returns IManyToOneProperty The resulting property Type Parameters TResult The type of the result. Equals(object) Determines if the two objects are equal and returns true if they are, false otherwise public override bool Equals(object obj) Parameters obj object Object to compare to Returns bool True if they are equal, false otherwise GetColumnInfo() Gets the column information. public IQueryColumnInfo[] GetColumnInfo() Returns IQueryColumnInfo[] The column information. GetHashCode() Returns the hash code for the property public override int GetHashCode() Returns int The hash code for the property GetValue(object) Gets the property's value from the object sent in public object? GetValue(object Object) Parameters Object object Object to get the value from Returns object The value of the property LoadUsing(string, CommandType) Loads the property using the query specified. public TReturnType LoadUsing(string queryText, CommandType type) Parameters queryText string The query text. type CommandType The type. Returns TReturnType This OnDeleteDoNothing() Called when you want to override the default referential integrity and do nothing on delete. public TReturnType OnDeleteDoNothing() Returns TReturnType This SetColumnInfo(IMappingSource) Sets the column information. public abstract void SetColumnInfo(IMappingSource mappings) Parameters mappings IMappingSource The mappings. SetColumnName(string) Sets the name of the column. public TReturnType SetColumnName(string columnName) Parameters columnName string Name of the column. Returns TReturnType This Setup(IMappingSource, ISource) Sets up the property (used internally) public abstract void Setup(IMappingSource mappings, ISource sourceSpec) Parameters mappings IMappingSource The mappings. sourceSpec ISource The source spec. Similar(IManyToOneProperty) Checks if the properties are similar to one another public bool Similar(IManyToOneProperty secondProperty) Parameters secondProperty IManyToOneProperty The second property. Returns bool True if they are similar, false otherwise ToString() Gets the property as a string public override string ToString() Returns string The string representation of the property Operators operator ==(ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType>, ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType>) The == operator public static bool operator ==(ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> first, ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> second) Parameters first ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> First item second ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> Second item Returns bool true if the first and second item are the same, false otherwise operator >(ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType>, ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType>) The > operator public static bool operator >(ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> first, ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> second) Parameters first ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> First item second ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> Second item Returns bool True if the first item is greater than the second, false otherwise operator !=(ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType>, ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType>) != operator public static bool operator !=(ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> first, ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> second) Parameters first ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> First item second ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> Second item Returns bool returns true if they are not equal, false otherwise operator <(ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType>, ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType>) The < operator public static bool operator <(ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> first, ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> second) Parameters first ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> First item second ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> Second item Returns bool True if the first item is less than the second, false otherwise See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType>"
  },
  "api/Inflatable.ClassMapper.BaseClasses.ManyToOneOnePropertyBase-3.html": {
    "href": "api/Inflatable.ClassMapper.BaseClasses.ManyToOneOnePropertyBase-3.html",
    "title": "Class ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> | Inflatable API Reference",
    "keywords": "Class ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> Namespace Inflatable.ClassMapper.BaseClasses Assembly Inflatable.dll Many to one single property base public abstract class ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> : IManyToOneProperty<TClassType, TDataType, TReturnType>, IFluentInterface, IManyToOneProperty<TClassType, TDataType>, IManyToOneProperty, IClassProperty, IPropertyColumns where TClassType : class where TDataType : class where TReturnType : IManyToOneProperty<TClassType, TDataType, TReturnType> Type Parameters TClassType The type of the class type. TDataType The type of the data type. TReturnType The type of the return type. Inheritance object ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> Implements IManyToOneProperty<TClassType, TDataType, TReturnType> IFluentInterface IManyToOneProperty<TClassType, TDataType> IManyToOneProperty IClassProperty IPropertyColumns Derived ManyToOneSingle<TClassType, TDataType> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ManyToOneOnePropertyBase(Expression<Func<TClassType, TDataType?>>, IMapping) Constructor protected ManyToOneOnePropertyBase(Expression<Func<TClassType, TDataType?>> expression, IMapping mapping) Parameters expression Expression<Func<TClassType, TDataType>> Expression used to point to the property mapping IMapping Mapping the StringID is added to Properties Cascade Gets a value indicating whether this is cascade. public bool Cascade { get; protected set; } Property Value bool true if cascade; otherwise, false. ColumnName Gets or sets the name of the column. public string ColumnName { get; protected set; } Property Value string The name of the column. Columns Gets the columns associated with this property. public IQueryColumnInfo[]? Columns { get; protected set; } Property Value IQueryColumnInfo[] The columns associated with this property. CompiledExpression Compiled version of the expression public Func<TClassType, TDataType?> CompiledExpression { get; } Property Value Func<TClassType, TDataType> The compiled expression. Expression Expression pointing to the property public Expression<Func<TClassType, TDataType?>> Expression { get; } Property Value Expression<Func<TClassType, TDataType>> The expression. ForeignMapping Gets the foreign mapping. public List<IMapping> ForeignMapping { get; protected set; } Property Value List<IMapping> The foreign mapping. InternalFieldName Gets the name of the internal field. public string InternalFieldName { get; } Property Value string The name of the internal field. LoadPropertyQuery Gets the load property query. public Query? LoadPropertyQuery { get; protected set; } Property Value Query The load property query. Name Gets the name. public string Name { get; } Property Value string The name. OnDeleteDoNothingValue Gets or sets a value indicating whether [on delete do nothing]. protected bool OnDeleteDoNothingValue { get; set; } Property Value bool true if [on delete do nothing]; otherwise, false. ParentMapping Gets the parent mapping. public IMapping ParentMapping { get; } Property Value IMapping The parent mapping. PropertyType Gets the type of the property. public Type PropertyType { get; } Property Value Type The type of the property. TypeName Gets the name of the type. public string TypeName { get; } Property Value string The name of the type. Methods CascadeChanges() Cascades changes to the mapped instance. public TReturnType CascadeChanges() Returns TReturnType This Convert<TResult>(IMapping) Converts this instance to the class specified public abstract IManyToOneProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters mapping IMapping The mapping. Returns IManyToOneProperty The resulting property Type Parameters TResult The type of the result. Equals(object) Determines if the two objects are equal and returns true if they are, false otherwise public override bool Equals(object obj) Parameters obj object Object to compare to Returns bool True if they are equal, false otherwise GetColumnInfo() Gets the column information. public IQueryColumnInfo[] GetColumnInfo() Returns IQueryColumnInfo[] The column information. GetHashCode() Returns the hash code for the property public override int GetHashCode() Returns int The hash code for the property GetValue(object) Gets the property's value from the object sent in public object? GetValue(object Object) Parameters Object object Object to get the value from Returns object The value of the property LoadUsing(string, CommandType) Loads the property using the query specified. public TReturnType LoadUsing(string queryText, CommandType type) Parameters queryText string The query text. type CommandType The type. Returns TReturnType This OnDeleteDoNothing() Called when you want to override the default referential integrity and do nothing on delete. public TReturnType OnDeleteDoNothing() Returns TReturnType This SetColumnInfo(IMappingSource) Sets the column information. public abstract void SetColumnInfo(IMappingSource mappings) Parameters mappings IMappingSource The mappings. SetColumnName(string) Sets the name of the column. public TReturnType SetColumnName(string columnName) Parameters columnName string Name of the column. Returns TReturnType This Setup(IMappingSource, ISource) Sets up the property (used internally) public abstract void Setup(IMappingSource mappings, ISource sourceSpec) Parameters mappings IMappingSource The mappings. sourceSpec ISource The source spec. Similar(IManyToOneProperty) Checks if the properties are similar to one another public bool Similar(IManyToOneProperty secondProperty) Parameters secondProperty IManyToOneProperty The second property. Returns bool True if they are similar, false otherwise ToString() Gets the property as a string public override string ToString() Returns string The string representation of the property Operators operator ==(ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType>, ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType>) The == operator public static bool operator ==(ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> first, ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> second) Parameters first ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> First item second ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> Second item Returns bool true if the first and second item are the same, false otherwise operator >(ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType>, ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType>) The > operator public static bool operator >(ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> first, ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> second) Parameters first ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> First item second ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> Second item Returns bool True if the first item is greater than the second, false otherwise operator !=(ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType>, ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType>) != operator public static bool operator !=(ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> first, ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> second) Parameters first ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> First item second ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> Second item Returns bool returns true if they are not equal, false otherwise operator <(ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType>, ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType>) The < operator public static bool operator <(ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> first, ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> second) Parameters first ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> First item second ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> Second item Returns bool True if the first item is less than the second, false otherwise See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType>"
  },
  "api/Inflatable.ClassMapper.BaseClasses.PropertyBase-3.html": {
    "href": "api/Inflatable.ClassMapper.BaseClasses.PropertyBase-3.html",
    "title": "Class PropertyBase<ClassType, DataType, ReturnType> | Inflatable API Reference",
    "keywords": "Class PropertyBase<ClassType, DataType, ReturnType> Namespace Inflatable.ClassMapper.BaseClasses Assembly Inflatable.dll Property base class public abstract class PropertyBase<ClassType, DataType, ReturnType> : IProperty<ClassType, DataType, ReturnType>, IFluentInterface, IProperty<ClassType, DataType>, IProperty, IPropertyColumns where ClassType : class where ReturnType : IProperty<ClassType, DataType, ReturnType> Type Parameters ClassType The type of the class type. DataType The type of the data type. ReturnType The type of the return type. Inheritance object PropertyBase<ClassType, DataType, ReturnType> Implements IProperty<ClassType, DataType, ReturnType> IFluentInterface IProperty<ClassType, DataType> IProperty IPropertyColumns Derived Reference<ClassType, DataType> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PropertyBase(Expression<Func<ClassType, DataType>>, IMapping) Constructor protected PropertyBase(Expression<Func<ClassType, DataType>> expression, IMapping mapping) Parameters expression Expression<Func<ClassType, DataType>> Expression used to point to the property mapping IMapping Mapping the StringID is added to Properties ColumnName Gets the name of the column. public string ColumnName { get; } Property Value string The name of the column. Columns Gets the columns associated with this property. public IQueryColumnInfo[]? Columns { get; protected set; } Property Value IQueryColumnInfo[] The columns associated with this property. CompiledExpression Compiled version of the expression public Func<ClassType, DataType> CompiledExpression { get; } Property Value Func<ClassType, DataType> ComputedColumnSpecification Gets the computed column specification. public string ComputedColumnSpecification { get; } Property Value string The computed column specification. Constraints Gets the constraints if the data source supports them. public IList<string> Constraints { get; } Property Value IList<string> The constraints if the data source supports them. DefaultValue Default value for this property public Func<DataType> DefaultValue { get; } Property Value Func<DataType> Expression Expression pointing to the property public Expression<Func<ClassType, DataType>> Expression { get; } Property Value Expression<Func<ClassType, DataType>> Index Gets a value indicating whether this IProperty is indexed. public bool Index { get; } Property Value bool true if index; otherwise, false. InternalFieldName Gets the name of the internal field. public string InternalFieldName { get; } Property Value string The name of the internal field. MaxLength Gets the maximum length. public int MaxLength { get; } Property Value int The maximum length. Name Gets the name. public string Name { get; } Property Value string The name. Nullable Gets a value indicating whether this IProperty is nullable. public bool Nullable { get; } Property Value bool true if nullable; otherwise, false. ParentMapping Gets the parent mapping. public IMapping ParentMapping { get; } Property Value IMapping The parent mapping. PropertyType Gets the type of the property. public Type PropertyType { get; } Property Value Type The type of the property. ReadOnly Gets a value indicating whether [read only]. public bool ReadOnly { get; } Property Value bool true if [read only]; otherwise, false. SetAction Gets or sets the expression used to set the value. protected Action<ClassType, DataType> SetAction { get; set; } Property Value Action<ClassType, DataType> The set expression. TypeName Gets the name of the type. public string TypeName { get; } Property Value string The name of the type. Unique Gets a value indicating whether this IProperty is unique. public bool Unique { get; } Property Value bool true if unique; otherwise, false. Methods AddToTable(ITable) Adds to table. public void AddToTable(ITable table) Parameters table ITable The table. Convert<TResult>(IMapping) Converts this instance to the class specified public abstract IProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters mapping IMapping The mapping. Returns IProperty The resulting property Type Parameters TResult The type of the result. Equals(object) Determines if the two objects are equal and returns true if they are, false otherwise public override bool Equals(object obj) Parameters obj object Object to compare to Returns bool True if they are equal, false otherwise GetColumnInfo() Gets the column information. public IQueryColumnInfo[] GetColumnInfo() Returns IQueryColumnInfo[] The column information. GetHashCode() Returns the hash code for the property public override int GetHashCode() Returns int The hash code for the property IsIndexed() Determines whether this instance is indexed. public ReturnType IsIndexed() Returns ReturnType this IsReadOnly() Determines whether [is read only]. public ReturnType IsReadOnly() Returns ReturnType this IsUnique() Determines whether this instance is unique. public ReturnType IsUnique() Returns ReturnType this SetColumnInfo(IMappingSource?) Sets the column information. public abstract void SetColumnInfo(IMappingSource? mappings) Parameters mappings IMappingSource The mappings. Setup() Sets up the property (used internally) public abstract void Setup() Similar(IProperty) Checks if the properties are similar to one another public bool Similar(IProperty secondProperty) Parameters secondProperty IProperty The second property. Returns bool True if they are similar, false otherwise ToString() Gets the property as a string public override string ToString() Returns string The string representation of the property WithColumnName(string) Sets the name of the field in the database. public ReturnType WithColumnName(string columnName) Parameters columnName string Name of the field. Returns ReturnType this WithComputedColumnSpecification(string) Sets the computed column specification if the source allows it. public ReturnType WithComputedColumnSpecification(string computedColumnSpecification) Parameters computedColumnSpecification string The computed column specification. Returns ReturnType this WithConstraint(string) Sets a constraint on the field if the source allows it. public ReturnType WithConstraint(string constraint) Parameters constraint string The constraint. Returns ReturnType this WithDefaultValue(Func<DataType>) Sets the default value of the property. public ReturnType WithDefaultValue(Func<DataType> value) Parameters value Func<DataType> The value. Returns ReturnType this WithMaxLength() Sets the length for the property to MAX. public ReturnType WithMaxLength() Returns ReturnType this. WithMaxLength(int) Sets the max length. public ReturnType WithMaxLength(int maxLength) Parameters maxLength int The maximum length. Returns ReturnType This Operators operator ==(PropertyBase<ClassType, DataType, ReturnType>, PropertyBase<ClassType, DataType, ReturnType>) The == operator public static bool operator ==(PropertyBase<ClassType, DataType, ReturnType> first, PropertyBase<ClassType, DataType, ReturnType> second) Parameters first PropertyBase<ClassType, DataType, ReturnType> First item second PropertyBase<ClassType, DataType, ReturnType> Second item Returns bool true if the first and second item are the same, false otherwise operator >(PropertyBase<ClassType, DataType, ReturnType>, PropertyBase<ClassType, DataType, ReturnType>) The > operator public static bool operator >(PropertyBase<ClassType, DataType, ReturnType> first, PropertyBase<ClassType, DataType, ReturnType> second) Parameters first PropertyBase<ClassType, DataType, ReturnType> First item second PropertyBase<ClassType, DataType, ReturnType> Second item Returns bool True if the first item is greater than the second, false otherwise operator !=(PropertyBase<ClassType, DataType, ReturnType>, PropertyBase<ClassType, DataType, ReturnType>) != operator public static bool operator !=(PropertyBase<ClassType, DataType, ReturnType> first, PropertyBase<ClassType, DataType, ReturnType> second) Parameters first PropertyBase<ClassType, DataType, ReturnType> First item second PropertyBase<ClassType, DataType, ReturnType> Second item Returns bool returns true if they are not equal, false otherwise operator <(PropertyBase<ClassType, DataType, ReturnType>, PropertyBase<ClassType, DataType, ReturnType>) The < operator public static bool operator <(PropertyBase<ClassType, DataType, ReturnType> first, PropertyBase<ClassType, DataType, ReturnType> second) Parameters first PropertyBase<ClassType, DataType, ReturnType> First item second PropertyBase<ClassType, DataType, ReturnType> Second item Returns bool True if the first item is less than the second, false otherwise See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType>"
  },
  "api/Inflatable.ClassMapper.BaseClasses.SingleClassPropertyBase-3.html": {
    "href": "api/Inflatable.ClassMapper.BaseClasses.SingleClassPropertyBase-3.html",
    "title": "Class SingleClassPropertyBase<TClassType, TDataType, TReturnType> | Inflatable API Reference",
    "keywords": "Class SingleClassPropertyBase<TClassType, TDataType, TReturnType> Namespace Inflatable.ClassMapper.BaseClasses Assembly Inflatable.dll Property base class public abstract class SingleClassPropertyBase<TClassType, TDataType, TReturnType> : IMapProperty<TClassType, TDataType, TReturnType>, IFluentInterface, IMapProperty<TClassType, TDataType>, IMapProperty, IClassProperty, IPropertyColumns where TClassType : class where TDataType : class where TReturnType : IMapProperty<TClassType, TDataType, TReturnType> Type Parameters TClassType The type of the class type. TDataType The type of the data type. TReturnType The type of the return type. Inheritance object SingleClassPropertyBase<TClassType, TDataType, TReturnType> Implements IMapProperty<TClassType, TDataType, TReturnType> IFluentInterface IMapProperty<TClassType, TDataType> IMapProperty IClassProperty IPropertyColumns Derived Map<TClassType, TDataType> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SingleClassPropertyBase(Expression<Func<TClassType, TDataType?>>, IMapping) Constructor protected SingleClassPropertyBase(Expression<Func<TClassType, TDataType?>> expression, IMapping mapping) Parameters expression Expression<Func<TClassType, TDataType>> Expression used to point to the property mapping IMapping Mapping the StringID is added to Properties Cascade Gets a value indicating whether this is cascade. public bool Cascade { get; protected set; } Property Value bool true if cascade; otherwise, false. ColumnName Gets the name of the column. public string ColumnName { get; protected set; } Property Value string The name of the column. Columns Gets the columns associated with this property. public IQueryColumnInfo[]? Columns { get; protected set; } Property Value IQueryColumnInfo[] The columns associated with this property. CompiledExpression Compiled version of the expression public Func<TClassType, TDataType?> CompiledExpression { get; protected set; } Property Value Func<TClassType, TDataType> The compiled expression. Expression Expression pointing to the property public Expression<Func<TClassType, TDataType?>> Expression { get; protected set; } Property Value Expression<Func<TClassType, TDataType>> The expression. ForeignMapping Gets the foreign mapping. public List<IMapping> ForeignMapping { get; protected set; } Property Value List<IMapping> The foreign mapping. InternalFieldName Gets the name of the internal field. public string InternalFieldName { get; protected set; } Property Value string The name of the internal field. LoadPropertyQuery Gets the load property query. public Query? LoadPropertyQuery { get; protected set; } Property Value Query The load property query. Name Gets the name. public string Name { get; protected set; } Property Value string The name. OnDeleteDoNothingValue Gets or sets a value indicating whether [on delete do nothing]. protected bool OnDeleteDoNothingValue { get; set; } Property Value bool true if [on delete do nothing]; otherwise, false. ParentMapping Gets the parent mapping. public IMapping ParentMapping { get; protected set; } Property Value IMapping The parent mapping. PropertyType Gets the type of the property. public Type PropertyType { get; } Property Value Type The type of the property. SetNullOnDelete Gets or sets a value indicating whether [set null on delete]. protected bool SetNullOnDelete { get; set; } Property Value bool true if [set null on delete]; otherwise, false. TypeName Gets the name of the type. public string TypeName { get; protected set; } Property Value string The name of the type. Unique Gets a value indicating whether this is unique. public bool Unique { get; protected set; } Property Value bool true if unique; otherwise, false. Methods AddToTable(ITable) Adds to table. public void AddToTable(ITable table) Parameters table ITable The table. CascadeChanges() Cascades changes to the mapped instance. public TReturnType CascadeChanges() Returns TReturnType This Convert<TResult>(IMapping) Converts this instance to the class specified public abstract IMapProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters mapping IMapping The mapping. Returns IMapProperty The resulting property Type Parameters TResult The type of the result. Equals(object) Determines if the two objects are equal and returns true if they are, false otherwise public override bool Equals(object obj) Parameters obj object Object to compare to Returns bool True if they are equal, false otherwise GetColumnInfo() Gets the column information. public IQueryColumnInfo[] GetColumnInfo() Returns IQueryColumnInfo[] The column information. GetHashCode() Returns the hash code for the property public override int GetHashCode() Returns int The hash code for the property GetValue(object) Gets the property's value from the object sent in public object? GetValue(object Object) Parameters Object object Object to get the value from Returns object The value of the property IsUnique() Determines whether this instance is unique. public TReturnType IsUnique() Returns TReturnType this LoadUsing(string, CommandType) Loads the property using the query specified. public TReturnType LoadUsing(string queryText, CommandType type) Parameters queryText string The query text. type CommandType The type. Returns TReturnType This OnDeleteDoNothing() Called when you want to override the default referential integrity and do nothing on delete. public TReturnType OnDeleteDoNothing() Returns TReturnType This SetColumnInfo(IMappingSource) Sets the column information. public abstract void SetColumnInfo(IMappingSource mappings) Parameters mappings IMappingSource The mappings. Setup(IMappingSource) Sets up the property (used internally) public abstract void Setup(IMappingSource mappings) Parameters mappings IMappingSource The mappings. Similar(IMapProperty) Checks if the properties are similar to one another public bool Similar(IMapProperty secondProperty) Parameters secondProperty IMapProperty The second property. Returns bool True if they are similar, false otherwise ToString() Gets the property as a string public override string ToString() Returns string The string representation of the property WithColumnName(string) Sets the name of the column. public TReturnType WithColumnName(string columnName) Parameters columnName string Name of the column. Returns TReturnType This Operators operator ==(SingleClassPropertyBase<TClassType, TDataType, TReturnType>, SingleClassPropertyBase<TClassType, TDataType, TReturnType>) The == operator public static bool operator ==(SingleClassPropertyBase<TClassType, TDataType, TReturnType> first, SingleClassPropertyBase<TClassType, TDataType, TReturnType> second) Parameters first SingleClassPropertyBase<TClassType, TDataType, TReturnType> First item second SingleClassPropertyBase<TClassType, TDataType, TReturnType> Second item Returns bool true if the first and second item are the same, false otherwise operator >(SingleClassPropertyBase<TClassType, TDataType, TReturnType>, SingleClassPropertyBase<TClassType, TDataType, TReturnType>) The > operator public static bool operator >(SingleClassPropertyBase<TClassType, TDataType, TReturnType> first, SingleClassPropertyBase<TClassType, TDataType, TReturnType> second) Parameters first SingleClassPropertyBase<TClassType, TDataType, TReturnType> First item second SingleClassPropertyBase<TClassType, TDataType, TReturnType> Second item Returns bool True if the first item is greater than the second, false otherwise operator !=(SingleClassPropertyBase<TClassType, TDataType, TReturnType>, SingleClassPropertyBase<TClassType, TDataType, TReturnType>) != operator public static bool operator !=(SingleClassPropertyBase<TClassType, TDataType, TReturnType> first, SingleClassPropertyBase<TClassType, TDataType, TReturnType> second) Parameters first SingleClassPropertyBase<TClassType, TDataType, TReturnType> First item second SingleClassPropertyBase<TClassType, TDataType, TReturnType> Second item Returns bool returns true if they are not equal, false otherwise operator <(SingleClassPropertyBase<TClassType, TDataType, TReturnType>, SingleClassPropertyBase<TClassType, TDataType, TReturnType>) The < operator public static bool operator <(SingleClassPropertyBase<TClassType, TDataType, TReturnType> first, SingleClassPropertyBase<TClassType, TDataType, TReturnType> second) Parameters first SingleClassPropertyBase<TClassType, TDataType, TReturnType> First item second SingleClassPropertyBase<TClassType, TDataType, TReturnType> Second item Returns bool True if the first item is less than the second, false otherwise See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType>"
  },
  "api/Inflatable.ClassMapper.BaseClasses.html": {
    "href": "api/Inflatable.ClassMapper.BaseClasses.html",
    "title": "Namespace Inflatable.ClassMapper.BaseClasses | Inflatable API Reference",
    "keywords": "Namespace Inflatable.ClassMapper.BaseClasses Classes IDPropertyBase<TClassType, TDataType, TReturnType> ID property base class ManyClassPropertyBase<TClassType, TDataType, TReturnType> Many class property base. ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> Many to one single property base ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> Many to one single property base PropertyBase<ClassType, DataType, ReturnType> Property base class SingleClassPropertyBase<TClassType, TDataType, TReturnType> Property base class"
  },
  "api/Inflatable.ClassMapper.Column.ComplexColumnInfo-2.html": {
    "href": "api/Inflatable.ClassMapper.Column.ComplexColumnInfo-2.html",
    "title": "Class ComplexColumnInfo<TClassType, TDataType> | Inflatable API Reference",
    "keywords": "Class ComplexColumnInfo<TClassType, TDataType> Namespace Inflatable.ClassMapper.Column Assembly Inflatable.dll Column information public class ComplexColumnInfo<TClassType, TDataType> : IQueryColumnInfo where TClassType : class where TDataType : class Type Parameters TClassType The type of the class type. TDataType The type of the data type. Inheritance object ComplexColumnInfo<TClassType, TDataType> Implements IQueryColumnInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ComplexColumnInfo(IQueryColumnInfo, string, Func<TClassType, TDataType?>, bool, string, string) Initializes a new instance of the ComplexColumnInfo<TClassType, TDataType> class. public ComplexColumnInfo(IQueryColumnInfo child, string columnName, Func<TClassType, TDataType?> compiledExpression, bool isForeign, string schemaName, string tableName) Parameters child IQueryColumnInfo The child. columnName string Name of the column. compiledExpression Func<TClassType, TDataType> The compiled expression. isForeign bool if set to true [is foreign]. schemaName string Name of the schema. tableName string Name of the table. Properties Child Gets or sets the child. public IQueryColumnInfo Child { get; set; } Property Value IQueryColumnInfo The child. ColumnName Gets the name of the column. public string ColumnName { get; set; } Property Value string The name of the column. CompiledExpression The compiled expression public Func<TClassType, TDataType?> CompiledExpression { get; set; } Property Value Func<TClassType, TDataType> The compiled expression. IsForeign Gets or sets a value indicating whether this instance is foreign. public bool IsForeign { get; set; } Property Value bool true if this instance is foreign; otherwise, false. PropertyName Gets the name. public string PropertyName { get; } Property Value string The name. PropertyType Property type public Type PropertyType { get; } Property Value Type The type of the property. SchemaName Gets the schema name. public string SchemaName { get; set; } Property Value string The schema name. TableName Gets the table name. public string TableName { get; set; } Property Value string The table name. Methods CreateCopy() Creates a copy. public IQueryColumnInfo CreateCopy() Returns IQueryColumnInfo The resulting copy. GetAsParameter(Dynamo?) Gets the property as an IParameter (for classes, this will return the ID of the property) public IParameter? GetAsParameter(Dynamo? objectValue) Parameters objectValue Dynamo Returns IParameter The parameter version of the property GetAsParameter(object?) Gets the property as an IParameter (for classes, this will return the ID of the property) public IParameter? GetAsParameter(object? objectValue) Parameters objectValue object Returns IParameter The parameter version of the property GetAsParameter(object?, object?) Gets as parameter. public IParameter? GetAsParameter(object? objectValue, object? paramValue) Parameters objectValue object The object value. paramValue object The parameter value. Returns IParameter The object value as a parameter. GetValue(Dynamo?) Gets the value of the item public object? GetValue(Dynamo? @object) Parameters object Dynamo Object Returns object The value specified GetValue(object?) Gets the value of the item public object? GetValue(object? @object) Parameters object object Object Returns object The value specified GetValue(object?, object?) Gets the value. public object? GetValue(object? @object, object? paramValue) Parameters object object The object. paramValue object The parameter value. Returns object The resulting value. IsDefault(object?) Is this a default value? public bool IsDefault(object? @object) Parameters object object Object Returns bool True if it is, false otherwise. IsDefault(object, object?) Determines whether the specified object is default. public bool IsDefault(object @object, object? paramValue) Parameters object object The object. paramValue object The parameter value. Returns bool true if the specified object is default; otherwise, false. SetValue(object, object) Sets the property's value for the object sent in. public void SetValue(object objectToSet, object propertyValue) Parameters objectToSet object The object to set. propertyValue object The property value. SetValue(object, object, object) Sets the value. public void SetValue(object objectToSet, object paramValue, object propertyValue) Parameters objectToSet object The object to set. paramValue object The parameter value. propertyValue object The property value. See Also IQueryColumnInfo"
  },
  "api/Inflatable.ClassMapper.Column.ComplexListColumnInfo-2.html": {
    "href": "api/Inflatable.ClassMapper.Column.ComplexListColumnInfo-2.html",
    "title": "Class ComplexListColumnInfo<TClassType, TDataType> | Inflatable API Reference",
    "keywords": "Class ComplexListColumnInfo<TClassType, TDataType> Namespace Inflatable.ClassMapper.Column Assembly Inflatable.dll Column information public class ComplexListColumnInfo<TClassType, TDataType> : IQueryColumnInfo where TClassType : class where TDataType : class Type Parameters TClassType The type of the class type. TDataType The type of the data type. Inheritance object ComplexListColumnInfo<TClassType, TDataType> Implements IQueryColumnInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ComplexListColumnInfo(IQueryColumnInfo, string, Func<TClassType, IList<TDataType>>, bool, string, string) Initializes a new instance of the ComplexListColumnInfo<TClassType, TDataType> class. public ComplexListColumnInfo(IQueryColumnInfo child, string columnName, Func<TClassType, IList<TDataType>> compiledExpression, bool isForeign, string schemaName, string tableName) Parameters child IQueryColumnInfo The child. columnName string Name of the column. compiledExpression Func<TClassType, IList<TDataType>> The compiled expression. isForeign bool if set to true [is foreign]. schemaName string Name of the schema. tableName string Name of the table. Properties Child Gets or sets the child. public IQueryColumnInfo Child { get; set; } Property Value IQueryColumnInfo The child. ColumnName Gets the name of the column. public string ColumnName { get; set; } Property Value string The name of the column. CompiledExpression The compiled expression public Func<TClassType, IList<TDataType>> CompiledExpression { get; set; } Property Value Func<TClassType, IList<TDataType>> The compiled expression. IsForeign Gets or sets a value indicating whether this instance is foreign. public bool IsForeign { get; set; } Property Value bool true if this instance is foreign; otherwise, false. PropertyName Gets the name. public string PropertyName { get; } Property Value string The name. PropertyType Property type public Type PropertyType { get; } Property Value Type The type of the property. SchemaName Gets the schema name. public string SchemaName { get; set; } Property Value string The schema name. TableName Gets the table name. public string TableName { get; set; } Property Value string The table name. Methods CreateCopy() Creates a copy. public IQueryColumnInfo CreateCopy() Returns IQueryColumnInfo The resulting copy. GetAsParameter(Dynamo?) Gets as parameter. public IParameter? GetAsParameter(Dynamo? objectValue) Parameters objectValue Dynamo The object value. Returns IParameter The object value as a parameter. GetAsParameter(object?) Gets the property as an IParameter (for classes, this will return the ID of the property) public IParameter? GetAsParameter(object? objectValue) Parameters objectValue object Returns IParameter The parameter version of the property GetAsParameter(object?, object?) Gets as parameter. public IParameter? GetAsParameter(object? objectValue, object? paramValue) Parameters objectValue object The object value. paramValue object The parameter value. Returns IParameter The object value as a parameter. GetValue(Dynamo?) Gets the value of the item public object? GetValue(Dynamo? @object) Parameters object Dynamo Object Returns object The value specified GetValue(object?) Gets the value of the item public object? GetValue(object? @object) Parameters object object Object Returns object The value specified GetValue(object?, object?) Gets the value. public object? GetValue(object? @object, object? paramValue) Parameters object object The object. paramValue object The parameter value. Returns object The resulting value. IsDefault(object?) Is this a default value? public bool IsDefault(object? @object) Parameters object object Object Returns bool True if it is, false otherwise. IsDefault(object?, object?) Determines whether the specified object is default. public bool IsDefault(object? @object, object? paramValue) Parameters object object The object. paramValue object The parameter value. Returns bool true if the specified object is default; otherwise, false. SetValue(object?, object?) Sets the property's value for the object sent in. public void SetValue(object? objectToSet, object? propertyValue) Parameters objectToSet object The object to set. propertyValue object The property value. SetValue(object, object?, object?) Sets the value. public void SetValue(object objectToSet, object? paramValue, object? propertyValue) Parameters objectToSet object The object to set. paramValue object The parameter value. propertyValue object The property value. See Also IQueryColumnInfo"
  },
  "api/Inflatable.ClassMapper.Column.Interfaces.IQueryColumnInfo.html": {
    "href": "api/Inflatable.ClassMapper.Column.Interfaces.IQueryColumnInfo.html",
    "title": "Interface IQueryColumnInfo | Inflatable API Reference",
    "keywords": "Interface IQueryColumnInfo Namespace Inflatable.ClassMapper.Column.Interfaces Assembly Inflatable.dll IQuery column info public interface IQueryColumnInfo Properties ColumnName Gets or sets the name of the column. string ColumnName { get; set; } Property Value string The name of the column. IsForeign Gets or sets a value indicating whether this instance is foreign. bool IsForeign { get; set; } Property Value bool true if this instance is foreign; otherwise, false. PropertyName Gets or sets the name of the property. string PropertyName { get; } Property Value string The name of the property. PropertyType Gets or sets the type of the property. Type PropertyType { get; } Property Value Type The type of the property. SchemaName Gets or sets the name of the schema. string SchemaName { get; set; } Property Value string The name of the schema. TableName Gets or sets the name of the table. string TableName { get; set; } Property Value string The name of the table. Methods CreateCopy() Creates a copy. IQueryColumnInfo CreateCopy() Returns IQueryColumnInfo The resulting copy. GetAsParameter(Dynamo?) Gets as parameter. IParameter? GetAsParameter(Dynamo? objectValue) Parameters objectValue Dynamo The object value. Returns IParameter The object value as a parameter. GetAsParameter(object?) Gets as parameter. IParameter? GetAsParameter(object? objectValue) Parameters objectValue object The object value. Returns IParameter The object value as a parameter. GetAsParameter(object?, object?) Gets as parameter. IParameter? GetAsParameter(object? objectValue, object? paramValue) Parameters objectValue object The object value. paramValue object The parameter value. Returns IParameter The object value as a parameter. GetValue(Dynamo?) Gets the value. object? GetValue(Dynamo? @object) Parameters object Dynamo The object. Returns object GetValue(object?) Gets the value. object? GetValue(object? @object) Parameters object object The object. Returns object The resulting value. GetValue(object?, object?) Gets the value. object? GetValue(object? @object, object? paramValue) Parameters object object The object. paramValue object The parameter value. Returns object The resulting value. IsDefault(object?) Determines whether the specified object is default. bool IsDefault(object? @object) Parameters object object The object. Returns bool true if the specified object is default; otherwise, false. IsDefault(object, object) Determines whether the specified object is default. bool IsDefault(object @object, object paramValue) Parameters object object The object. paramValue object The parameter value. Returns bool true if the specified object is default; otherwise, false. SetValue(object?, object?) Sets the value. void SetValue(object? objectToSet, object? propertyValue) Parameters objectToSet object The object to set. propertyValue object The property value. SetValue(object, object?, object) Sets the value. void SetValue(object objectToSet, object? paramValue, object propertyValue) Parameters objectToSet object The object to set. paramValue object The parameter value. propertyValue object The property value."
  },
  "api/Inflatable.ClassMapper.Column.Interfaces.html": {
    "href": "api/Inflatable.ClassMapper.Column.Interfaces.html",
    "title": "Namespace Inflatable.ClassMapper.Column.Interfaces | Inflatable API Reference",
    "keywords": "Namespace Inflatable.ClassMapper.Column.Interfaces Interfaces IQueryColumnInfo IQuery column info"
  },
  "api/Inflatable.ClassMapper.Column.SimpleColumnInfo-2.html": {
    "href": "api/Inflatable.ClassMapper.Column.SimpleColumnInfo-2.html",
    "title": "Class SimpleColumnInfo<TClassType, TDataType> | Inflatable API Reference",
    "keywords": "Class SimpleColumnInfo<TClassType, TDataType> Namespace Inflatable.ClassMapper.Column Assembly Inflatable.dll Column information public class SimpleColumnInfo<TClassType, TDataType> : IQueryColumnInfo where TClassType : class Type Parameters TClassType The type of the class type. TDataType The type of the data type. Inheritance object SimpleColumnInfo<TClassType, TDataType> Implements IQueryColumnInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SimpleColumnInfo(string, Func<TClassType, TDataType>, Func<TDataType>, bool, bool, string, Type, string, Action<TClassType, TDataType>, string) Initializes a new instance of the SimpleColumnInfo<TClassType, TDataType> class. public SimpleColumnInfo(string columnName, Func<TClassType, TDataType> compiledExpression, Func<TDataType> defaultValue, bool isForeign, bool isNullable, string propertyName, Type propertyType, string schemaName, Action<TClassType, TDataType> setAction, string tableName) Parameters columnName string Name of the column. compiledExpression Func<TClassType, TDataType> The compiled expression. defaultValue Func<TDataType> The default value. isForeign bool if set to true [is foreign]. isNullable bool if set to true [is nullable]. propertyName string Name of the property. propertyType Type Type of the property. schemaName string Name of the schema. setAction Action<TClassType, TDataType> The set action. tableName string Name of the table. Properties ColumnName Gets the name of the column. public string ColumnName { get; set; } Property Value string The name of the column. CompiledExpression The compiled expression public Func<TClassType, TDataType> CompiledExpression { get; set; } Property Value Func<TClassType, TDataType> DefaultValue Gets the default value. public Func<TDataType> DefaultValue { get; set; } Property Value Func<TDataType> IsForeign Gets or sets a value indicating whether this instance is foreign. public bool IsForeign { get; set; } Property Value bool true if this instance is foreign; otherwise, false. IsNullable Gets or sets a value indicating whether this instance is nullable. public bool IsNullable { get; set; } Property Value bool true if this instance is nullable; otherwise, false. PropertyName Gets the name. public string PropertyName { get; set; } Property Value string The name. PropertyType Property type public Type PropertyType { get; set; } Property Value Type SchemaName Gets the schema name. public string SchemaName { get; set; } Property Value string The schema name. SetAction Gets or sets the expression used to set the value. public Action<TClassType, TDataType> SetAction { get; set; } Property Value Action<TClassType, TDataType> The set expression. TableName Gets the table name. public string TableName { get; set; } Property Value string The table name. Methods CreateCopy() Creates a copy. public IQueryColumnInfo CreateCopy() Returns IQueryColumnInfo The resulting copy. GetAsParameter(Dynamo?) Gets as parameter. public IParameter? GetAsParameter(Dynamo? objectValue) Parameters objectValue Dynamo The object value. Returns IParameter The value as a parameter GetAsParameter(object?) Gets the property as an IParameter (for classes, this will return the ID of the property) public IParameter? GetAsParameter(object? objectValue) Parameters objectValue object Returns IParameter The parameter version of the property GetAsParameter(object?, object?) Gets as parameter. public IParameter? GetAsParameter(object? objectValue, object? paramValue) Parameters objectValue object The object value. paramValue object The parameter value. Returns IParameter The object value as a parameter. GetValue(Dynamo?) Gets the value of the item public object? GetValue(Dynamo? @object) Parameters object Dynamo Object Returns object The value specified GetValue(object?) Gets the value of the item public object? GetValue(object? @object) Parameters object object Object Returns object The value specified GetValue(object?, object?) Gets the value. public object? GetValue(object? @object, object? paramValue) Parameters object object The object. paramValue object The parameter value. Returns object The resulting value. IsDefault(object) Is this a default value? public bool IsDefault(object @object) Parameters object object Object Returns bool True if it is, false otherwise. IsDefault(object, object) Determines whether the specified object is default. public bool IsDefault(object @object, object paramValue) Parameters object object The object. paramValue object The parameter value. Returns bool true if the specified object is default; otherwise, false. SetValue(object, object) Sets the property's value for the object sent in. public void SetValue(object objectToSet, object propertyValue) Parameters objectToSet object The object to set. propertyValue object The property value. SetValue(object, object, object) Sets the value. public void SetValue(object objectToSet, object paramValue, object propertyValue) Parameters objectToSet object The object to set. paramValue object The parameter value. propertyValue object The property value. See Also IQueryColumnInfo"
  },
  "api/Inflatable.ClassMapper.Column.html": {
    "href": "api/Inflatable.ClassMapper.Column.html",
    "title": "Namespace Inflatable.ClassMapper.Column | Inflatable API Reference",
    "keywords": "Namespace Inflatable.ClassMapper.Column Classes ComplexColumnInfo<TClassType, TDataType> Column information ComplexListColumnInfo<TClassType, TDataType> Column information SimpleColumnInfo<TClassType, TDataType> Column information"
  },
  "api/Inflatable.ClassMapper.Default.AutoID.html": {
    "href": "api/Inflatable.ClassMapper.Default.AutoID.html",
    "title": "Class AutoID | Inflatable API Reference",
    "keywords": "Class AutoID Namespace Inflatable.ClassMapper.Default Assembly Inflatable.dll Auto ID public class AutoID : IAutoIDProperty Inheritance object AutoID Implements IAutoIDProperty Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AutoID(string, IMapping) Initializes a new instance of the AutoID class. public AutoID(string columnName, IMapping parentMapping) Parameters columnName string Name of the column. parentMapping IMapping The parent mapping. Properties ColumnName Gets the name of the column. public string ColumnName { get; } Property Value string The name of the column. ParentMapping Gets the parent mapping. public IMapping ParentMapping { get; } Property Value IMapping The parent mapping. Methods AddToChildTable(ITable) Adds to child table. public void AddToChildTable(ITable table) Parameters table ITable The table. AddToTable(ITable) Adds this instance to the table. public void AddToTable(ITable table) Parameters table ITable The table. Setup() Sets up the property (used internally) public void Setup() ToString() Gets the property as a string public override string ToString() Returns string The string representation of the property See Also IAutoIDProperty"
  },
  "api/Inflatable.ClassMapper.Default.ID-2.html": {
    "href": "api/Inflatable.ClassMapper.Default.ID-2.html",
    "title": "Class ID<ClassType, DataType> | Inflatable API Reference",
    "keywords": "Class ID<ClassType, DataType> Namespace Inflatable.ClassMapper.Default Assembly Inflatable.dll ID property public class ID<ClassType, DataType> : IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>, IIDProperty<ClassType, DataType, ID<ClassType, DataType>>, IFluentInterface, IIDProperty<ClassType, DataType>, IIDProperty, IPropertyColumns where ClassType : class Type Parameters ClassType The type of the lass type. DataType The type of the ata type. Inheritance object IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>> ID<ClassType, DataType> Implements IIDProperty<ClassType, DataType, ID<ClassType, DataType>> IFluentInterface IIDProperty<ClassType, DataType> IIDProperty IPropertyColumns Inherited Members IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.AutoIncrement IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.ColumnName IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.Columns IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.CompiledExpression IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.ComputedColumnSpecification IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.Constraints IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.DefaultValue IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.Expression IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.Index IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.InternalFieldName IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.MaxLength IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.Name IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.Nullable IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.ParentMapping IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.PropertyType IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.ReadOnly IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.TypeName IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.Unique IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.SetAction IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.AddToChildTable(ITable) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.AddToTable(ITable) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.CompareTo(IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.CompareTo(object) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.Convert<TResult>(IMapping) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.Equals(object) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.GetColumnInfo() IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.GetHashCode() IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.IsAutoIncremented() IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.IsIndexed() IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.IsReadOnly() IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.IsUnique() IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.SetColumnInfo(IMappingSource) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.Setup() IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.ToString() IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.WithColumnName(string) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.WithComputedColumnSpecification(string) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.WithConstraint(string) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.WithDefaultValue(Func<DataType>) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.WithMaxLength(int) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.WithMaxLength() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ID(Expression<Func<ClassType, DataType>>, IMapping) Initializes a new instance of the ID<ClassType, DataType> class. public ID(Expression<Func<ClassType, DataType>> expression, IMapping mapping) Parameters expression Expression<Func<ClassType, DataType>> Expression used to point to the property mapping IMapping Mapping the StringID is added to Methods Convert<TResult>(IMapping) Converts this instance to the class specified public override IIDProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters mapping IMapping The mapping. Returns IIDProperty The resulting property Type Parameters TResult The type of the result. SetColumnInfo(IMappingSource?) Sets the column information. public override void SetColumnInfo(IMappingSource? mappings) Parameters mappings IMappingSource The mappings. Setup() Sets up the property (used internally) public override void Setup() See Also IIDProperty"
  },
  "api/Inflatable.ClassMapper.Default.ManyToMany-2.html": {
    "href": "api/Inflatable.ClassMapper.Default.ManyToMany-2.html",
    "title": "Class ManyToMany<TClassType, TDataType> | Inflatable API Reference",
    "keywords": "Class ManyToMany<TClassType, TDataType> Namespace Inflatable.ClassMapper.Default Assembly Inflatable.dll Many to many mapping type. public class ManyToMany<TClassType, TDataType> : ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>, IManyToManyProperty<TClassType, IList<TDataType>, ManyToMany<TClassType, TDataType>>, IFluentInterface, IManyToManyProperty<TClassType, IList<TDataType>>, IManyToManyProperty, IClassProperty, IPropertyColumns where TClassType : class where TDataType : class Type Parameters TClassType The class type. TDataType The data type. Inheritance object ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>> ManyToMany<TClassType, TDataType> Implements IManyToManyProperty<TClassType, IList<TDataType>, ManyToMany<TClassType, TDataType>> IFluentInterface IManyToManyProperty<TClassType, IList<TDataType>> IManyToManyProperty IClassProperty IPropertyColumns Inherited Members ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.Cascade ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.Columns ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.CompiledExpression ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.DatabaseJoinsCascade ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.Expression ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.ForeignMapping ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.InternalFieldName ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.LoadPropertyQuery ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.Name ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.ParentMapping ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.PropertyType ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.TableName ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.TypeName ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.OnDeleteDoNothingValue ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.CascadeChanges() ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.Convert<TResult>(IMapping) ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.Equals(object) ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.GetColumnInfo() ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.GetHashCode() ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.GetValue(object) ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.LoadUsing(string, CommandType) ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.OnDeleteDoNothing() ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.SetColumnInfo(IMappingSource) ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.SetTableName(string) ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.Setup(IMappingSource, ISource) ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.Similar(IManyToManyProperty) ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ManyToMany(Expression<Func<TClassType, IList<TDataType>>>, IMapping) Initializes a new instance of the ManyToMany<TClassType, TDataType> class. public ManyToMany(Expression<Func<TClassType, IList<TDataType>>> expression, IMapping mapping) Parameters expression Expression<Func<TClassType, IList<TDataType>>> Expression used to point to the property mapping IMapping Mapping the StringID is added to Methods Convert<TResult>(IMapping) Converts this instance to the class specified public override IManyToManyProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters mapping IMapping The mapping. Returns IManyToManyProperty The resulting property Type Parameters TResult The type of the result. SetColumnInfo(IMappingSource) Sets the column information. public override void SetColumnInfo(IMappingSource mappings) Parameters mappings IMappingSource The mappings. Setup(IMappingSource, ISource) Sets up the property (used internally) public override void Setup(IMappingSource mappings, ISource sourceSpec) Parameters mappings IMappingSource The mappings. sourceSpec ISource The source spec. Exceptions ArgumentException Foreign key IDs could not be found for {typeof(ClassType).Name}.{Name}"
  },
  "api/Inflatable.ClassMapper.Default.ManyToOneMany-2.html": {
    "href": "api/Inflatable.ClassMapper.Default.ManyToOneMany-2.html",
    "title": "Class ManyToOneMany<TClassType, TDataType> | Inflatable API Reference",
    "keywords": "Class ManyToOneMany<TClassType, TDataType> Namespace Inflatable.ClassMapper.Default Assembly Inflatable.dll Many to one Many side public class ManyToOneMany<TClassType, TDataType> : ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>, IManyToOneProperty<TClassType, IList<TDataType>, ManyToOneMany<TClassType, TDataType>>, IFluentInterface, IManyToOneProperty<TClassType, IList<TDataType>>, IManyToOneListProperty, IManyToOneProperty, IClassProperty, IPropertyColumns where TClassType : class where TDataType : class Type Parameters TClassType The type of the lass type. TDataType The type of the ata type. Inheritance object ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>> ManyToOneMany<TClassType, TDataType> Implements IManyToOneProperty<TClassType, IList<TDataType>, ManyToOneMany<TClassType, TDataType>> IFluentInterface IManyToOneProperty<TClassType, IList<TDataType>> IManyToOneListProperty IManyToOneProperty IClassProperty IPropertyColumns Inherited Members ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.Cascade ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.ColumnName ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.Columns ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.CompiledExpression ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.Expression ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.ForeignMapping ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.InternalFieldName ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.LoadPropertyQuery ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.Name ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.ParentMapping ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.PropertyType ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.TypeName ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.OnDeleteDoNothingValue ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.CascadeChanges() ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.Convert<TResult>(IMapping) ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.Equals(object) ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.GetColumnInfo() ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.GetHashCode() ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.GetValue(object) ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.LoadUsing(string, CommandType) ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.OnDeleteDoNothing() ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.SetColumnInfo(IMappingSource) ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.SetColumnName(string) ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.Setup(IMappingSource, ISource) ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.Similar(IManyToOneProperty) ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ManyToOneMany(Expression<Func<TClassType, IList<TDataType>>>, IMapping) Initializes a new instance of the ManyToOneMany<TClassType, TDataType> class. public ManyToOneMany(Expression<Func<TClassType, IList<TDataType>>> expression, IMapping mapping) Parameters expression Expression<Func<TClassType, IList<TDataType>>> Expression used to point to the property mapping IMapping Mapping the StringID is added to Methods Convert<TResult>(IMapping) Converts this instance to the class specified public override IManyToOneProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters mapping IMapping The mapping. Returns IManyToOneProperty The resulting property Type Parameters TResult The type of the result. SetColumnInfo(IMappingSource) Sets the column information. public override void SetColumnInfo(IMappingSource mappings) Parameters mappings IMappingSource The mappings. Setup(IMappingSource, ISource) Sets up the property (used internally) public override void Setup(IMappingSource mappings, ISource sourceSpec) Parameters mappings IMappingSource The mappings. sourceSpec ISource The source spec. Exceptions ArgumentException Foreign key IDs could not be found for {typeof(ClassType).Name}.{Name}"
  },
  "api/Inflatable.ClassMapper.Default.ManyToOneSingle-2.html": {
    "href": "api/Inflatable.ClassMapper.Default.ManyToOneSingle-2.html",
    "title": "Class ManyToOneSingle<TClassType, TDataType> | Inflatable API Reference",
    "keywords": "Class ManyToOneSingle<TClassType, TDataType> Namespace Inflatable.ClassMapper.Default Assembly Inflatable.dll Many to one single side public class ManyToOneSingle<TClassType, TDataType> : ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>, IManyToOneProperty<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>, IFluentInterface, IManyToOneProperty<TClassType, TDataType>, IManyToOneProperty, IClassProperty, IPropertyColumns where TClassType : class where TDataType : class Type Parameters TClassType The type of the lass type. TDataType The type of the ata type. Inheritance object ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>> ManyToOneSingle<TClassType, TDataType> Implements IManyToOneProperty<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>> IFluentInterface IManyToOneProperty<TClassType, TDataType> IManyToOneProperty IClassProperty IPropertyColumns Inherited Members ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.Cascade ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.ColumnName ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.Columns ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.CompiledExpression ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.Expression ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.ForeignMapping ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.InternalFieldName ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.LoadPropertyQuery ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.Name ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.ParentMapping ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.PropertyType ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.TypeName ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.OnDeleteDoNothingValue ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.CascadeChanges() ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.Convert<TResult>(IMapping) ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.Equals(object) ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.GetColumnInfo() ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.GetHashCode() ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.GetValue(object) ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.LoadUsing(string, CommandType) ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.OnDeleteDoNothing() ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.SetColumnInfo(IMappingSource) ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.SetColumnName(string) ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.Setup(IMappingSource, ISource) ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.Similar(IManyToOneProperty) ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ManyToOneSingle(Expression<Func<TClassType, TDataType?>>, IMapping) Initializes a new instance of the ManyToOneSingle<TClassType, TDataType> class. public ManyToOneSingle(Expression<Func<TClassType, TDataType?>> expression, IMapping mapping) Parameters expression Expression<Func<TClassType, TDataType>> Expression used to point to the property mapping IMapping Mapping the StringID is added to Methods Convert<TResult>(IMapping) Converts this instance to the class specified public override IManyToOneProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters mapping IMapping The mapping. Returns IManyToOneProperty The resulting property Type Parameters TResult The type of the result. SetColumnInfo(IMappingSource) Sets the column information. public override void SetColumnInfo(IMappingSource mappings) Parameters mappings IMappingSource The mappings. Setup(IMappingSource, ISource) Sets up the property (used internally) public override void Setup(IMappingSource mappings, ISource sourceSpec) Parameters mappings IMappingSource The mappings. sourceSpec ISource The source spec. Exceptions ArgumentException Foreign key IDs could not be found for {typeof(ClassType).Name}.{Name}"
  },
  "api/Inflatable.ClassMapper.Default.Map-2.html": {
    "href": "api/Inflatable.ClassMapper.Default.Map-2.html",
    "title": "Class Map<TClassType, TDataType> | Inflatable API Reference",
    "keywords": "Class Map<TClassType, TDataType> Namespace Inflatable.ClassMapper.Default Assembly Inflatable.dll Map property public class Map<TClassType, TDataType> : SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>, IMapProperty<TClassType, TDataType, Map<TClassType, TDataType>>, IFluentInterface, IMapProperty<TClassType, TDataType>, IMapProperty, IClassProperty, IPropertyColumns where TClassType : class where TDataType : class Type Parameters TClassType The type of the class type. TDataType The type of the data type. Inheritance object SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>> Map<TClassType, TDataType> Implements IMapProperty<TClassType, TDataType, Map<TClassType, TDataType>> IFluentInterface IMapProperty<TClassType, TDataType> IMapProperty IClassProperty IPropertyColumns Inherited Members SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.Cascade SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.ColumnName SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.Columns SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.CompiledExpression SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.Expression SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.ForeignMapping SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.InternalFieldName SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.LoadPropertyQuery SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.Name SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.ParentMapping SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.PropertyType SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.TypeName SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.Unique SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.OnDeleteDoNothingValue SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.SetNullOnDelete SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.AddToTable(ITable) SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.CascadeChanges() SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.Convert<TResult>(IMapping) SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.Equals(object) SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.GetColumnInfo() SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.GetHashCode() SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.GetValue(object) SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.IsUnique() SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.LoadUsing(string, CommandType) SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.OnDeleteDoNothing() SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.SetColumnInfo(IMappingSource) SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.Setup(IMappingSource) SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.Similar(IMapProperty) SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.ToString() SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.WithColumnName(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Map(Expression<Func<TClassType, TDataType?>>, IMapping) Initializes a new instance of the Map<TClassType, TDataType> class. public Map(Expression<Func<TClassType, TDataType?>> expression, IMapping mapping) Parameters expression Expression<Func<TClassType, TDataType>> Expression used to point to the property mapping IMapping Mapping the StringID is added to Methods Convert<TResult>(IMapping) Converts this instance to the class specified public override IMapProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters mapping IMapping The mapping. Returns IMapProperty The resulting property Type Parameters TResult The type of the result. SetColumnInfo(IMappingSource) Sets the column information. public override void SetColumnInfo(IMappingSource mappings) Parameters mappings IMappingSource The mappings. Setup(IMappingSource) Sets up the property (used internally) public override void Setup(IMappingSource mappings) Parameters mappings IMappingSource See Also IMapProperty"
  },
  "api/Inflatable.ClassMapper.Default.Reference-2.html": {
    "href": "api/Inflatable.ClassMapper.Default.Reference-2.html",
    "title": "Class Reference<ClassType, DataType> | Inflatable API Reference",
    "keywords": "Class Reference<ClassType, DataType> Namespace Inflatable.ClassMapper.Default Assembly Inflatable.dll Reference property public class Reference<ClassType, DataType> : PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>, IProperty<ClassType, DataType, Reference<ClassType, DataType>>, IFluentInterface, IProperty<ClassType, DataType>, IProperty, IPropertyColumns where ClassType : class Type Parameters ClassType The type of the lass type. DataType The type of the ata type. Inheritance object PropertyBase<ClassType, DataType, Reference<ClassType, DataType>> Reference<ClassType, DataType> Implements IProperty<ClassType, DataType, Reference<ClassType, DataType>> IFluentInterface IProperty<ClassType, DataType> IProperty IPropertyColumns Inherited Members PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.ColumnName PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Columns PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.CompiledExpression PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.ComputedColumnSpecification PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Constraints PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.DefaultValue PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Expression PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Index PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.InternalFieldName PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.MaxLength PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Name PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Nullable PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.ParentMapping PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.PropertyType PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.ReadOnly PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.TypeName PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Unique PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.SetAction PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.AddToTable(ITable) PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Convert<TResult>(IMapping) PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Equals(object) PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.GetColumnInfo() PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.GetHashCode() PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.IsIndexed() PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.IsReadOnly() PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.IsUnique() PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.SetColumnInfo(IMappingSource) PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Setup() PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Similar(IProperty) PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.ToString() PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.WithColumnName(string) PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.WithComputedColumnSpecification(string) PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.WithConstraint(string) PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.WithDefaultValue(Func<DataType>) PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.WithMaxLength(int) PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.WithMaxLength() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Reference(Expression<Func<ClassType, DataType>>, IMapping) Initializes a new instance of the Reference<ClassType, DataType> class. public Reference(Expression<Func<ClassType, DataType>> expression, IMapping mapping) Parameters expression Expression<Func<ClassType, DataType>> Expression used to point to the property mapping IMapping Mapping the StringID is added to Methods Convert<TResult>(IMapping) Converts this instance to the class specified public override IProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters mapping IMapping The mapping. Returns IProperty The resulting property Type Parameters TResult The type of the result. SetColumnInfo(IMappingSource?) Sets the column information. public override void SetColumnInfo(IMappingSource? mappings) Parameters mappings IMappingSource The mappings. Setup() Sets up the property (used internally) public override void Setup() See Also IProperty"
  },
  "api/Inflatable.ClassMapper.Default.html": {
    "href": "api/Inflatable.ClassMapper.Default.html",
    "title": "Namespace Inflatable.ClassMapper.Default | Inflatable API Reference",
    "keywords": "Namespace Inflatable.ClassMapper.Default Classes AutoID Auto ID ID<ClassType, DataType> ID property ManyToMany<TClassType, TDataType> Many to many mapping type. ManyToOneMany<TClassType, TDataType> Many to one Many side ManyToOneSingle<TClassType, TDataType> Many to one single side Map<TClassType, TDataType> Map property Reference<ClassType, DataType> Reference property"
  },
  "api/Inflatable.ClassMapper.IMappingSource.html": {
    "href": "api/Inflatable.ClassMapper.IMappingSource.html",
    "title": "Interface IMappingSource | Inflatable API Reference",
    "keywords": "Interface IMappingSource Namespace Inflatable.ClassMapper Assembly Inflatable.dll Mapping source interface public interface IMappingSource Properties ApplyAnalysis Gets a value indicating whether [apply analysis]. bool ApplyAnalysis { get; } Property Value bool true if [apply analysis]; otherwise, false. CanRead Gets a value indicating whether this instance can read. bool CanRead { get; } Property Value bool true if this instance can read; otherwise, false. CanWrite Gets a value indicating whether this instance can write. bool CanWrite { get; } Property Value bool true if this instance can write; otherwise, false. ChildTypes Gets the child types. ListMapping<Type, Type> ChildTypes { get; } Property Value ListMapping<Type, Type> The child types. ConcreteTypes Gets the concrete types. Type[] ConcreteTypes { get; } Property Value Type[] The concrete types. GenerateAnalysis Gets a value indicating whether [generate analysis]. bool GenerateAnalysis { get; } Property Value bool true if [generate analysis]; otherwise, false. GenerateSchema Gets a value indicating whether [generate schema]. bool GenerateSchema { get; } Property Value bool true if [generate schema]; otherwise, false. Logger Gets or sets the logger. ILogger Logger { get; } Property Value ILogger The logger. Mappings Gets the mappings. Dictionary<Type, IMapping> Mappings { get; } Property Value Dictionary<Type, IMapping> The mappings. Order Gets the order. int Order { get; } Property Value int The order. ParentTypes Gets the parent types. ListMapping<Type, Type> ParentTypes { get; } Property Value ListMapping<Type, Type> The parent types. QueryProvider Gets the query provider. QueryProviderManager QueryProvider { get; } Property Value QueryProviderManager The query provider. Source Gets the source. IDatabase Source { get; } Property Value IDatabase The source. TypeGraphs Gets the type graphs. Dictionary<Type, Tree<Type>?> TypeGraphs { get; } Property Value Dictionary<Type, Tree<Type>> The type graphs. UpdateSchema Gets a value indicating whether [update schema]. bool UpdateSchema { get; } Property Value bool true if [update schema]; otherwise, false. Methods Equals(object) Determines whether the specified object, is equal to this instance. bool Equals(object obj) Parameters obj object The object to compare with this instance. Returns bool true if the specified object is equal to this instance; otherwise, false. GetChildMappings(Type) Gets the child mappings. IEnumerable<IMapping> GetChildMappings(Type objectType) Parameters objectType Type Type of the object. Returns IEnumerable<IMapping> GetChildMappings<TObject>() Gets the child mappings. IEnumerable<IMapping> GetChildMappings<TObject>() Returns IEnumerable<IMapping> Type Parameters TObject The type of the object. GetHashCode() Returns a hash code for this instance. int GetHashCode() Returns int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. GetParentMapping(Type) Gets the parent mapping. IEnumerable<IMapping> GetParentMapping(Type objectType) Parameters objectType Type Type of the object. Returns IEnumerable<IMapping> GetParentMapping<TObject>() Gets the parent mapping. IEnumerable<IMapping> GetParentMapping<TObject>() Returns IEnumerable<IMapping> Type Parameters TObject The type of the object. ToString() Converts to string. string ToString() Returns string A string that represents this instance."
  },
  "api/Inflatable.ClassMapper.Interfaces.IAutoIDProperty.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IAutoIDProperty.html",
    "title": "Interface IAutoIDProperty | Inflatable API Reference",
    "keywords": "Interface IAutoIDProperty Namespace Inflatable.ClassMapper.Interfaces Assembly Inflatable.dll Auto ID property interface public interface IAutoIDProperty Properties ColumnName Gets the name of the column. string ColumnName { get; } Property Value string The name of the column. ParentMapping Gets the parent mapping. IMapping ParentMapping { get; } Property Value IMapping The parent mapping. Methods AddToChildTable(ITable) Adds to child table. void AddToChildTable(ITable table) Parameters table ITable The table. AddToTable(ITable) Adds this instance to the table. void AddToTable(ITable table) Parameters table ITable The table. Setup() Sets up the property (used internally) void Setup()"
  },
  "api/Inflatable.ClassMapper.Interfaces.IClassProperty.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IClassProperty.html",
    "title": "Interface IClassProperty | Inflatable API Reference",
    "keywords": "Interface IClassProperty Namespace Inflatable.ClassMapper.Interfaces Assembly Inflatable.dll Single class property data holder public interface IClassProperty : IPropertyColumns Inherited Members IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) Properties LoadPropertyQuery Gets the load property query. Query? LoadPropertyQuery { get; } Property Value Query The load property query. Name Gets the name. string Name { get; } Property Value string The name. ParentMapping Gets the parent mapping. IMapping ParentMapping { get; } Property Value IMapping The parent mapping."
  },
  "api/Inflatable.ClassMapper.Interfaces.IIDProperty-2.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IIDProperty-2.html",
    "title": "Interface IIDProperty<ClassType, DataType> | Inflatable API Reference",
    "keywords": "Interface IIDProperty<ClassType, DataType> Namespace Inflatable.ClassMapper.Interfaces Assembly Inflatable.dll Property interface public interface IIDProperty<ClassType, DataType> : IIDProperty, IPropertyColumns where ClassType : class Type Parameters ClassType Class type DataType Inherited Members IIDProperty.AutoIncrement IIDProperty.ColumnName IIDProperty.Constraints IIDProperty.Index IIDProperty.InternalFieldName IIDProperty.MaxLength IIDProperty.Name IIDProperty.Nullable IIDProperty.ParentMapping IIDProperty.PropertyType IIDProperty.TypeName IIDProperty.AddToChildTable(ITable) IIDProperty.AddToTable(ITable) IIDProperty.Convert<TResult>(IMapping) IIDProperty.Setup() IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) Properties CompiledExpression Compiled version of the expression Func<ClassType, DataType> CompiledExpression { get; } Property Value Func<ClassType, DataType> Expression Expression pointing to the property Expression<Func<ClassType, DataType>> Expression { get; } Property Value Expression<Func<ClassType, DataType>>"
  },
  "api/Inflatable.ClassMapper.Interfaces.IIDProperty-3.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IIDProperty-3.html",
    "title": "Interface IIDProperty<ClassType, DataType, ReturnType> | Inflatable API Reference",
    "keywords": "Interface IIDProperty<ClassType, DataType, ReturnType> Namespace Inflatable.ClassMapper.Interfaces Assembly Inflatable.dll Property interface public interface IIDProperty<ClassType, DataType, ReturnType> : IFluentInterface where ClassType : class where ReturnType : IIDProperty<ClassType, DataType, ReturnType> Type Parameters ClassType Class type DataType Data type ReturnType Return type Methods IsAutoIncremented() Determines whether this [is auto incremented]. ReturnType IsAutoIncremented() Returns ReturnType this WithColumnName(string) Sets the name of the field in the database. ReturnType WithColumnName(string columnName) Parameters columnName string Name of the field. Returns ReturnType this WithConstraint(string) Sets a constraint on the field if the source allows it. ReturnType WithConstraint(string constraint) Parameters constraint string The constraint. Returns ReturnType this WithMaxLength() Sets the length for the property to MAX. ReturnType WithMaxLength() Returns ReturnType this. WithMaxLength(int) Sets the max length for the property (or precision for items like decimal values) ReturnType WithMaxLength(int maxLength) Parameters maxLength int Max length Returns ReturnType this"
  },
  "api/Inflatable.ClassMapper.Interfaces.IIDProperty.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IIDProperty.html",
    "title": "Interface IIDProperty | Inflatable API Reference",
    "keywords": "Interface IIDProperty Namespace Inflatable.ClassMapper.Interfaces Assembly Inflatable.dll ID property interface public interface IIDProperty : IPropertyColumns Inherited Members IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) Properties AutoIncrement Gets a value indicating whether to [automatic increment]. bool AutoIncrement { get; } Property Value bool true if [automatic increment]; otherwise, false. ColumnName Gets the name of the column. string ColumnName { get; } Property Value string The name of the column. Constraints Gets the constraints if the data source supports them. IList<string> Constraints { get; } Property Value IList<string> The constraints if the data source supports them. Index Gets a value indicating whether this IIDProperty is index. bool Index { get; } Property Value bool true if index; otherwise, false. InternalFieldName Gets the name of the internal field. string InternalFieldName { get; } Property Value string The name of the internal field. MaxLength Gets the maximum length. int MaxLength { get; } Property Value int The maximum length. Name Gets the name. string Name { get; } Property Value string The name. Nullable Gets a value indicating whether this IIDProperty is nullable. bool Nullable { get; } Property Value bool true if nullable; otherwise, false. ParentMapping Gets the parent mapping. IMapping ParentMapping { get; } Property Value IMapping The parent mapping. PropertyType Gets the type of the property. Type PropertyType { get; } Property Value Type The type of the property. TypeName Gets the name of the type. string TypeName { get; } Property Value string The name of the type. Methods AddToChildTable(ITable) Adds to a child table. void AddToChildTable(ITable table) Parameters table ITable The table. AddToTable(ITable) Adds this instance to the table. void AddToTable(ITable table) Parameters table ITable The table. Convert<TResult>(IMapping) Converts this instance to the class specified IIDProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters mapping IMapping The mapping. Returns IIDProperty The resulting property Type Parameters TResult The type of the result. Setup() Sets up the property (used internally) void Setup()"
  },
  "api/Inflatable.ClassMapper.Interfaces.IManyToManyProperty-2.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IManyToManyProperty-2.html",
    "title": "Interface IManyToManyProperty<TClassType, TDataType> | Inflatable API Reference",
    "keywords": "Interface IManyToManyProperty<TClassType, TDataType> Namespace Inflatable.ClassMapper.Interfaces Assembly Inflatable.dll Many to many property public interface IManyToManyProperty<TClassType, TDataType> : IManyToManyProperty, IClassProperty, IPropertyColumns where TClassType : class where TDataType : class Type Parameters TClassType The class type. TDataType The data type. Inherited Members IManyToManyProperty.Cascade IManyToManyProperty.DatabaseJoinsCascade IManyToManyProperty.ForeignMapping IManyToManyProperty.InternalFieldName IManyToManyProperty.PropertyType IManyToManyProperty.TableName IManyToManyProperty.TypeName IManyToManyProperty.Convert<TResult>(IMapping) IManyToManyProperty.GetValue(object) IManyToManyProperty.Setup(IMappingSource, ISource) IManyToManyProperty.Similar(IManyToManyProperty) IClassProperty.LoadPropertyQuery IClassProperty.Name IClassProperty.ParentMapping IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) Properties CompiledExpression Compiled version of the expression Func<TClassType, TDataType> CompiledExpression { get; } Property Value Func<TClassType, TDataType> The compiled expression. Expression Expression pointing to the property Expression<Func<TClassType, TDataType>> Expression { get; } Property Value Expression<Func<TClassType, TDataType>> The expression. See Also IFluentInterface"
  },
  "api/Inflatable.ClassMapper.Interfaces.IManyToManyProperty-3.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IManyToManyProperty-3.html",
    "title": "Interface IManyToManyProperty<TClassType, TDataType, TReturnType> | Inflatable API Reference",
    "keywords": "Interface IManyToManyProperty<TClassType, TDataType, TReturnType> Namespace Inflatable.ClassMapper.Interfaces Assembly Inflatable.dll Many to many property interface public interface IManyToManyProperty<TClassType, TDataType, TReturnType> : IFluentInterface where TClassType : class where TDataType : class where TReturnType : IManyToManyProperty<TClassType, TDataType, TReturnType> Type Parameters TClassType The class type. TDataType The data type. TReturnType The return type. Methods CascadeChanges() Cascades changes to the mapped instance. TReturnType CascadeChanges() Returns TReturnType This LoadUsing(string, CommandType) Loads the property using the query specified. TReturnType LoadUsing(string queryText, CommandType type) Parameters queryText string The query text. type CommandType The type. Returns TReturnType This OnDeleteDoNothing() Called when you want to override the default referential integrity and do nothing on delete. TReturnType OnDeleteDoNothing() Returns TReturnType This SetTableName(string) Sets the table's name. TReturnType SetTableName(string tableName) Parameters tableName string Name of the table. Returns TReturnType This See Also IClassProperty IFluentInterface"
  },
  "api/Inflatable.ClassMapper.Interfaces.IManyToManyProperty.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IManyToManyProperty.html",
    "title": "Interface IManyToManyProperty | Inflatable API Reference",
    "keywords": "Interface IManyToManyProperty Namespace Inflatable.ClassMapper.Interfaces Assembly Inflatable.dll Many to many property public interface IManyToManyProperty : IClassProperty, IPropertyColumns Inherited Members IClassProperty.LoadPropertyQuery IClassProperty.Name IClassProperty.ParentMapping IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) Properties Cascade Gets a value indicating whether this IMapProperty is cascade. bool Cascade { get; } Property Value bool true if cascade; otherwise, false. DatabaseJoinsCascade Gets a value indicating whether [database joins cascade]. bool DatabaseJoinsCascade { get; } Property Value bool true if [database joins cascade]; otherwise, false. ForeignMapping Gets the foreign mapping. List<IMapping> ForeignMapping { get; } Property Value List<IMapping> The foreign mapping. InternalFieldName Gets the name of the internal field. string InternalFieldName { get; } Property Value string The name of the internal field. PropertyType Gets the type of the property. Type PropertyType { get; } Property Value Type The type of the property. TableName Gets the name of the table. string? TableName { get; } Property Value string The name of the table. TypeName Gets the name of the type. string TypeName { get; } Property Value string The name of the type. Methods Convert<TResult>(IMapping) Converts this instance to the class specified IManyToManyProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters mapping IMapping The mapping. Returns IManyToManyProperty The resulting property Type Parameters TResult The type of the result. GetValue(object) Gets the property's value from the object sent in object? GetValue(object ModelObject) Parameters ModelObject object Object to get the value from Returns object The value of the property Setup(IMappingSource, ISource) Sets up the property (used internally) void Setup(IMappingSource mappings, ISource sourceSpec) Parameters mappings IMappingSource The mappings. sourceSpec ISource The source spec. Similar(IManyToManyProperty) Similars the specified reference property2. bool Similar(IManyToManyProperty secondProperty) Parameters secondProperty IManyToManyProperty The second property. Returns bool True if it is similar, false otherwise. See Also IFluentInterface"
  },
  "api/Inflatable.ClassMapper.Interfaces.IManyToOneListProperty.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IManyToOneListProperty.html",
    "title": "Interface IManyToOneListProperty | Inflatable API Reference",
    "keywords": "Interface IManyToOneListProperty Namespace Inflatable.ClassMapper.Interfaces Assembly Inflatable.dll Many to one list property public interface IManyToOneListProperty : IManyToOneProperty, IClassProperty, IPropertyColumns Inherited Members IManyToOneProperty.Cascade IManyToOneProperty.ColumnName IManyToOneProperty.ForeignMapping IManyToOneProperty.InternalFieldName IManyToOneProperty.PropertyType IManyToOneProperty.TypeName IManyToOneProperty.Convert<TResult>(IMapping) IManyToOneProperty.GetValue(object) IManyToOneProperty.Setup(IMappingSource, ISource) IManyToOneProperty.Similar(IManyToOneProperty) IClassProperty.LoadPropertyQuery IClassProperty.Name IClassProperty.ParentMapping IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) See Also IManyToOneProperty"
  },
  "api/Inflatable.ClassMapper.Interfaces.IManyToOneProperty-2.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IManyToOneProperty-2.html",
    "title": "Interface IManyToOneProperty<TClassType, TDataType> | Inflatable API Reference",
    "keywords": "Interface IManyToOneProperty<TClassType, TDataType> Namespace Inflatable.ClassMapper.Interfaces Assembly Inflatable.dll Many to many property public interface IManyToOneProperty<TClassType, TDataType> : IManyToOneProperty, IClassProperty, IPropertyColumns where TClassType : class where TDataType : class Type Parameters TClassType The class type. TDataType The data type. Inherited Members IManyToOneProperty.Cascade IManyToOneProperty.ColumnName IManyToOneProperty.ForeignMapping IManyToOneProperty.InternalFieldName IManyToOneProperty.PropertyType IManyToOneProperty.TypeName IManyToOneProperty.Convert<TResult>(IMapping) IManyToOneProperty.GetValue(object) IManyToOneProperty.Setup(IMappingSource, ISource) IManyToOneProperty.Similar(IManyToOneProperty) IClassProperty.LoadPropertyQuery IClassProperty.Name IClassProperty.ParentMapping IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) Properties CompiledExpression Compiled version of the expression Func<TClassType, TDataType> CompiledExpression { get; } Property Value Func<TClassType, TDataType> The compiled expression. Expression Expression pointing to the property Expression<Func<TClassType, TDataType>> Expression { get; } Property Value Expression<Func<TClassType, TDataType>> The expression. See Also IFluentInterface"
  },
  "api/Inflatable.ClassMapper.Interfaces.IManyToOneProperty-3.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IManyToOneProperty-3.html",
    "title": "Interface IManyToOneProperty<TClassType, TDataType, TReturnType> | Inflatable API Reference",
    "keywords": "Interface IManyToOneProperty<TClassType, TDataType, TReturnType> Namespace Inflatable.ClassMapper.Interfaces Assembly Inflatable.dll Many to one property interface public interface IManyToOneProperty<TClassType, TDataType, TReturnType> : IFluentInterface where TClassType : class where TDataType : class where TReturnType : IManyToOneProperty<TClassType, TDataType, TReturnType> Type Parameters TClassType The class type. TDataType The data type. TReturnType The return type. Methods CascadeChanges() Cascades changes to the mapped instance. TReturnType CascadeChanges() Returns TReturnType This LoadUsing(string, CommandType) Loads the property using the query specified. TReturnType LoadUsing(string queryText, CommandType type) Parameters queryText string The query text. type CommandType The type. Returns TReturnType This OnDeleteDoNothing() Called when you want to override the default referential integrity and do nothing on delete. TReturnType OnDeleteDoNothing() Returns TReturnType This SetColumnName(string) Sets the name of the column. TReturnType SetColumnName(string columnName) Parameters columnName string Name of the column. Returns TReturnType This See Also IClassProperty IFluentInterface"
  },
  "api/Inflatable.ClassMapper.Interfaces.IManyToOneProperty.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IManyToOneProperty.html",
    "title": "Interface IManyToOneProperty | Inflatable API Reference",
    "keywords": "Interface IManyToOneProperty Namespace Inflatable.ClassMapper.Interfaces Assembly Inflatable.dll Many to many property public interface IManyToOneProperty : IClassProperty, IPropertyColumns Inherited Members IClassProperty.LoadPropertyQuery IClassProperty.Name IClassProperty.ParentMapping IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) Properties Cascade Gets a value indicating whether this IMapProperty is cascade. bool Cascade { get; } Property Value bool true if cascade; otherwise, false. ColumnName Gets the name of the column. string ColumnName { get; } Property Value string The name of the column. ForeignMapping Gets the foreign mapping. List<IMapping> ForeignMapping { get; } Property Value List<IMapping> The foreign mapping. InternalFieldName Gets the name of the internal field. string InternalFieldName { get; } Property Value string The name of the internal field. PropertyType Gets the type of the property. Type PropertyType { get; } Property Value Type The type of the property. TypeName Gets the name of the type. string TypeName { get; } Property Value string The name of the type. Methods Convert<TResult>(IMapping) Converts this instance to the class specified IManyToOneProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters mapping IMapping The mapping. Returns IManyToOneProperty The resulting property Type Parameters TResult The type of the result. GetValue(object) Gets the property's value from the object sent in object? GetValue(object ModelObject) Parameters ModelObject object Object to get the value from Returns object The value of the property Setup(IMappingSource, ISource) Sets up the property (used internally) void Setup(IMappingSource mappings, ISource sourceSpec) Parameters mappings IMappingSource The mappings. sourceSpec ISource The source spec. Similar(IManyToOneProperty) Similars the specified reference property2. bool Similar(IManyToOneProperty secondProperty) Parameters secondProperty IManyToOneProperty The second property. Returns bool True if it is similar, false otherwise. See Also IFluentInterface"
  },
  "api/Inflatable.ClassMapper.Interfaces.IMapProperty-2.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IMapProperty-2.html",
    "title": "Interface IMapProperty<TClassType, TDataType> | Inflatable API Reference",
    "keywords": "Interface IMapProperty<TClassType, TDataType> Namespace Inflatable.ClassMapper.Interfaces Assembly Inflatable.dll Map property interface public interface IMapProperty<TClassType, TDataType> : IMapProperty, IClassProperty, IPropertyColumns where TClassType : class where TDataType : class Type Parameters TClassType The type of the class type. TDataType The type of the data type. Inherited Members IMapProperty.Cascade IMapProperty.ColumnName IMapProperty.ForeignMapping IMapProperty.InternalFieldName IMapProperty.PropertyType IMapProperty.TypeName IMapProperty.Unique IMapProperty.AddToTable(ITable) IMapProperty.Convert<TResult>(IMapping) IMapProperty.GetValue(object) IMapProperty.Setup(IMappingSource) IMapProperty.Similar(IMapProperty) IClassProperty.LoadPropertyQuery IClassProperty.Name IClassProperty.ParentMapping IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) Properties CompiledExpression Compiled version of the expression Func<TClassType, TDataType?> CompiledExpression { get; } Property Value Func<TClassType, TDataType> The compiled expression. Expression Expression pointing to the property Expression<Func<TClassType, TDataType?>> Expression { get; } Property Value Expression<Func<TClassType, TDataType>> The expression. See Also IFluentInterface"
  },
  "api/Inflatable.ClassMapper.Interfaces.IMapProperty-3.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IMapProperty-3.html",
    "title": "Interface IMapProperty<TClassType, TDataType, TReturnType> | Inflatable API Reference",
    "keywords": "Interface IMapProperty<TClassType, TDataType, TReturnType> Namespace Inflatable.ClassMapper.Interfaces Assembly Inflatable.dll Map property interface public interface IMapProperty<TClassType, TDataType, TReturnType> : IFluentInterface where TClassType : class where TDataType : class where TReturnType : IMapProperty<TClassType, TDataType, TReturnType> Type Parameters TClassType The type of the class type. TDataType The type of the data type. TReturnType The type of the return type. Methods CascadeChanges() Cascades changes to the mapped instance. TReturnType CascadeChanges() Returns TReturnType This IsUnique() Determines whether this instance is unique. TReturnType IsUnique() Returns TReturnType this LoadUsing(string, CommandType) Loads the property using the query specified. TReturnType LoadUsing(string queryText, CommandType type) Parameters queryText string The query text. type CommandType The type. Returns TReturnType This OnDeleteDoNothing() Called when you want to override the default referential integrity and do nothing on delete. TReturnType OnDeleteDoNothing() Returns TReturnType This WithColumnName(string) Sets the name of the column. TReturnType WithColumnName(string columnName) Parameters columnName string Name of the column. Returns TReturnType This See Also IFluentInterface"
  },
  "api/Inflatable.ClassMapper.Interfaces.IMapProperty.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IMapProperty.html",
    "title": "Interface IMapProperty | Inflatable API Reference",
    "keywords": "Interface IMapProperty Namespace Inflatable.ClassMapper.Interfaces Assembly Inflatable.dll Map property public interface IMapProperty : IClassProperty, IPropertyColumns Inherited Members IClassProperty.LoadPropertyQuery IClassProperty.Name IClassProperty.ParentMapping IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) Properties Cascade Gets a value indicating whether this IMapProperty is cascade. bool Cascade { get; } Property Value bool true if cascade; otherwise, false. ColumnName Gets the name of the column. string ColumnName { get; } Property Value string The name of the column. ForeignMapping Gets the foreign mapping. List<IMapping> ForeignMapping { get; } Property Value List<IMapping> The foreign mapping. InternalFieldName Gets the name of the internal field. string InternalFieldName { get; } Property Value string The name of the internal field. PropertyType Gets the type of the property. Type PropertyType { get; } Property Value Type The type of the property. TypeName Gets the name of the type. string TypeName { get; } Property Value string The name of the type. Unique Gets a value indicating whether this IMapProperty is unique. bool Unique { get; } Property Value bool true if unique; otherwise, false. Methods AddToTable(ITable) Adds this property to the table. void AddToTable(ITable table) Parameters table ITable The table. Convert<TResult>(IMapping) Converts this instance to the class specified IMapProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters mapping IMapping The mapping. Returns IMapProperty The resulting property Type Parameters TResult The type of the result. GetValue(object) Gets the property's value from the object sent in object? GetValue(object ModelObject) Parameters ModelObject object Object to get the value from Returns object The value of the property Setup(IMappingSource) Sets up the property (used internally) void Setup(IMappingSource mappings) Parameters mappings IMappingSource The mappings. Similar(IMapProperty) Similars the specified reference property2. bool Similar(IMapProperty secondProperty) Parameters secondProperty IMapProperty The second property. Returns bool True if it is similar, false otherwise. See Also IFluentInterface"
  },
  "api/Inflatable.ClassMapper.Interfaces.IProperty-2.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IProperty-2.html",
    "title": "Interface IProperty<ClassType, DataType> | Inflatable API Reference",
    "keywords": "Interface IProperty<ClassType, DataType> Namespace Inflatable.ClassMapper.Interfaces Assembly Inflatable.dll Property interface public interface IProperty<ClassType, DataType> : IProperty, IPropertyColumns where ClassType : class Type Parameters ClassType Class type DataType Inherited Members IProperty.ColumnName IProperty.ComputedColumnSpecification IProperty.Constraints IProperty.Index IProperty.InternalFieldName IProperty.MaxLength IProperty.Name IProperty.Nullable IProperty.ParentMapping IProperty.PropertyType IProperty.ReadOnly IProperty.TypeName IProperty.Unique IProperty.AddToTable(ITable) IProperty.Convert<TResult>(IMapping) IProperty.Setup() IProperty.Similar(IProperty) IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) Properties CompiledExpression Compiled version of the expression Func<ClassType, DataType> CompiledExpression { get; } Property Value Func<ClassType, DataType> DefaultValue Default value for this property Func<DataType> DefaultValue { get; } Property Value Func<DataType> Expression Expression pointing to the property Expression<Func<ClassType, DataType>> Expression { get; } Property Value Expression<Func<ClassType, DataType>>"
  },
  "api/Inflatable.ClassMapper.Interfaces.IProperty-3.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IProperty-3.html",
    "title": "Interface IProperty<ClassType, DataType, ReturnType> | Inflatable API Reference",
    "keywords": "Interface IProperty<ClassType, DataType, ReturnType> Namespace Inflatable.ClassMapper.Interfaces Assembly Inflatable.dll Property interface public interface IProperty<ClassType, DataType, ReturnType> : IFluentInterface where ClassType : class where ReturnType : IProperty<ClassType, DataType, ReturnType> Type Parameters ClassType Class type DataType Data type ReturnType Return type Methods IsIndexed() Determines whether this instance is indexed. ReturnType IsIndexed() Returns ReturnType this IsReadOnly() Determines whether [is read only]. ReturnType IsReadOnly() Returns ReturnType this IsUnique() Determines whether this instance is unique. ReturnType IsUnique() Returns ReturnType this WithColumnName(string) Sets the name of the field in the database. ReturnType WithColumnName(string columnName) Parameters columnName string Name of the field. Returns ReturnType this WithComputedColumnSpecification(string) Sets the computed column specification if the source allows it. ReturnType WithComputedColumnSpecification(string computedColumnSpecification) Parameters computedColumnSpecification string The computed column specification. Returns ReturnType this WithConstraint(string) Sets a constraint on the field if the source allows it. ReturnType WithConstraint(string constraint) Parameters constraint string The constraint. Returns ReturnType this WithDefaultValue(Func<DataType>) Sets the default value of the property. ReturnType WithDefaultValue(Func<DataType> value) Parameters value Func<DataType> The value. Returns ReturnType this WithMaxLength() Sets the length for the property to MAX. ReturnType WithMaxLength() Returns ReturnType this. WithMaxLength(int) Sets the max length for the property (or precision for items like decimal values) ReturnType WithMaxLength(int maxLength) Parameters maxLength int Max length Returns ReturnType this"
  },
  "api/Inflatable.ClassMapper.Interfaces.IProperty.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IProperty.html",
    "title": "Interface IProperty | Inflatable API Reference",
    "keywords": "Interface IProperty Namespace Inflatable.ClassMapper.Interfaces Assembly Inflatable.dll Property data holder interface public interface IProperty : IPropertyColumns Inherited Members IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) Properties ColumnName Gets the name of the column. string ColumnName { get; } Property Value string The name of the column. ComputedColumnSpecification Gets the computed column specification. string ComputedColumnSpecification { get; } Property Value string The computed column specification. Constraints Gets the constraints if the data source supports them. IList<string> Constraints { get; } Property Value IList<string> The constraints if the data source supports them. Index Gets a value indicating whether this IProperty is indexed. bool Index { get; } Property Value bool true if index; otherwise, false. InternalFieldName Gets the name of the internal field. string InternalFieldName { get; } Property Value string The name of the internal field. MaxLength Gets the maximum length. int MaxLength { get; } Property Value int The maximum length. Name Gets the name. string Name { get; } Property Value string The name. Nullable Gets a value indicating whether this IProperty is nullable. bool Nullable { get; } Property Value bool true if nullable; otherwise, false. ParentMapping Gets the parent mapping. IMapping ParentMapping { get; } Property Value IMapping The parent mapping. PropertyType Gets the type of the property. Type PropertyType { get; } Property Value Type The type of the property. ReadOnly Gets a value indicating whether [read only]. bool ReadOnly { get; } Property Value bool true if [read only]; otherwise, false. TypeName Gets the name of the type. string TypeName { get; } Property Value string The name of the type. Unique Gets a value indicating whether this IProperty is unique. bool Unique { get; } Property Value bool true if unique; otherwise, false. Methods AddToTable(ITable) Adds this property to the table. void AddToTable(ITable table) Parameters table ITable The table. Convert<TResult>(IMapping) Converts this instance to the class specified IProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters mapping IMapping The mapping. Returns IProperty The resulting property Type Parameters TResult The type of the result. Setup() Sets up the property (used internally) void Setup() Similar(IProperty) Similars the specified reference property2. bool Similar(IProperty secondProperty) Parameters secondProperty IProperty The second property. Returns bool True if it is similar, false otherwise."
  },
  "api/Inflatable.ClassMapper.Interfaces.IPropertyColumns.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IPropertyColumns.html",
    "title": "Interface IPropertyColumns | Inflatable API Reference",
    "keywords": "Interface IPropertyColumns Namespace Inflatable.ClassMapper.Interfaces Assembly Inflatable.dll Interface holding column information public interface IPropertyColumns Methods GetColumnInfo() Gets the column information. IQueryColumnInfo[] GetColumnInfo() Returns IQueryColumnInfo[] The column information. SetColumnInfo(IMappingSource) Sets the column information. void SetColumnInfo(IMappingSource mappings) Parameters mappings IMappingSource The mappings."
  },
  "api/Inflatable.ClassMapper.Interfaces.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.html",
    "title": "Namespace Inflatable.ClassMapper.Interfaces | Inflatable API Reference",
    "keywords": "Namespace Inflatable.ClassMapper.Interfaces Interfaces IAutoIDProperty Auto ID property interface IClassProperty Single class property data holder IIDProperty ID property interface IIDProperty<ClassType, DataType> Property interface IIDProperty<ClassType, DataType, ReturnType> Property interface IManyToManyProperty Many to many property IManyToManyProperty<TClassType, TDataType> Many to many property IManyToManyProperty<TClassType, TDataType, TReturnType> Many to many property interface IManyToOneListProperty Many to one list property IManyToOneProperty Many to many property IManyToOneProperty<TClassType, TDataType> Many to many property IManyToOneProperty<TClassType, TDataType, TReturnType> Many to one property interface IMapProperty Map property IMapProperty<TClassType, TDataType> Map property interface IMapProperty<TClassType, TDataType, TReturnType> Map property interface IProperty Property data holder interface IPropertyColumns Interface holding column information IProperty<ClassType, DataType> Property interface IProperty<ClassType, DataType, ReturnType> Property interface"
  },
  "api/Inflatable.ClassMapper.MappingManager.html": {
    "href": "api/Inflatable.ClassMapper.MappingManager.html",
    "title": "Class MappingManager | Inflatable API Reference",
    "keywords": "Class MappingManager Namespace Inflatable.ClassMapper Assembly Inflatable.dll Mapping manager public class MappingManager Inheritance object MappingManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MappingManager(IEnumerable<IMapping>, IEnumerable<IDatabase>, QueryProviderManager, ObjectPool<StringBuilder>, ILogger<MappingManager>?) Initializes a new instance of the MappingManager class. public MappingManager(IEnumerable<IMapping> mappings, IEnumerable<IDatabase> sources, QueryProviderManager queryProvider, ObjectPool<StringBuilder> objectPool, ILogger<MappingManager>? logger = null) Parameters mappings IEnumerable<IMapping> The mappings. sources IEnumerable<IDatabase> The sources. queryProvider QueryProviderManager The query provider. objectPool ObjectPool<StringBuilder> The object pool. logger ILogger<MappingManager> The logger. Exceptions ArgumentNullException logger Properties Logger Gets or sets the logger. public ILogger? Logger { get; set; } Property Value ILogger The logger. ObjectPool Gets or sets the ObjectPool. public ObjectPool<StringBuilder> ObjectPool { get; } Property Value ObjectPool<StringBuilder> The ObjectPool. ReadSources Gets or sets the read sources. public IMappingSource[] ReadSources { get; set; } Property Value IMappingSource[] The read sources. Sources Gets or sets the sources. public IMappingSource[] Sources { get; set; } Property Value IMappingSource[] The sources. WriteSources Gets or sets the write sources. public IMappingSource[] WriteSources { get; set; } Property Value IMappingSource[] The write sources. Methods ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance."
  },
  "api/Inflatable.ClassMapper.MappingSource.html": {
    "href": "api/Inflatable.ClassMapper.MappingSource.html",
    "title": "Class MappingSource | Inflatable API Reference",
    "keywords": "Class MappingSource Namespace Inflatable.ClassMapper Assembly Inflatable.dll Mapping source public class MappingSource : IMappingSource Inheritance object MappingSource Implements IMappingSource Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MappingSource(IEnumerable<IMapping>, IDatabase, QueryProviderManager, ILogger?, ObjectPool<StringBuilder>) Mapping source public MappingSource(IEnumerable<IMapping> mappings, IDatabase source, QueryProviderManager queryProvider, ILogger? logger, ObjectPool<StringBuilder> objectPool) Parameters mappings IEnumerable<IMapping> Mappings associated with the source source IDatabase Database source queryProvider QueryProviderManager The query provider. logger ILogger Logging object objectPool ObjectPool<StringBuilder> The object pool. Exceptions ArgumentNullException queryProvider or source Properties ApplyAnalysis Gets a value indicating whether to [apply analysis]. public bool ApplyAnalysis { get; } Property Value bool true if you should [apply analysis]; otherwise, false. CanRead Gets a value indicating whether this instance can be read. public bool CanRead { get; } Property Value bool true if this instance can be read; otherwise, false. CanWrite Gets a value indicating whether this instance can be written to. public bool CanWrite { get; } Property Value bool true if this instance can be written to; otherwise, false. ChildTypes Gets the child types. public ListMapping<Type, Type> ChildTypes { get; } Property Value ListMapping<Type, Type> The child types. ConcreteTypes Gets the concrete types. public Type[] ConcreteTypes { get; } Property Value Type[] The concrete types. GenerateAnalysis Gets a value indicating whether to [generate analysis]. public bool GenerateAnalysis { get; } Property Value bool true if you should [generate analysis]; otherwise, false. GenerateSchema Gets a value indicating whether to [generate schema]. public bool GenerateSchema { get; } Property Value bool true if you should [generate schema]; otherwise, false. Logger Logger for the system public ILogger? Logger { get; } Property Value ILogger Mappings Gets or sets the mappings. public Dictionary<Type, IMapping> Mappings { get; } Property Value Dictionary<Type, IMapping> The mappings. ObjectPool Gets or sets the ObjectPool. public ObjectPool<StringBuilder> ObjectPool { get; } Property Value ObjectPool<StringBuilder> The ObjectPool. Optimize Gets a value indicating whether to [optimize]. public bool Optimize { get; } Property Value bool true if you should [optimize]; otherwise, false. Order Order that the source is used public int Order { get; } Property Value int ParentTypes Gets the parent types. public ListMapping<Type, Type> ParentTypes { get; } Property Value ListMapping<Type, Type> The parent types. QueryProvider Gets the query provider. public QueryProviderManager QueryProvider { get; } Property Value QueryProviderManager The query provider. Source Source info public IDatabase Source { get; } Property Value IDatabase TypeGraphs Gets or sets the type graph. public Dictionary<Type, Tree<Type>?> TypeGraphs { get; } Property Value Dictionary<Type, Tree<Type>> The type graph. UpdateSchema Gets a value indicating whether to [update schema]. public bool UpdateSchema { get; } Property Value bool true if you should [update schema]; otherwise, false. Methods Equals(object) Determines whether the specified object, is equal to this instance. public override bool Equals(object obj) Parameters obj object The object to compare with this instance. Returns bool true if the specified object is equal to this instance; otherwise, false. GetChildMappings(Type) Gets the child mappings. public IEnumerable<IMapping> GetChildMappings(Type objectType) Parameters objectType Type Type of the object. Returns IEnumerable<IMapping> The IMapping list associated with the object type. GetChildMappings<TObject>() Gets the child mappings. public IEnumerable<IMapping> GetChildMappings<TObject>() Returns IEnumerable<IMapping> The IMapping list associated with the object type. Type Parameters TObject The type of the object. GetHashCode() Returns a hash code for this instance. public override int GetHashCode() Returns int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. GetParentMapping(Type) Gets the parent mappings. public IEnumerable<IMapping> GetParentMapping(Type objectType) Parameters objectType Type Type of the object. Returns IEnumerable<IMapping> The IMapping list associated with the object type. GetParentMapping<TObject>() Gets the parent mappings. public IEnumerable<IMapping> GetParentMapping<TObject>() Returns IEnumerable<IMapping> The IMapping list associated with the object type. Type Parameters TObject The type of the object. ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance. See Also IMappingSource"
  },
  "api/Inflatable.ClassMapper.TypeGraph.DiscoverConcreteTypes.html": {
    "href": "api/Inflatable.ClassMapper.TypeGraph.DiscoverConcreteTypes.html",
    "title": "Class DiscoverConcreteTypes | Inflatable API Reference",
    "keywords": "Class DiscoverConcreteTypes Namespace Inflatable.ClassMapper.TypeGraph Assembly Inflatable.dll Discovers concrete types public static class DiscoverConcreteTypes Inheritance object DiscoverConcreteTypes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FindConcreteTypes(IDictionary<Type, Tree<Type>?>) Find concrete types public static Type[] FindConcreteTypes(IDictionary<Type, Tree<Type>?> typeTrees) Parameters typeTrees IDictionary<Type, Tree<Type>> Returns Type[] The concrete types of the mapping tree"
  },
  "api/Inflatable.ClassMapper.TypeGraph.Generator.html": {
    "href": "api/Inflatable.ClassMapper.TypeGraph.Generator.html",
    "title": "Class Generator | Inflatable API Reference",
    "keywords": "Class Generator Namespace Inflatable.ClassMapper.TypeGraph Assembly Inflatable.dll Type graph generator public static class Generator Inheritance object Generator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Generate(Type, Dictionary<Type, IMapping>) Generates the specified mapping type. public static Tree<Type>? Generate(Type mappingType, Dictionary<Type, IMapping> mappings) Parameters mappingType Type Type of the mapping. mappings Dictionary<Type, IMapping> The mappings. Returns Tree<Type> The type graph associated with the type."
  },
  "api/Inflatable.ClassMapper.TypeGraph.MergeMapping.html": {
    "href": "api/Inflatable.ClassMapper.TypeGraph.MergeMapping.html",
    "title": "Class MergeMapping | Inflatable API Reference",
    "keywords": "Class MergeMapping Namespace Inflatable.ClassMapper.TypeGraph Assembly Inflatable.dll Merge mappings as needed public static class MergeMapping Inheritance object MergeMapping Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Merge(Tree<Type>?, Dictionary<Type, IMapping>, ILogger) Merges this instance. public static void Merge(Tree<Type>? typeGraph, Dictionary<Type, IMapping> mappings, ILogger logger) Parameters typeGraph Tree<Type> The type graph. mappings Dictionary<Type, IMapping> The mappings. logger ILogger The logger."
  },
  "api/Inflatable.ClassMapper.TypeGraph.ReduceMapping.html": {
    "href": "api/Inflatable.ClassMapper.TypeGraph.ReduceMapping.html",
    "title": "Class ReduceMapping | Inflatable API Reference",
    "keywords": "Class ReduceMapping Namespace Inflatable.ClassMapper.TypeGraph Assembly Inflatable.dll Reduces mappings and removes redundant items public static class ReduceMapping Inheritance object ReduceMapping Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Reduce(Tree<Type>?, Dictionary<Type, IMapping>, ILogger) Reduces the mapping public static void Reduce(Tree<Type>? typeGraph, Dictionary<Type, IMapping> mappings, ILogger logger) Parameters typeGraph Tree<Type> The type graph. mappings Dictionary<Type, IMapping> The mappings. logger ILogger The logger."
  },
  "api/Inflatable.ClassMapper.TypeGraph.html": {
    "href": "api/Inflatable.ClassMapper.TypeGraph.html",
    "title": "Namespace Inflatable.ClassMapper.TypeGraph | Inflatable API Reference",
    "keywords": "Namespace Inflatable.ClassMapper.TypeGraph Classes DiscoverConcreteTypes Discovers concrete types Generator Type graph generator MergeMapping Merge mappings as needed ReduceMapping Reduces mappings and removes redundant items"
  },
  "api/Inflatable.ClassMapper.html": {
    "href": "api/Inflatable.ClassMapper.html",
    "title": "Namespace Inflatable.ClassMapper | Inflatable API Reference",
    "keywords": "Namespace Inflatable.ClassMapper Classes MappingManager Mapping manager MappingSource Mapping source Interfaces IMappingSource Mapping source interface"
  },
  "api/Inflatable.DataSource.Options.html": {
    "href": "api/Inflatable.DataSource.Options.html",
    "title": "Class Options | Inflatable API Reference",
    "keywords": "Class Options Namespace Inflatable.DataSource Assembly Inflatable.dll Data source options public class Options Inheritance object Options Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Access Gets the access level for the source. public SourceAccess Access { get; set; } Property Value SourceAccess The access level for the source. Analysis The level the system should update/generate analysis for you. public SchemaAnalysis Analysis { get; set; } Property Value SchemaAnalysis The level the system should update/generate analysis for you. Audit Determines if audit tables are generated public bool Audit { get; set; } Property Value bool true if audit; otherwise, false. Optimize Gets a value indicating whether this source should be optimized automatically. public bool Optimize { get; set; } Property Value bool true if it should be optimized; otherwise, false. SchemaUpdate The level the system should update/generate schema changes for you. public SchemaGeneration SchemaUpdate { get; set; } Property Value SchemaGeneration The level the system should update/generate schema changes for you."
  },
  "api/Inflatable.DataSource.html": {
    "href": "api/Inflatable.DataSource.html",
    "title": "Namespace Inflatable.DataSource | Inflatable API Reference",
    "keywords": "Namespace Inflatable.DataSource Classes Options Data source options"
  },
  "api/Inflatable.DbContext-1.html": {
    "href": "api/Inflatable.DbContext-1.html",
    "title": "Class DbContext<TObject> | Inflatable API Reference",
    "keywords": "Class DbContext<TObject> Namespace Inflatable Assembly Inflatable.dll Db context public class DbContext<TObject> : QueryProviderBase, IQueryProvider where TObject : class Type Parameters TObject The type of the object. Inheritance object QueryProviderBase DbContext<TObject> Implements IQueryProvider Inherited Members QueryProviderBase.CreateQuery<TElement>(Expression) QueryProviderBase.CreateQuery(Expression) QueryProviderBase.Execute<TElement>(Expression) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateQuery() Creates a query. public static IQueryable<TObject> CreateQuery() Returns IQueryable<TObject> The resulting query. Execute(Expression) Executes the query represented by a specified expression tree. public override object? Execute(Expression expression) Parameters expression Expression An expression tree that represents a LINQ query. Returns object The value that results from executing the specified query. ExecuteAsync(string, CommandType, string, params object[]) Executes the query asynchronously. public static Task<IEnumerable<TObject>> ExecuteAsync(string command, CommandType type, string connection, params object[] parameters) Parameters command string The command. type CommandType The type. connection string The connection. parameters object[] The parameters. Returns Task<IEnumerable<TObject>> The list of objects returned by the query. ExecuteScalarAsync(string, CommandType, string, params object[]) Executes the query getting a scalar asynchronously. public static Task<TObject> ExecuteScalarAsync(string command, CommandType type, string connection, params object[] parameters) Parameters command string The command. type CommandType The type. connection string The connection. parameters object[] The parameters. Returns Task<TObject> The first object returned by the query. GetQueryText(Expression) Gets the query text. public override string GetQueryText(Expression expression) Parameters expression Expression The expression. Returns string The query as a string See Also QueryProviderBase"
  },
  "api/Inflatable.DbContext.html": {
    "href": "api/Inflatable.DbContext.html",
    "title": "Class DbContext | Inflatable API Reference",
    "keywords": "Class DbContext Namespace Inflatable Assembly Inflatable.dll Db Context public class DbContext Inheritance object DbContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DbContext() Initializes a new instance of the DbContext class. public DbContext() DbContext(ISession?) Initializes a new instance of the DbContext class. public DbContext(ISession? internalSession) Parameters internalSession ISession The internal session. Methods Delete<TObject>(params TObject[]) Adds a delete command. public DbContext Delete<TObject>(params TObject[] objectsToDelete) where TObject : class Parameters objectsToDelete TObject[] The objects to delete. Returns DbContext This Type Parameters TObject The type of the object. ExecuteAsync() Executes the various save and delete commands asynchronous. public Task<int> ExecuteAsync() Returns Task<int> The number of rows modified or the first ID if inserting new items. ExecuteAsync(string, CommandType, string, params object[]) Executes the query asynchronously. public static Task<IEnumerable<dynamic>> ExecuteAsync(string command, CommandType type, string connection, params object[] parameters) Parameters command string The command. type CommandType The type. connection string The connection. parameters object[] The parameters. Returns Task<IEnumerable<dynamic>> The list of objects returned by the query Save<TObject>(params TObject[]) Adds a save command. public DbContext Save<TObject>(params TObject[] objectsToSave) where TObject : class Parameters objectsToSave TObject[] The objects to save. Returns DbContext This Type Parameters TObject The type of the object."
  },
  "api/Inflatable.Enums.SchemaAnalysis.html": {
    "href": "api/Inflatable.Enums.SchemaAnalysis.html",
    "title": "Enum SchemaAnalysis | Inflatable API Reference",
    "keywords": "Enum SchemaAnalysis Namespace Inflatable.Enums Assembly Inflatable.dll Schema analysis enum public enum SchemaAnalysis Fields ApplyAnalysis = 2 Automatically apply analysis found GenerateAnalysis = 1 Generate analysis for the source NoAnalysis = 0 Do not analyze"
  },
  "api/Inflatable.Enums.SchemaGeneration.html": {
    "href": "api/Inflatable.Enums.SchemaGeneration.html",
    "title": "Enum SchemaGeneration | Inflatable API Reference",
    "keywords": "Enum SchemaGeneration Namespace Inflatable.Enums Assembly Inflatable.dll Schema generation enum public enum SchemaGeneration Fields GenerateSchemaChanges = 1 Generate schema changes only. NoGeneration = 0 Do not update or generate schema changes. UpdateSchema = 2 Update the schema of the source"
  },
  "api/Inflatable.Enums.SourceAccess.html": {
    "href": "api/Inflatable.Enums.SourceAccess.html",
    "title": "Enum SourceAccess | Inflatable API Reference",
    "keywords": "Enum SourceAccess Namespace Inflatable.Enums Assembly Inflatable.dll Source access [Flags] public enum SourceAccess Fields None = 0 No access Read = 1 Read access Write = 2 Write access"
  },
  "api/Inflatable.Enums.html": {
    "href": "api/Inflatable.Enums.html",
    "title": "Namespace Inflatable.Enums | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Enums Enums SchemaAnalysis Schema analysis enum SchemaGeneration Schema generation enum SourceAccess Source access"
  },
  "api/Inflatable.Interfaces.IDatabase.html": {
    "href": "api/Inflatable.Interfaces.IDatabase.html",
    "title": "Interface IDatabase | Inflatable API Reference",
    "keywords": "Interface IDatabase Namespace Inflatable.Interfaces Assembly Inflatable.dll Database configuration interface public interface IDatabase Properties Name Name associated with the database/connection string string Name { get; } Property Value string The name. Order Order that this database should be in (if only one database is being used, it is ignored) int Order { get; } Property Value int The order. Provider Gets the provider. DbProviderFactory Provider { get; } Property Value DbProviderFactory The provider. SourceOptions Gets the source options. Options SourceOptions { get; } Property Value Options The source options."
  },
  "api/Inflatable.Interfaces.IMapping-1.html": {
    "href": "api/Inflatable.Interfaces.IMapping-1.html",
    "title": "Interface IMapping<TClassType> | Inflatable API Reference",
    "keywords": "Interface IMapping<TClassType> Namespace Inflatable.Interfaces Assembly Inflatable.dll Class mapping interface public interface IMapping<TClassType> : IMapping where TClassType : class Type Parameters TClassType Class type Inherited Members IMapping.AutoIDProperties IMapping.DatabaseConfigType IMapping.IDProperties IMapping.ManyToManyProperties IMapping.ManyToOneProperties IMapping.MapProperties IMapping.Merge IMapping.ObjectType IMapping.Order IMapping.Prefix IMapping.Queries IMapping.ReferenceProperties IMapping.SchemaName IMapping.Suffix IMapping.TableName IMapping.AddAutoKey() IMapping.ContainsProperty(string) IMapping.Copy(IMapping) IMapping.CopyProperty(IIDProperty) IMapping.CopyProperty(IProperty) IMapping.CopyProperty(IMapProperty) IMapping.CopyProperty(IManyToOneProperty) IMapping.CopyProperty(IManyToManyProperty) IMapping.GetColumnName(string) IMapping.Reduce(ILogger) IMapping.Reduce(IMapping, ILogger) IMapping.SetQuery(QueryType, string, CommandType, params IParameter[]) IMapping.Setup() Methods ID<TDataType>(Expression<Func<TClassType, TDataType>>) Declares a property as an ID ID<TClassType, TDataType> ID<TDataType>(Expression<Func<TClassType, TDataType>> expression) Parameters expression Expression<Func<TClassType, TDataType>> Expression pointing to the property Returns ID<TClassType, TDataType> the ID object Type Parameters TDataType Data type ManyToMany<TDataType>(Expression<Func<TClassType, IList<TDataType>>>) Sets a property as a many to many type. ManyToMany<TClassType, TDataType> ManyToMany<TDataType>(Expression<Func<TClassType, IList<TDataType>>> expression) where TDataType : class Parameters expression Expression<Func<TClassType, IList<TDataType>>> Expression pointing to the property Returns ManyToMany<TClassType, TDataType> The many to many object Type Parameters TDataType The type of the ata type. ManyToOne<TDataType>(Expression<Func<TClassType, IList<TDataType>>>) Sets a property as a many to one type. ManyToOneMany<TClassType, TDataType> ManyToOne<TDataType>(Expression<Func<TClassType, IList<TDataType>>> expression) where TDataType : class Parameters expression Expression<Func<TClassType, IList<TDataType>>> Expression pointing to the property Returns ManyToOneMany<TClassType, TDataType> The many to many object Type Parameters TDataType The type of the data type. ManyToOne<TDataType>(Expression<Func<TClassType, TDataType?>>) Sets a property as a many to one type. ManyToOneSingle<TClassType, TDataType> ManyToOne<TDataType>(Expression<Func<TClassType, TDataType?>> expression) where TDataType : class Parameters expression Expression<Func<TClassType, TDataType>> Expression pointing to the property Returns ManyToOneSingle<TClassType, TDataType> The many to many object Type Parameters TDataType The type of the data type. Map<TDataType>(Expression<Func<TClassType, TDataType?>>) Sets a property as a map type. Map<TClassType, TDataType> Map<TDataType>(Expression<Func<TClassType, TDataType?>> expression) where TDataType : class Parameters expression Expression<Func<TClassType, TDataType>> Expression pointing to the property Returns Map<TClassType, TDataType> The map object Type Parameters TDataType The type of the data type. Reference<TDataType>(Expression<Func<TClassType, TDataType>>) Sets a property as a reference type Reference<TClassType, TDataType> Reference<TDataType>(Expression<Func<TClassType, TDataType>> expression) Parameters expression Expression<Func<TClassType, TDataType>> Expression pointing to the property Returns Reference<TClassType, TDataType> the reference object Type Parameters TDataType Data type See Also IMapping"
  },
  "api/Inflatable.Interfaces.IMapping.html": {
    "href": "api/Inflatable.Interfaces.IMapping.html",
    "title": "Interface IMapping | Inflatable API Reference",
    "keywords": "Interface IMapping Namespace Inflatable.Interfaces Assembly Inflatable.dll Mapping interface public interface IMapping Properties AutoIDProperties Gets the automatic identifier properties. List<IAutoIDProperty> AutoIDProperties { get; } Property Value List<IAutoIDProperty> The automatic identifier properties. DatabaseConfigType Gets the type of the database configuration. Type DatabaseConfigType { get; } Property Value Type The type of the database configuration. IDProperties ID properties List<IIDProperty> IDProperties { get; } Property Value List<IIDProperty> The identifier properties. ManyToManyProperties Gets the many to many properties. List<IManyToManyProperty> ManyToManyProperties { get; } Property Value List<IManyToManyProperty> The many to many properties. ManyToOneProperties Gets the many to many properties. List<IManyToOneProperty> ManyToOneProperties { get; } Property Value List<IManyToOneProperty> The many to many properties. MapProperties Gets the map properties. List<IMapProperty> MapProperties { get; } Property Value List<IMapProperty> The map properties. Merge Gets a value indicating whether this IMapping should be merged. bool Merge { get; } Property Value bool true if merge this instance; otherwise, false. ObjectType The object type associated with the mapping Type ObjectType { get; } Property Value Type The type of the object. Order Order that the mappings are initialized int Order { get; } Property Value int The order. Prefix Prefix used for defining properties/table name string Prefix { get; } Property Value string The prefix. Queries Gets the queries. IQueries Queries { get; } Property Value IQueries The queries. ReferenceProperties Reference Properties list List<IProperty> ReferenceProperties { get; } Property Value List<IProperty> The reference properties. SchemaName Gets the name of the schema. string SchemaName { get; } Property Value string The name of the schema. Suffix Suffix used for defining properties/table name string Suffix { get; } Property Value string The suffix. TableName Table name string TableName { get; } Property Value string The name of the table. Methods AddAutoKey() Adds an automatic key. void AddAutoKey() ContainsProperty(string) Determines whether the mapping contains a property. bool ContainsProperty(string propertyName) Parameters propertyName string Name of the property. Returns bool true if the mapping contains the specified property; otherwise, false. Copy(IMapping) Copies the specified mapping. void Copy(IMapping mapping) Parameters mapping IMapping The mapping. CopyProperty(IIDProperty) Copies the property. void CopyProperty(IIDProperty prop) Parameters prop IIDProperty The property. CopyProperty(IManyToManyProperty) Copies the property. void CopyProperty(IManyToManyProperty prop) Parameters prop IManyToManyProperty The property. CopyProperty(IManyToOneProperty) Copies the property. void CopyProperty(IManyToOneProperty prop) Parameters prop IManyToOneProperty The property. CopyProperty(IMapProperty) Copies the property. void CopyProperty(IMapProperty prop) Parameters prop IMapProperty The property. CopyProperty(IProperty) Copies the property. void CopyProperty(IProperty prop) Parameters prop IProperty The property. GetColumnName(string) Gets the name of the column based on property name. string GetColumnName(string propertyName) Parameters propertyName string Name of the property. Returns string The column name. Reduce(IMapping, ILogger) Reduces this instance based on parent mapping properties. void Reduce(IMapping parentMapping, ILogger logger) Parameters parentMapping IMapping The parent mapping. logger ILogger The logger. Reduce(ILogger) Reduces this instance and removes duplicate properties void Reduce(ILogger logger) Parameters logger ILogger The logger. SetQuery(QueryType, string, CommandType, params IParameter[]) Sets the default query based on query type IMapping SetQuery(QueryType queryType, string queryString, CommandType databaseCommandType, params IParameter[] parameters) Parameters queryType QueryType Type of the query. queryString string The query string. databaseCommandType CommandType Type of the database command. parameters IParameter[] The parameters. Returns IMapping This Setup() Sets up the mapping void Setup()"
  },
  "api/Inflatable.Interfaces.IObject-1.html": {
    "href": "api/Inflatable.Interfaces.IObject-1.html",
    "title": "Interface IObject<IDType> | Inflatable API Reference",
    "keywords": "Interface IObject<IDType> Namespace Inflatable.Interfaces Assembly Inflatable.dll Object interface public interface IObject<IDType> Type Parameters IDType The type of the d type. Properties Active Is this item active? bool Active { get; set; } Property Value bool DateCreated Date created [Required] [Between(\"1/1/1900\", \"1/1/2100\", \"Date created is not valid\")] DateTime DateCreated { get; set; } Property Value DateTime DateModified Date last modified [Required] [Between(\"1/1/1900\", \"1/1/2100\", \"Date modified is not valid\")] DateTime DateModified { get; set; } Property Value DateTime ID ID IDType ID { get; set; } Property Value IDType"
  },
  "api/Inflatable.Interfaces.html": {
    "href": "api/Inflatable.Interfaces.html",
    "title": "Namespace Inflatable.Interfaces | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Interfaces Interfaces IDatabase Database configuration interface IMapping Mapping interface IMapping<TClassType> Class mapping interface IObject<IDType> Object interface"
  },
  "api/Inflatable.LinqExpression.HelperClasses.Evaluator.html": {
    "href": "api/Inflatable.LinqExpression.HelperClasses.Evaluator.html",
    "title": "Class Evaluator | Inflatable API Reference",
    "keywords": "Class Evaluator Namespace Inflatable.LinqExpression.HelperClasses Assembly Inflatable.dll Evaluator static class public static class Evaluator Inheritance object Evaluator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PartialEval(Expression) Partial the eval. public static Expression PartialEval(Expression expression) Parameters expression Expression The expression. Returns Expression The resulting expression PartialEval(Expression, Func<Expression, bool>) Partial eval. public static Expression PartialEval(Expression expression, Func<Expression, bool> fnCanBeEvaluated) Parameters expression Expression The expression. fnCanBeEvaluated Func<Expression, bool> The function can be evaluated. Returns Expression The resulting expression"
  },
  "api/Inflatable.LinqExpression.HelperClasses.Nominator.html": {
    "href": "api/Inflatable.LinqExpression.HelperClasses.Nominator.html",
    "title": "Class Nominator | Inflatable API Reference",
    "keywords": "Class Nominator Namespace Inflatable.LinqExpression.HelperClasses Assembly Inflatable.dll Nominator expression visitor public class Nominator : ExpressionVisitor Inheritance object ExpressionVisitor Nominator Inherited Members ExpressionVisitor.Visit(ReadOnlyCollection<Expression>) ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string) ExpressionVisitor.VisitAndConvert<T>(T, string) ExpressionVisitor.VisitBinary(BinaryExpression) ExpressionVisitor.VisitBlock(BlockExpression) ExpressionVisitor.VisitCatchBlock(CatchBlock) ExpressionVisitor.VisitConditional(ConditionalExpression) ExpressionVisitor.VisitConstant(ConstantExpression) ExpressionVisitor.VisitDebugInfo(DebugInfoExpression) ExpressionVisitor.VisitDefault(DefaultExpression) ExpressionVisitor.VisitDynamic(DynamicExpression) ExpressionVisitor.VisitElementInit(ElementInit) ExpressionVisitor.VisitExtension(Expression) ExpressionVisitor.VisitGoto(GotoExpression) ExpressionVisitor.VisitIndex(IndexExpression) ExpressionVisitor.VisitInvocation(InvocationExpression) ExpressionVisitor.VisitLabel(LabelExpression) ExpressionVisitor.VisitLabelTarget(LabelTarget) ExpressionVisitor.VisitLambda<T>(Expression<T>) ExpressionVisitor.VisitListInit(ListInitExpression) ExpressionVisitor.VisitLoop(LoopExpression) ExpressionVisitor.VisitMember(MemberExpression) ExpressionVisitor.VisitMemberAssignment(MemberAssignment) ExpressionVisitor.VisitMemberBinding(MemberBinding) ExpressionVisitor.VisitMemberInit(MemberInitExpression) ExpressionVisitor.VisitMemberListBinding(MemberListBinding) ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding) ExpressionVisitor.VisitMethodCall(MethodCallExpression) ExpressionVisitor.VisitNew(NewExpression) ExpressionVisitor.VisitNewArray(NewArrayExpression) ExpressionVisitor.VisitParameter(ParameterExpression) ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression) ExpressionVisitor.VisitSwitch(SwitchExpression) ExpressionVisitor.VisitSwitchCase(SwitchCase) ExpressionVisitor.VisitTry(TryExpression) ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression) ExpressionVisitor.VisitUnary(UnaryExpression) ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Nominator(Func<Expression, bool>) Initializes a new instance of the Nominator class. public Nominator(Func<Expression, bool> functionCanBeEvaluated) Parameters functionCanBeEvaluated Func<Expression, bool> The function can be evaluated. Methods Nominate(Expression) Nominates the specified expression. public HashSet<Expression> Nominate(Expression expression) Parameters expression Expression The expression. Returns HashSet<Expression> The result Visit(Expression) Dispatches the expression to one of the more specialized visit methods in this class. public override Expression Visit(Expression node) Parameters node Expression The expression to visit. Returns Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. See Also ExpressionVisitor"
  },
  "api/Inflatable.LinqExpression.HelperClasses.SubtreeEvaluator.html": {
    "href": "api/Inflatable.LinqExpression.HelperClasses.SubtreeEvaluator.html",
    "title": "Class SubtreeEvaluator | Inflatable API Reference",
    "keywords": "Class SubtreeEvaluator Namespace Inflatable.LinqExpression.HelperClasses Assembly Inflatable.dll Subtree evaluator public class SubtreeEvaluator : ExpressionVisitor Inheritance object ExpressionVisitor SubtreeEvaluator Inherited Members ExpressionVisitor.Visit(ReadOnlyCollection<Expression>) ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string) ExpressionVisitor.VisitAndConvert<T>(T, string) ExpressionVisitor.VisitBinary(BinaryExpression) ExpressionVisitor.VisitBlock(BlockExpression) ExpressionVisitor.VisitCatchBlock(CatchBlock) ExpressionVisitor.VisitConditional(ConditionalExpression) ExpressionVisitor.VisitConstant(ConstantExpression) ExpressionVisitor.VisitDebugInfo(DebugInfoExpression) ExpressionVisitor.VisitDefault(DefaultExpression) ExpressionVisitor.VisitDynamic(DynamicExpression) ExpressionVisitor.VisitElementInit(ElementInit) ExpressionVisitor.VisitExtension(Expression) ExpressionVisitor.VisitGoto(GotoExpression) ExpressionVisitor.VisitIndex(IndexExpression) ExpressionVisitor.VisitInvocation(InvocationExpression) ExpressionVisitor.VisitLabel(LabelExpression) ExpressionVisitor.VisitLabelTarget(LabelTarget) ExpressionVisitor.VisitLambda<T>(Expression<T>) ExpressionVisitor.VisitListInit(ListInitExpression) ExpressionVisitor.VisitLoop(LoopExpression) ExpressionVisitor.VisitMember(MemberExpression) ExpressionVisitor.VisitMemberAssignment(MemberAssignment) ExpressionVisitor.VisitMemberBinding(MemberBinding) ExpressionVisitor.VisitMemberInit(MemberInitExpression) ExpressionVisitor.VisitMemberListBinding(MemberListBinding) ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding) ExpressionVisitor.VisitMethodCall(MethodCallExpression) ExpressionVisitor.VisitNew(NewExpression) ExpressionVisitor.VisitNewArray(NewArrayExpression) ExpressionVisitor.VisitParameter(ParameterExpression) ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression) ExpressionVisitor.VisitSwitch(SwitchExpression) ExpressionVisitor.VisitSwitchCase(SwitchCase) ExpressionVisitor.VisitTry(TryExpression) ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression) ExpressionVisitor.VisitUnary(UnaryExpression) ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SubtreeEvaluator(HashSet<Expression>) Initializes a new instance of the SubtreeEvaluator class. public SubtreeEvaluator(HashSet<Expression> candidates) Parameters candidates HashSet<Expression> The candidates. Methods Eval(Expression) Evals the specified exp. public Expression Eval(Expression expression) Parameters expression Expression The exp. Returns Expression The resulting expression. Visit(Expression) Dispatches the expression to one of the more specialized visit methods in this class. public override Expression Visit(Expression node) Parameters node Expression The expression to visit. Returns Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. See Also ExpressionVisitor"
  },
  "api/Inflatable.LinqExpression.HelperClasses.html": {
    "href": "api/Inflatable.LinqExpression.HelperClasses.html",
    "title": "Namespace Inflatable.LinqExpression.HelperClasses | Inflatable API Reference",
    "keywords": "Namespace Inflatable.LinqExpression.HelperClasses Classes Evaluator Evaluator static class Nominator Nominator expression visitor SubtreeEvaluator Subtree evaluator"
  },
  "api/Inflatable.LinqExpression.Interfaces.IQueryData.html": {
    "href": "api/Inflatable.LinqExpression.Interfaces.IQueryData.html",
    "title": "Interface IQueryData | Inflatable API Reference",
    "keywords": "Interface IQueryData Namespace Inflatable.LinqExpression.Interfaces Assembly Inflatable.dll Query data interface public interface IQueryData"
  },
  "api/Inflatable.LinqExpression.Interfaces.html": {
    "href": "api/Inflatable.LinqExpression.Interfaces.html",
    "title": "Namespace Inflatable.LinqExpression.Interfaces | Inflatable API Reference",
    "keywords": "Namespace Inflatable.LinqExpression.Interfaces Interfaces IQueryData Query data interface"
  },
  "api/Inflatable.LinqExpression.OrderBy.Enums.Direction.html": {
    "href": "api/Inflatable.LinqExpression.OrderBy.Enums.Direction.html",
    "title": "Enum Direction | Inflatable API Reference",
    "keywords": "Enum Direction Namespace Inflatable.LinqExpression.OrderBy.Enums Assembly Inflatable.dll Direction of the ordering public enum Direction Fields Ascending = 0 The ascending Descending = 1 The descending"
  },
  "api/Inflatable.LinqExpression.OrderBy.Enums.html": {
    "href": "api/Inflatable.LinqExpression.OrderBy.Enums.html",
    "title": "Namespace Inflatable.LinqExpression.OrderBy.Enums | Inflatable API Reference",
    "keywords": "Namespace Inflatable.LinqExpression.OrderBy.Enums Enums Direction Direction of the ordering"
  },
  "api/Inflatable.LinqExpression.OrderBy.OrderByClause.html": {
    "href": "api/Inflatable.LinqExpression.OrderBy.OrderByClause.html",
    "title": "Class OrderByClause | Inflatable API Reference",
    "keywords": "Class OrderByClause Namespace Inflatable.LinqExpression.OrderBy Assembly Inflatable.dll Order by clause public class OrderByClause Inheritance object OrderByClause Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OrderByClause(int, PropertyInfo, Direction) Initializes a new instance of the OrderByClause class. public OrderByClause(int order, PropertyInfo property, Direction direction) Parameters order int The order. property PropertyInfo The property. direction Direction The direction. Properties Direction Gets the direction. public Direction Direction { get; } Property Value Direction The direction. Order Gets the order. public int Order { get; } Property Value int The order. Property Gets the property. public PropertyInfo Property { get; } Property Value PropertyInfo The property. Methods ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance."
  },
  "api/Inflatable.LinqExpression.OrderBy.html": {
    "href": "api/Inflatable.LinqExpression.OrderBy.html",
    "title": "Namespace Inflatable.LinqExpression.OrderBy | Inflatable API Reference",
    "keywords": "Namespace Inflatable.LinqExpression.OrderBy Classes OrderByClause Order by clause"
  },
  "api/Inflatable.LinqExpression.QueryData-1.html": {
    "href": "api/Inflatable.LinqExpression.QueryData-1.html",
    "title": "Class QueryData<TObject> | Inflatable API Reference",
    "keywords": "Class QueryData<TObject> Namespace Inflatable.LinqExpression Assembly Inflatable.dll Query data holder public class QueryData<TObject> : IQueryData where TObject : class Type Parameters TObject The type of the object. Inheritance object QueryData<TObject> Implements IQueryData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors QueryData(IMappingSource) Initializes a new instance of the QueryData<TObject> class. public QueryData(IMappingSource source) Parameters source IMappingSource The source. Exceptions ArgumentNullException source Properties Count Gets or sets a value indicating whether this QueryData<TObject> is count. public bool Count { get; set; } Property Value bool true if count; otherwise, false. Distinct Gets or sets a value indicating whether this QueryData<TObject> is distinct. public bool Distinct { get; set; } Property Value bool true if distinct; otherwise, false. ObjectType Gets the type of the object. public Type ObjectType { get; } Property Value Type The type of the object. OrderByValues Gets the order by values. public IList<OrderByClause> OrderByValues { get; } Property Value IList<OrderByClause> The order by values. Parameters Gets the parameters. public IList<IParameter> Parameters { get; } Property Value IList<IParameter> The parameters. SelectValues Gets the select values. public IList<PropertyInfo> SelectValues { get; } Property Value IList<PropertyInfo> The select values. Skip Gets or sets the skip. public int Skip { get; set; } Property Value int The skip. Source Gets the source. public IMappingSource Source { get; } Property Value IMappingSource The source. Top Gets or sets the top. public int Top { get; set; } Property Value int The top. WhereClause Gets the where clause. public WhereClause<TObject> WhereClause { get; } Property Value WhereClause<TObject> The where clause. Methods ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance."
  },
  "api/Inflatable.LinqExpression.QueryTranslator-1.html": {
    "href": "api/Inflatable.LinqExpression.QueryTranslator-1.html",
    "title": "Class QueryTranslator<TObject> | Inflatable API Reference",
    "keywords": "Class QueryTranslator<TObject> Namespace Inflatable.LinqExpression Assembly Inflatable.dll Query translator public class QueryTranslator<TObject> : ExpressionVisitor where TObject : class Type Parameters TObject The type of the object. Inheritance object ExpressionVisitor QueryTranslator<TObject> Inherited Members ExpressionVisitor.Visit(ReadOnlyCollection<Expression>) ExpressionVisitor.Visit(Expression) ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string) ExpressionVisitor.VisitAndConvert<T>(T, string) ExpressionVisitor.VisitBinary(BinaryExpression) ExpressionVisitor.VisitBlock(BlockExpression) ExpressionVisitor.VisitCatchBlock(CatchBlock) ExpressionVisitor.VisitConditional(ConditionalExpression) ExpressionVisitor.VisitConstant(ConstantExpression) ExpressionVisitor.VisitDebugInfo(DebugInfoExpression) ExpressionVisitor.VisitDefault(DefaultExpression) ExpressionVisitor.VisitDynamic(DynamicExpression) ExpressionVisitor.VisitElementInit(ElementInit) ExpressionVisitor.VisitExtension(Expression) ExpressionVisitor.VisitGoto(GotoExpression) ExpressionVisitor.VisitIndex(IndexExpression) ExpressionVisitor.VisitInvocation(InvocationExpression) ExpressionVisitor.VisitLabel(LabelExpression) ExpressionVisitor.VisitLabelTarget(LabelTarget) ExpressionVisitor.VisitLambda<T>(Expression<T>) ExpressionVisitor.VisitListInit(ListInitExpression) ExpressionVisitor.VisitLoop(LoopExpression) ExpressionVisitor.VisitMember(MemberExpression) ExpressionVisitor.VisitMemberAssignment(MemberAssignment) ExpressionVisitor.VisitMemberBinding(MemberBinding) ExpressionVisitor.VisitMemberInit(MemberInitExpression) ExpressionVisitor.VisitMemberListBinding(MemberListBinding) ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding) ExpressionVisitor.VisitNew(NewExpression) ExpressionVisitor.VisitNewArray(NewArrayExpression) ExpressionVisitor.VisitParameter(ParameterExpression) ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression) ExpressionVisitor.VisitSwitch(SwitchExpression) ExpressionVisitor.VisitSwitchCase(SwitchCase) ExpressionVisitor.VisitTry(TryExpression) ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression) ExpressionVisitor.VisitUnary(UnaryExpression) ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QueryTranslator(MappingManager, QueryProviderManager) Initializes a new instance of the QueryTranslator<TObject> class. public QueryTranslator(MappingManager mappingManager, QueryProviderManager queryProviderManager) Parameters mappingManager MappingManager The mapping manager. queryProviderManager QueryProviderManager The query provider manager. Exceptions ArgumentNullException mappingManager or queryProviderManager Properties MappingManager Gets the mapping manager. public MappingManager MappingManager { get; } Property Value MappingManager The mapping manager. QueryProviderManager Gets the query provider manager. public QueryProviderManager QueryProviderManager { get; } Property Value QueryProviderManager The query provider manager. Methods Translate(Expression) Translates the specified expression. public IDictionary<IMappingSource, QueryData<TObject>> Translate(Expression expression) Parameters expression Expression The expression. Returns IDictionary<IMappingSource, QueryData<TObject>> The resulting query string. VisitMethodCall(MethodCallExpression) Visits the children of the MethodCallExpression. protected override Expression? VisitMethodCall(MethodCallExpression node) Parameters node MethodCallExpression The expression to visit. Returns Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. Exceptions NotSupportedException See Also ExpressionVisitor ExpressionVisitor"
  },
  "api/Inflatable.LinqExpression.Select.ColumnProjector.html": {
    "href": "api/Inflatable.LinqExpression.Select.ColumnProjector.html",
    "title": "Class ColumnProjector | Inflatable API Reference",
    "keywords": "Class ColumnProjector Namespace Inflatable.LinqExpression.Select Assembly Inflatable.dll Finds properties from a select statement. public class ColumnProjector : ExpressionVisitor Inheritance object ExpressionVisitor ColumnProjector Inherited Members ExpressionVisitor.Visit(ReadOnlyCollection<Expression>) ExpressionVisitor.Visit(Expression) ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string) ExpressionVisitor.VisitAndConvert<T>(T, string) ExpressionVisitor.VisitBinary(BinaryExpression) ExpressionVisitor.VisitBlock(BlockExpression) ExpressionVisitor.VisitCatchBlock(CatchBlock) ExpressionVisitor.VisitConditional(ConditionalExpression) ExpressionVisitor.VisitConstant(ConstantExpression) ExpressionVisitor.VisitDebugInfo(DebugInfoExpression) ExpressionVisitor.VisitDefault(DefaultExpression) ExpressionVisitor.VisitDynamic(DynamicExpression) ExpressionVisitor.VisitElementInit(ElementInit) ExpressionVisitor.VisitExtension(Expression) ExpressionVisitor.VisitGoto(GotoExpression) ExpressionVisitor.VisitIndex(IndexExpression) ExpressionVisitor.VisitInvocation(InvocationExpression) ExpressionVisitor.VisitLabel(LabelExpression) ExpressionVisitor.VisitLabelTarget(LabelTarget) ExpressionVisitor.VisitLambda<T>(Expression<T>) ExpressionVisitor.VisitListInit(ListInitExpression) ExpressionVisitor.VisitLoop(LoopExpression) ExpressionVisitor.VisitMemberAssignment(MemberAssignment) ExpressionVisitor.VisitMemberBinding(MemberBinding) ExpressionVisitor.VisitMemberInit(MemberInitExpression) ExpressionVisitor.VisitMemberListBinding(MemberListBinding) ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding) ExpressionVisitor.VisitMethodCall(MethodCallExpression) ExpressionVisitor.VisitNew(NewExpression) ExpressionVisitor.VisitNewArray(NewArrayExpression) ExpressionVisitor.VisitParameter(ParameterExpression) ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression) ExpressionVisitor.VisitSwitch(SwitchExpression) ExpressionVisitor.VisitSwitchCase(SwitchCase) ExpressionVisitor.VisitTry(TryExpression) ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression) ExpressionVisitor.VisitUnary(UnaryExpression) ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ColumnProjector() Initializes a new instance of the ColumnProjector class. public ColumnProjector() Methods ProjectColumns(Expression) Projects the columns to the desired properties. public IEnumerable<PropertyInfo> ProjectColumns(Expression expression) Parameters expression Expression The expression. Returns IEnumerable<PropertyInfo> The resulting properties VisitMember(MemberExpression) Visits the children of the MemberExpression. protected override Expression VisitMember(MemberExpression node) Parameters node MemberExpression The expression to visit. Returns Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. See Also ExpressionVisitor"
  },
  "api/Inflatable.LinqExpression.Select.html": {
    "href": "api/Inflatable.LinqExpression.Select.html",
    "title": "Namespace Inflatable.LinqExpression.Select | Inflatable API Reference",
    "keywords": "Namespace Inflatable.LinqExpression.Select Classes ColumnProjector Finds properties from a select statement."
  },
  "api/Inflatable.LinqExpression.WhereClauses.BinaryOperator.html": {
    "href": "api/Inflatable.LinqExpression.WhereClauses.BinaryOperator.html",
    "title": "Class BinaryOperator | Inflatable API Reference",
    "keywords": "Class BinaryOperator Namespace Inflatable.LinqExpression.WhereClauses Assembly Inflatable.dll Binary operator class public class BinaryOperator : IOperator Inheritance object BinaryOperator Implements IOperator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors BinaryOperator(IOperator, IOperator, ExpressionType) Initializes a new instance of the BinaryOperator class. public BinaryOperator(IOperator left, IOperator right, ExpressionType operatorType) Parameters left IOperator The left. right IOperator The right. operatorType ExpressionType Type of the operator. Exceptions ArgumentNullException left or right Properties IsNull Gets a value indicating whether this instance is null. public bool IsNull { get; } Property Value bool true if this instance is null; otherwise, false. Left Gets the left. public IOperator Left { get; } Property Value IOperator The left. Operator Gets the operator. public ExpressionType Operator { get; } Property Value ExpressionType The operator. Parent Gets or sets the parent. public IOperator? Parent { get; set; } Property Value IOperator The parent. Right Gets the right. public IOperator Right { get; } Property Value IOperator The right. TypeCode Gets the type code. public Type TypeCode { get; } Property Value Type The type code. Methods Copy() Copies this instance. public IOperator Copy() Returns IOperator A copy of this instance. GetParameters() Gets the parameters associated with the operator. public List<IParameter> GetParameters() Returns List<IParameter> A list of parameters associated with the operator. LogicallyNegate() Does a logical negation of the operator. public IOperator LogicallyNegate() Returns IOperator The resulting operator. Optimize(IMappingSource) Optimizes the operator based on the mapping source. public IOperator Optimize(IMappingSource mappingSource) Parameters mappingSource IMappingSource The mapping source. Returns IOperator SetColumnNames(IMappingSource, IMapping) Sets the column names. public void SetColumnNames(IMappingSource mappingSource, IMapping mapping) Parameters mappingSource IMappingSource The mapping source. mapping IMapping The mapping. ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance. See Also IOperator"
  },
  "api/Inflatable.LinqExpression.WhereClauses.Constant.html": {
    "href": "api/Inflatable.LinqExpression.WhereClauses.Constant.html",
    "title": "Class Constant | Inflatable API Reference",
    "keywords": "Class Constant Namespace Inflatable.LinqExpression.WhereClauses Assembly Inflatable.dll Constant operator public class Constant : IOperator Inheritance object Constant Implements IOperator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Constant(object, int) Initializes a new instance of the Constant class. public Constant(object value, int count) Parameters value object The value. count int The count. Properties Count Gets the count. public int Count { get; } Property Value int The count. IsNull Gets a value indicating whether this instance is null. public bool IsNull { get; } Property Value bool true if this instance is null; otherwise, false. Parent Gets or sets the parent. public IOperator? Parent { get; set; } Property Value IOperator The parent. TypeCode Gets the type code. public Type TypeCode { get; } Property Value Type The type code. Value Gets the value. public object Value { get; set; } Property Value object The value. Methods Copy() Copies this instance. public IOperator Copy() Returns IOperator A copy of this instance. GetParameters() Gets the parameters associated with the operator. public List<IParameter> GetParameters() Returns List<IParameter> A list of parameters associated with the operator. LogicallyNegate() Does a logical negation of the operator. public IOperator LogicallyNegate() Returns IOperator The resulting operator. Optimize(IMappingSource) Optimizes the operator based on the mapping source. public IOperator Optimize(IMappingSource mappingSource) Parameters mappingSource IMappingSource The mapping source. Returns IOperator The result SetColumnNames(IMappingSource, IMapping) Sets the column names. public void SetColumnNames(IMappingSource mappingSource, IMapping mapping) Parameters mappingSource IMappingSource The mapping source. mapping IMapping The mapping. ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance. See Also IOperator"
  },
  "api/Inflatable.LinqExpression.WhereClauses.EmptyClause.html": {
    "href": "api/Inflatable.LinqExpression.WhereClauses.EmptyClause.html",
    "title": "Class EmptyClause | Inflatable API Reference",
    "keywords": "Class EmptyClause Namespace Inflatable.LinqExpression.WhereClauses Assembly Inflatable.dll Empty clause public class EmptyClause : IOperator Inheritance object EmptyClause Implements IOperator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors EmptyClause() Initializes a new instance of the EmptyClause class. public EmptyClause() Properties IsNull Gets a value indicating whether this instance is null. public bool IsNull { get; } Property Value bool true if this instance is null; otherwise, false. Parent Gets or sets the parent. public IOperator? Parent { get; set; } Property Value IOperator The parent. TypeCode Gets the type code. public Type TypeCode { get; } Property Value Type The type code. Methods Copy() Copies this instance. public IOperator Copy() Returns IOperator A copy of this instance. GetParameters() Gets the parameters associated with the operator. public List<IParameter> GetParameters() Returns List<IParameter> A list of parameters associated with the operator. LogicallyNegate() Does a logical negation of the operator. public IOperator LogicallyNegate() Returns IOperator The resulting operator. Optimize(IMappingSource) Optimizes the operator based on the mapping source. public IOperator Optimize(IMappingSource mappingSource) Parameters mappingSource IMappingSource The mapping source. Returns IOperator SetColumnNames(IMappingSource, IMapping) Sets the column names. public void SetColumnNames(IMappingSource mappingSource, IMapping mapping) Parameters mappingSource IMappingSource The mapping source. mapping IMapping The mapping. ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance. See Also IOperator"
  },
  "api/Inflatable.LinqExpression.WhereClauses.Interfaces.IOperator.html": {
    "href": "api/Inflatable.LinqExpression.WhereClauses.Interfaces.IOperator.html",
    "title": "Interface IOperator | Inflatable API Reference",
    "keywords": "Interface IOperator Namespace Inflatable.LinqExpression.WhereClauses.Interfaces Assembly Inflatable.dll Operator interface public interface IOperator Properties IsNull Gets a value indicating whether this instance is null. bool IsNull { get; } Property Value bool true if this instance is null; otherwise, false. Parent Gets or sets the parent. IOperator? Parent { get; set; } Property Value IOperator The parent. TypeCode Gets the type code. Type TypeCode { get; } Property Value Type The type code. Methods Copy() Copies this instance. IOperator Copy() Returns IOperator A copy of this instance. GetParameters() Gets the parameters associated with the operator. List<IParameter> GetParameters() Returns List<IParameter> A list of parameters associated with the operator. LogicallyNegate() Does a logical negation of the operator. IOperator LogicallyNegate() Returns IOperator The resulting operator. Optimize(IMappingSource) Optimizes the operator based on the mapping source. IOperator? Optimize(IMappingSource mappingSource) Parameters mappingSource IMappingSource The mapping source. Returns IOperator SetColumnNames(IMappingSource, IMapping) Sets the column names. void SetColumnNames(IMappingSource mappingSource, IMapping mapping) Parameters mappingSource IMappingSource The mapping source. mapping IMapping The mapping."
  },
  "api/Inflatable.LinqExpression.WhereClauses.Interfaces.html": {
    "href": "api/Inflatable.LinqExpression.WhereClauses.Interfaces.html",
    "title": "Namespace Inflatable.LinqExpression.WhereClauses.Interfaces | Inflatable API Reference",
    "keywords": "Namespace Inflatable.LinqExpression.WhereClauses.Interfaces Interfaces IOperator Operator interface"
  },
  "api/Inflatable.LinqExpression.WhereClauses.LikeOperator.html": {
    "href": "api/Inflatable.LinqExpression.WhereClauses.LikeOperator.html",
    "title": "Class LikeOperator | Inflatable API Reference",
    "keywords": "Class LikeOperator Namespace Inflatable.LinqExpression.WhereClauses Assembly Inflatable.dll Like operator public class LikeOperator : IOperator Inheritance object LikeOperator Implements IOperator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors LikeOperator(IOperator, IOperator, string) Initializes a new instance of the LikeOperator class. public LikeOperator(IOperator property, IOperator value, string methodType) Parameters property IOperator The property. value IOperator The value. methodType string Type of the method. Exceptions ArgumentNullException value or property Properties IsNull Gets a value indicating whether this instance is null. public bool IsNull { get; } Property Value bool true if this instance is null; otherwise, false. MethodType Gets the type of the method. public string MethodType { get; } Property Value string The type of the method. Parent Gets or sets the parent. public IOperator? Parent { get; set; } Property Value IOperator The parent. Property Gets the property. public IOperator? Property { get; } Property Value IOperator The property. TypeCode Gets the type code. public Type TypeCode { get; } Property Value Type The type code. Value Gets the value. public IOperator? Value { get; } Property Value IOperator The value. Methods Copy() Copies this instance. public IOperator Copy() Returns IOperator A copy of this instance. GetParameters() Gets the parameters associated with the operator. public List<IParameter> GetParameters() Returns List<IParameter> A list of parameters associated with the operator. LogicallyNegate() Does a logical negation of the operator. public IOperator LogicallyNegate() Returns IOperator The resulting operator. Optimize(IMappingSource) Optimizes the operator based on the mapping source. public IOperator? Optimize(IMappingSource mappingSource) Parameters mappingSource IMappingSource The mapping source. Returns IOperator SetColumnNames(IMappingSource, IMapping) Sets the column names. public void SetColumnNames(IMappingSource mappingSource, IMapping mapping) Parameters mappingSource IMappingSource The mapping source. mapping IMapping The mapping. ToString() Converts to string. public override string ToString() Returns string A string that represents this instance. See Also IOperator"
  },
  "api/Inflatable.LinqExpression.WhereClauses.Property-1.html": {
    "href": "api/Inflatable.LinqExpression.WhereClauses.Property-1.html",
    "title": "Class Property<TObject> | Inflatable API Reference",
    "keywords": "Class Property<TObject> Namespace Inflatable.LinqExpression.WhereClauses Assembly Inflatable.dll Property operator public class Property<TObject> : IOperator Type Parameters TObject The type of the object. Inheritance object Property<TObject> Implements IOperator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Property(PropertyInfo, int) Initializes a new instance of the class. public Property(PropertyInfo property, int count) Parameters property PropertyInfo The property. count int The count. Exceptions ArgumentNullException property Properties Count Gets the count. public int Count { get; } Property Value int The count. InternalProperty Gets the property. public PropertyInfo InternalProperty { get; } Property Value PropertyInfo The property. IsNull Gets a value indicating whether this instance is null. public bool IsNull { get; } Property Value bool true if this instance is null; otherwise, false. Parent Gets or sets the parent. public IOperator? Parent { get; set; } Property Value IOperator The parent. TypeCode Gets the type code. public Type TypeCode { get; } Property Value Type The type code. Methods Copy() Copies this instance. public IOperator Copy() Returns IOperator A copy of this instance. GetParameters() Gets the parameters associated with the operator. public List<IParameter> GetParameters() Returns List<IParameter> A list of parameters associated with the operator. LogicallyNegate() Does a logical negation of the operator. public IOperator LogicallyNegate() Returns IOperator The resulting operator. Optimize(IMappingSource) Optimizes the operator based on the mapping source. public IOperator Optimize(IMappingSource mappingSource) Parameters mappingSource IMappingSource The mapping source. Returns IOperator The result SetColumnNames(IMappingSource, IMapping) Sets the column names. public void SetColumnNames(IMappingSource mappingSource, IMapping mapping) Parameters mappingSource IMappingSource The mapping source. mapping IMapping The mapping. ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance. See Also IOperator IOperator"
  },
  "api/Inflatable.LinqExpression.WhereClauses.UnaryOperator.html": {
    "href": "api/Inflatable.LinqExpression.WhereClauses.UnaryOperator.html",
    "title": "Class UnaryOperator | Inflatable API Reference",
    "keywords": "Class UnaryOperator Namespace Inflatable.LinqExpression.WhereClauses Assembly Inflatable.dll Unary operator class public class UnaryOperator : IOperator Inheritance object UnaryOperator Implements IOperator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors UnaryOperator(IOperator, ExpressionType, Type) Initializes a new instance of the UnaryOperator class. public UnaryOperator(IOperator internalOperator, ExpressionType operatorType, Type nodeType) Parameters internalOperator IOperator The iternal operator. operatorType ExpressionType Type of the operator. nodeType Type Type of the node. Exceptions ArgumentNullException iternalOperator Properties InternalOperator Gets the iternal operator. public IOperator InternalOperator { get; } Property Value IOperator The iternal operator. IsNull Gets a value indicating whether this instance is null. public bool IsNull { get; } Property Value bool true if this instance is null; otherwise, false. Operator Gets the operator. public ExpressionType Operator { get; } Property Value ExpressionType The operator. Parent Gets or sets the parent. public IOperator? Parent { get; set; } Property Value IOperator The parent. TypeCode Gets the type code. public Type TypeCode { get; } Property Value Type The type code. Methods Copy() Copies this instance. public IOperator Copy() Returns IOperator A copy of this instance. GetParameters() Gets the parameters associated with the operator. public List<IParameter> GetParameters() Returns List<IParameter> A list of parameters associated with the operator. LogicallyNegate() Does a logical negation of the operator. public IOperator LogicallyNegate() Returns IOperator The resulting operator. Optimize(IMappingSource) Optimizes the operator based on the mapping source. public IOperator Optimize(IMappingSource mappingSource) Parameters mappingSource IMappingSource The mapping source. Returns IOperator SetColumnNames(IMappingSource, IMapping) Sets the column names. public void SetColumnNames(IMappingSource mappingSource, IMapping mapping) Parameters mappingSource IMappingSource The mapping source. mapping IMapping The mapping. ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance. See Also IOperator"
  },
  "api/Inflatable.LinqExpression.WhereClauses.WhereClause-1.html": {
    "href": "api/Inflatable.LinqExpression.WhereClauses.WhereClause-1.html",
    "title": "Class WhereClause<TObject> | Inflatable API Reference",
    "keywords": "Class WhereClause<TObject> Namespace Inflatable.LinqExpression.WhereClauses Assembly Inflatable.dll Where operator public class WhereClause<TObject> : IOperator where TObject : class Type Parameters TObject The type of the object. Inheritance object WhereClause<TObject> Implements IOperator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors WhereClause(IOperator?) Initializes a new instance of the WhereClause<TObject> class. public WhereClause(IOperator? internalOperator) Parameters internalOperator IOperator The internal operator. Properties InternalOperator Gets the internal operator. public IOperator? InternalOperator { get; } Property Value IOperator The internal operator. IsNull Gets a value indicating whether this instance is null. public bool IsNull { get; } Property Value bool true if this instance is null; otherwise, false. ObjectType Gets the type of the object. public Type ObjectType { get; } Property Value Type The type of the object. Parent Gets or sets the parent. public IOperator? Parent { get; set; } Property Value IOperator The parent. TypeCode Gets the type code. public Type TypeCode { get; } Property Value Type The type code. Methods Combine(IOperator) Combines the specified clauses. public WhereClause<TObject> Combine(IOperator clause) Parameters clause IOperator The clause to combine with this one. Returns WhereClause<TObject> The resulting where clause. Copy() Copies this instance. public IOperator Copy() Returns IOperator A copy of this instance. GetParameters() Gets the parameters associated with the operator. public List<IParameter> GetParameters() Returns List<IParameter> A list of parameters associated with the operator. LogicallyNegate() Does a logical negation of the operator. public IOperator LogicallyNegate() Returns IOperator The resulting operator. Optimize(IMappingSource) Optimizes the operator based on the mapping source. public IOperator Optimize(IMappingSource mappingSource) Parameters mappingSource IMappingSource The mapping source. Returns IOperator SetColumnNames(IMappingSource, IMapping) Sets the column names. public void SetColumnNames(IMappingSource mappingSource, IMapping mapping) Parameters mappingSource IMappingSource The mapping source. mapping IMapping The mapping. ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance. See Also IOperator"
  },
  "api/Inflatable.LinqExpression.WhereClauses.WhereVisitor-1.html": {
    "href": "api/Inflatable.LinqExpression.WhereClauses.WhereVisitor-1.html",
    "title": "Class WhereVisitor<TObject> | Inflatable API Reference",
    "keywords": "Class WhereVisitor<TObject> Namespace Inflatable.LinqExpression.WhereClauses Assembly Inflatable.dll Where visitor public class WhereVisitor<TObject> : ExpressionVisitor Type Parameters TObject The type of the object. Inheritance object ExpressionVisitor WhereVisitor<TObject> Inherited Members ExpressionVisitor.Visit(ReadOnlyCollection<Expression>) ExpressionVisitor.Visit(Expression) ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string) ExpressionVisitor.VisitAndConvert<T>(T, string) ExpressionVisitor.VisitBlock(BlockExpression) ExpressionVisitor.VisitCatchBlock(CatchBlock) ExpressionVisitor.VisitConditional(ConditionalExpression) ExpressionVisitor.VisitDebugInfo(DebugInfoExpression) ExpressionVisitor.VisitDefault(DefaultExpression) ExpressionVisitor.VisitDynamic(DynamicExpression) ExpressionVisitor.VisitElementInit(ElementInit) ExpressionVisitor.VisitExtension(Expression) ExpressionVisitor.VisitGoto(GotoExpression) ExpressionVisitor.VisitIndex(IndexExpression) ExpressionVisitor.VisitInvocation(InvocationExpression) ExpressionVisitor.VisitLabel(LabelExpression) ExpressionVisitor.VisitLabelTarget(LabelTarget) ExpressionVisitor.VisitLambda<T>(Expression<T>) ExpressionVisitor.VisitListInit(ListInitExpression) ExpressionVisitor.VisitLoop(LoopExpression) ExpressionVisitor.VisitMemberAssignment(MemberAssignment) ExpressionVisitor.VisitMemberBinding(MemberBinding) ExpressionVisitor.VisitMemberInit(MemberInitExpression) ExpressionVisitor.VisitMemberListBinding(MemberListBinding) ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding) ExpressionVisitor.VisitNew(NewExpression) ExpressionVisitor.VisitNewArray(NewArrayExpression) ExpressionVisitor.VisitParameter(ParameterExpression) ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression) ExpressionVisitor.VisitSwitch(SwitchExpression) ExpressionVisitor.VisitSwitchCase(SwitchCase) ExpressionVisitor.VisitTry(TryExpression) ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression) ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WhereVisitor(int) Initializes a new instance of the class. public WhereVisitor(int count) Parameters count int The count. Properties Count Gets the count. public int Count { get; } Property Value int The count. Methods VisitBinary(BinaryExpression) Visits the children of the BinaryExpression. protected override Expression? VisitBinary(BinaryExpression node) Parameters node BinaryExpression The expression to visit. Returns Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. Exceptions NotSupportedException VisitConstant(ConstantExpression) Visits the constant. protected override Expression? VisitConstant(ConstantExpression node) Parameters node ConstantExpression The node. Returns Expression The expression VisitMember(MemberExpression) Visits the member. protected override Expression? VisitMember(MemberExpression node) Parameters node MemberExpression The node. Returns Expression The node VisitMethodCall(MethodCallExpression) Visits the children of the MethodCallExpression. protected override Expression? VisitMethodCall(MethodCallExpression node) Parameters node MethodCallExpression The expression to visit. Returns Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. VisitUnary(UnaryExpression) Visits the children of the UnaryExpression. protected override Expression? VisitUnary(UnaryExpression node) Parameters node UnaryExpression The expression to visit. Returns Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. Exceptions NotSupportedException WhereProjection(Expression) Wheres the projection. public IOperator WhereProjection(Expression expression) Parameters expression Expression The expression. Returns IOperator The current clause See Also ExpressionVisitor"
  },
  "api/Inflatable.LinqExpression.WhereClauses.html": {
    "href": "api/Inflatable.LinqExpression.WhereClauses.html",
    "title": "Namespace Inflatable.LinqExpression.WhereClauses | Inflatable API Reference",
    "keywords": "Namespace Inflatable.LinqExpression.WhereClauses Classes BinaryOperator Binary operator class Constant Constant operator EmptyClause Empty clause LikeOperator Like operator Property<TObject> Property operator UnaryOperator Unary operator class WhereClause<TObject> Where operator WhereVisitor<TObject> Where visitor"
  },
  "api/Inflatable.LinqExpression.html": {
    "href": "api/Inflatable.LinqExpression.html",
    "title": "Namespace Inflatable.LinqExpression | Inflatable API Reference",
    "keywords": "Namespace Inflatable.LinqExpression Classes QueryData<TObject> Query data holder QueryTranslator<TObject> Query translator"
  },
  "api/Inflatable.Modules.AOPModule.html": {
    "href": "api/Inflatable.Modules.AOPModule.html",
    "title": "Class AOPModule | Inflatable API Reference",
    "keywords": "Class AOPModule Namespace Inflatable.Modules Assembly Inflatable.dll AOP Module public class AOPModule : IAOPModule Inheritance object AOPModule Implements IAOPModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AOPModule(MappingManager) Initializes a new instance of the AOPModule class. public AOPModule(MappingManager classManager) Parameters classManager MappingManager The class manager. Exceptions ArgumentNullException classManager Properties ClassManager Gets the class manager. public MappingManager ClassManager { get; } Property Value MappingManager The class manager. Methods Setup(Aspectus) Used to add a class to the AOP system public void Setup(Aspectus manager) Parameters manager Aspectus AOP manager See Also IAOPModule"
  },
  "api/Inflatable.Modules.InflatableModule.html": {
    "href": "api/Inflatable.Modules.InflatableModule.html",
    "title": "Class InflatableModule | Inflatable API Reference",
    "keywords": "Class InflatableModule Namespace Inflatable.Modules Assembly Inflatable.dll Inflatable module public class InflatableModule : IModule Inheritance object InflatableModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Order to run this in public int Order { get; } Property Value int Methods Load(IServiceCollection) Loads the module using the bootstrapper public void Load(IServiceCollection bootstrapper) Parameters bootstrapper IServiceCollection The bootstrapper. See Also IModule"
  },
  "api/Inflatable.Modules.html": {
    "href": "api/Inflatable.Modules.html",
    "title": "Namespace Inflatable.Modules | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Modules Classes AOPModule AOP Module InflatableModule Inflatable module"
  },
  "api/Inflatable.QueryProvider.BaseClasses.GeneratorBaseClass-1.html": {
    "href": "api/Inflatable.QueryProvider.BaseClasses.GeneratorBaseClass-1.html",
    "title": "Class GeneratorBaseClass<TMappedClass> | Inflatable API Reference",
    "keywords": "Class GeneratorBaseClass<TMappedClass> Namespace Inflatable.QueryProvider.BaseClasses Assembly Inflatable.dll Generator base class public abstract class GeneratorBaseClass<TMappedClass> : IGenerator<TMappedClass>, IGenerator where TMappedClass : class Type Parameters TMappedClass The type of the mapped class. Inheritance object GeneratorBaseClass<TMappedClass> Implements IGenerator<TMappedClass> IGenerator Derived SQLServerGenerator<TMappedClass> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GeneratorBaseClass(IMappingSource, IEnumerable<IQueryGenerator<TMappedClass>>) Initializes a new instance of the GeneratorBaseClass<TMappedClass> class. protected GeneratorBaseClass(IMappingSource mappingInformation, IEnumerable<IQueryGenerator<TMappedClass>> queryGenerators) Parameters mappingInformation IMappingSource The mapping information. queryGenerators IEnumerable<IQueryGenerator<TMappedClass>> The query generators. Exceptions ArgumentNullException linqQueryGenerator or mappingInformation or queryGenerators ArgumentException Mapping not found for type: AssociatedType Properties AssociatedType Gets the type of the associated. public Type AssociatedType { get; } Property Value Type The type of the associated. MappingInformation Gets the mapping information. public IMappingSource MappingInformation { get; } Property Value IMappingSource The mapping information. QueryGenerators Gets the query generators. public IDictionary<QueryType, IQueryGenerator<TMappedClass>> QueryGenerators { get; } Property Value IDictionary<QueryType, IQueryGenerator<TMappedClass>> The query generators. Methods GenerateDeclarations(QueryType) Generates the declarations needed for the query. public IQuery[] GenerateDeclarations(QueryType type) Parameters type QueryType The type. Returns IQuery[] The resulting declarations. GenerateQueries(IQueryData) Generates the query. public IQuery[] GenerateQueries(IQueryData data) Parameters data IQueryData The data. Returns IQuery[] The resulting query GenerateQueries(QueryType, Dynamo[]) Generates the queries. public IQuery[] GenerateQueries(QueryType type, Dynamo[] ids) Parameters type QueryType The type. ids Dynamo[] The ids. Returns IQuery[] The resulting query GenerateQueries(QueryType, object) Generates the query. public IQuery[] GenerateQueries(QueryType type, object queryObject) Parameters type QueryType The type. queryObject object The query object. Returns IQuery[] The resulting queries. GenerateQueries(QueryType, object, IClassProperty) Generates the query. public IQuery[] GenerateQueries(QueryType type, object queryObject, IClassProperty property) Parameters type QueryType The type. queryObject object The query object. property IClassProperty The property. Returns IQuery[] The resulting query See Also IGenerator<TMappedClass>"
  },
  "api/Inflatable.QueryProvider.BaseClasses.LinqQueryGeneratorBaseClass-1.html": {
    "href": "api/Inflatable.QueryProvider.BaseClasses.LinqQueryGeneratorBaseClass-1.html",
    "title": "Class LinqQueryGeneratorBaseClass<TObject> | Inflatable API Reference",
    "keywords": "Class LinqQueryGeneratorBaseClass<TObject> Namespace Inflatable.QueryProvider.BaseClasses Assembly Inflatable.dll Linq query generator base class public abstract class LinqQueryGeneratorBaseClass<TObject> : QueryGeneratorBaseClass<TObject>, ILinqQueryGenerator<TObject>, IQueryGenerator<TObject> where TObject : class Type Parameters TObject The type of the object. Inheritance object QueryGeneratorBaseClass<TObject> LinqQueryGeneratorBaseClass<TObject> Implements ILinqQueryGenerator<TObject> IQueryGenerator<TObject> Derived LinqQueryGenerator<TMappedClass> Inherited Members QueryGeneratorBaseClass<TObject>.AssociatedType QueryGeneratorBaseClass<TObject>.MappingInformation QueryGeneratorBaseClass<TObject>.ObjectPool QueryGeneratorBaseClass<TObject>.QueryType QueryGeneratorBaseClass<TObject>.GenerateDeclarations() QueryGeneratorBaseClass<TObject>.GetColumnName(IIDProperty, string) QueryGeneratorBaseClass<TObject>.GetColumnName(IAutoIDProperty, string) QueryGeneratorBaseClass<TObject>.GetColumnName(IProperty, string) QueryGeneratorBaseClass<TObject>.GetColumnName(IMapProperty, IMapping, string) QueryGeneratorBaseClass<TObject>.GetForeignColumnName(IMapping) QueryGeneratorBaseClass<TObject>.GetForeignParameterName(IMapping) QueryGeneratorBaseClass<TObject>.GetParameterName(IIDProperty) QueryGeneratorBaseClass<TObject>.GetParameterName(IMapProperty, IMapping) QueryGeneratorBaseClass<TObject>.GetParameterName(IProperty) QueryGeneratorBaseClass<TObject>.GetParameterType(IAutoIDProperty) QueryGeneratorBaseClass<TObject>.GetParameterType(IIDProperty) QueryGeneratorBaseClass<TObject>.GetParentColumnName(IMapping, IAutoIDProperty, string) QueryGeneratorBaseClass<TObject>.GetParentColumnName(IMapping, IIDProperty, string) QueryGeneratorBaseClass<TObject>.GetParentParameterName(IAutoIDProperty) QueryGeneratorBaseClass<TObject>.GetParentParameterName(IIDProperty) QueryGeneratorBaseClass<TObject>.GetTableName(IMapping, string) QueryGeneratorBaseClass<TObject>.GetTableName(IManyToManyProperty) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LinqQueryGeneratorBaseClass(IMappingSource, ObjectPool<StringBuilder>) Initializes a new instance of the LinqQueryGeneratorBaseClass<TObject> class. protected LinqQueryGeneratorBaseClass(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters mappingInformation IMappingSource Mapping information objectPool ObjectPool<StringBuilder> The object pool. Methods GenerateQueries(QueryData<TObject>) Generates the query. public abstract IQuery[] GenerateQueries(QueryData<TObject> data) Parameters data QueryData<TObject> The data. Returns IQuery[] The resulting query GenerateQueries(TObject) Generates the query. public override IQuery[] GenerateQueries(TObject queryObject) Parameters queryObject TObject The object to generate the queries from. Returns IQuery[] The resulting query See Also QueryGeneratorBaseClass<TMappedClass> ILinqQueryGenerator<TObject>"
  },
  "api/Inflatable.QueryProvider.BaseClasses.PropertyQueryGeneratorBaseClass-1.html": {
    "href": "api/Inflatable.QueryProvider.BaseClasses.PropertyQueryGeneratorBaseClass-1.html",
    "title": "Class PropertyQueryGeneratorBaseClass<TObject> | Inflatable API Reference",
    "keywords": "Class PropertyQueryGeneratorBaseClass<TObject> Namespace Inflatable.QueryProvider.BaseClasses Assembly Inflatable.dll Property query generator base class public abstract class PropertyQueryGeneratorBaseClass<TObject> : QueryGeneratorBaseClass<TObject>, IPropertyQueryGenerator<TObject>, IQueryGenerator<TObject> where TObject : class Type Parameters TObject The type of the object. Inheritance object QueryGeneratorBaseClass<TObject> PropertyQueryGeneratorBaseClass<TObject> Implements IPropertyQueryGenerator<TObject> IQueryGenerator<TObject> Derived DeletePropertiesQuery<TMappedClass> LoadPropertiesQuery<TMappedClass> SavePropertiesQuery<TMappedClass> Inherited Members QueryGeneratorBaseClass<TObject>.AssociatedType QueryGeneratorBaseClass<TObject>.MappingInformation QueryGeneratorBaseClass<TObject>.ObjectPool QueryGeneratorBaseClass<TObject>.QueryType QueryGeneratorBaseClass<TObject>.GenerateDeclarations() QueryGeneratorBaseClass<TObject>.GetColumnName(IIDProperty, string) QueryGeneratorBaseClass<TObject>.GetColumnName(IAutoIDProperty, string) QueryGeneratorBaseClass<TObject>.GetColumnName(IProperty, string) QueryGeneratorBaseClass<TObject>.GetColumnName(IMapProperty, IMapping, string) QueryGeneratorBaseClass<TObject>.GetForeignColumnName(IMapping) QueryGeneratorBaseClass<TObject>.GetForeignParameterName(IMapping) QueryGeneratorBaseClass<TObject>.GetParameterName(IIDProperty) QueryGeneratorBaseClass<TObject>.GetParameterName(IMapProperty, IMapping) QueryGeneratorBaseClass<TObject>.GetParameterName(IProperty) QueryGeneratorBaseClass<TObject>.GetParameterType(IAutoIDProperty) QueryGeneratorBaseClass<TObject>.GetParameterType(IIDProperty) QueryGeneratorBaseClass<TObject>.GetParentColumnName(IMapping, IAutoIDProperty, string) QueryGeneratorBaseClass<TObject>.GetParentColumnName(IMapping, IIDProperty, string) QueryGeneratorBaseClass<TObject>.GetParentParameterName(IAutoIDProperty) QueryGeneratorBaseClass<TObject>.GetParentParameterName(IIDProperty) QueryGeneratorBaseClass<TObject>.GetTableName(IMapping, string) QueryGeneratorBaseClass<TObject>.GetTableName(IManyToManyProperty) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PropertyQueryGeneratorBaseClass(IMappingSource, ObjectPool<StringBuilder>) Initializes a new instance of the PropertyQueryGeneratorBaseClass<TObject> class. protected PropertyQueryGeneratorBaseClass(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters mappingInformation IMappingSource Mapping information objectPool ObjectPool<StringBuilder> The object pool. Methods GenerateQueries(TObject) Generates the query. public override IQuery[] GenerateQueries(TObject queryObject) Parameters queryObject TObject The object to generate the queries from. Returns IQuery[] The resulting query GenerateQueries(TObject, IClassProperty) Generates the query. public abstract IQuery[] GenerateQueries(TObject queryObject, IClassProperty property) Parameters queryObject TObject The object to generate the queries from. property IClassProperty The property. Returns IQuery[] The resulting query See Also QueryGeneratorBaseClass<TMappedClass> ILinqQueryGenerator<TObject>"
  },
  "api/Inflatable.QueryProvider.BaseClasses.QueryGeneratorBaseClass-1.html": {
    "href": "api/Inflatable.QueryProvider.BaseClasses.QueryGeneratorBaseClass-1.html",
    "title": "Class QueryGeneratorBaseClass<TMappedClass> | Inflatable API Reference",
    "keywords": "Class QueryGeneratorBaseClass<TMappedClass> Namespace Inflatable.QueryProvider.BaseClasses Assembly Inflatable.dll Generator base class public abstract class QueryGeneratorBaseClass<TMappedClass> : IQueryGenerator<TMappedClass> where TMappedClass : class Type Parameters TMappedClass The type of the mapped class. Inheritance object QueryGeneratorBaseClass<TMappedClass> Implements IQueryGenerator<TMappedClass> Derived LinqQueryGeneratorBaseClass<TObject> PropertyQueryGeneratorBaseClass<TObject> DataLoadQuery<TMappedClass> DeleteQuery<TMappedClass> InsertQuery<TMappedClass> UpdateQuery<TMappedClass> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QueryGeneratorBaseClass(IMappingSource, ObjectPool<StringBuilder>) Constructor protected QueryGeneratorBaseClass(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters mappingInformation IMappingSource Mapping information objectPool ObjectPool<StringBuilder> The object pool. Exceptions ArgumentNullException mappingInformation Properties AssociatedType Gets the type of the associated. public Type AssociatedType { get; } Property Value Type The type of the associated. MappingInformation Gets the mapping information. public IMappingSource MappingInformation { get; } Property Value IMappingSource The mapping information. ObjectPool Gets the object pool. public ObjectPool<StringBuilder> ObjectPool { get; } Property Value ObjectPool<StringBuilder> The object pool. QueryType Gets the type of the query. public abstract QueryType QueryType { get; } Property Value QueryType The type of the query. Methods GenerateDeclarations() Generates the declarations needed for the query. public abstract IQuery[] GenerateDeclarations() Returns IQuery[] The resulting declarations. GenerateQueries(TMappedClass) Generates the query. public abstract IQuery[] GenerateQueries(TMappedClass queryObject) Parameters queryObject TMappedClass The object to generate the queries from. Returns IQuery[] The resulting query GetColumnName(IAutoIDProperty, string) Gets the name of the column. protected string GetColumnName(IAutoIDProperty idProperty, string suffix = \"\") Parameters idProperty IAutoIDProperty The identifier property. suffix string The suffix. Returns string The column name GetColumnName(IIDProperty?, string) Gets the name of the column. protected string GetColumnName(IIDProperty? idProperty, string suffix = \"\") Parameters idProperty IIDProperty The identifier property. suffix string The suffix. Returns string The column name GetColumnName(IMapProperty, IMapping, string) Gets the name of the column. protected string? GetColumnName(IMapProperty mapProperty, IMapping foreignMapping, string suffix = \"\") Parameters mapProperty IMapProperty The map property. foreignMapping IMapping The foreign mapping. suffix string The suffix. Returns string The column name GetColumnName(IProperty, string) Gets the name of the column. protected string GetColumnName(IProperty referenceProperty, string suffix = \"\") Parameters referenceProperty IProperty The reference property. suffix string The suffix. Returns string The column name GetForeignColumnName(IMapping) Gets the name of the parent column. protected string GetForeignColumnName(IMapping foreignMapping) Parameters foreignMapping IMapping The foreign mapping. Returns string The parent column name GetForeignParameterName(IMapping) Gets the name of the parent parameter. protected string GetForeignParameterName(IMapping foreignMapping) Parameters foreignMapping IMapping The foreign mapping. Returns string The parent parameter name GetParameterName(IIDProperty?) Gets the name of the parameter. protected string GetParameterName(IIDProperty? idProperty) Parameters idProperty IIDProperty The identifier property. Returns string The parameter name GetParameterName(IMapProperty, IMapping) Gets the name of the parameter. protected string? GetParameterName(IMapProperty mapProperty, IMapping foreignMapping) Parameters mapProperty IMapProperty The map property. foreignMapping IMapping The foreign mapping. Returns string The parameter name GetParameterName(IProperty) Gets the name of the parameter. protected string GetParameterName(IProperty referenceProperty) Parameters referenceProperty IProperty The reference property. Returns string The parameter name GetParameterType(IAutoIDProperty) Gets the type of the parameter. protected string GetParameterType(IAutoIDProperty autoIDProperty) Parameters autoIDProperty IAutoIDProperty The automatic identifier property. Returns string The parameter type name GetParameterType(IIDProperty) Gets the type of the parameter. protected string GetParameterType(IIDProperty iDProperty) Parameters iDProperty IIDProperty The i d property. Returns string The parameter type name GetParentColumnName(IMapping, IAutoIDProperty, string) Gets the name of the parent column. protected string GetParentColumnName(IMapping childMapping, IAutoIDProperty autoIDProperty, string suffix = \"\") Parameters childMapping IMapping The child mapping. autoIDProperty IAutoIDProperty The automatic identifier property. suffix string The suffix. Returns string The parent column name GetParentColumnName(IMapping, IIDProperty, string) Gets the name of the parent column. protected string GetParentColumnName(IMapping childMapping, IIDProperty iDProperty, string suffix = \"\") Parameters childMapping IMapping The child mapping. iDProperty IIDProperty The i d property. suffix string The suffix. Returns string The parent column name GetParentParameterName(IAutoIDProperty) Gets the name of the parent parameter. protected string GetParentParameterName(IAutoIDProperty autoIDProperty) Parameters autoIDProperty IAutoIDProperty The automatic identifier property. Returns string The parent parameter name GetParentParameterName(IIDProperty) Gets the name of the parent parameter. protected string GetParentParameterName(IIDProperty iDProperty) Parameters iDProperty IIDProperty The i d property. Returns string The parent parameter name GetTableName(IManyToManyProperty) Gets the name of the table. protected string GetTableName(IManyToManyProperty property) Parameters property IManyToManyProperty The property. Returns string The name of the table. GetTableName(IMapping?, string) Gets the name of the table. protected string GetTableName(IMapping? parentMapping, string suffix = \"\") Parameters parentMapping IMapping The parent mapping. suffix string The suffix. Returns string The name of the table See Also IQueryGenerator<TObject>"
  },
  "api/Inflatable.QueryProvider.BaseClasses.html": {
    "href": "api/Inflatable.QueryProvider.BaseClasses.html",
    "title": "Namespace Inflatable.QueryProvider.BaseClasses | Inflatable API Reference",
    "keywords": "Namespace Inflatable.QueryProvider.BaseClasses Classes GeneratorBaseClass<TMappedClass> Generator base class LinqQueryGeneratorBaseClass<TObject> Linq query generator base class PropertyQueryGeneratorBaseClass<TObject> Property query generator base class QueryGeneratorBaseClass<TMappedClass> Generator base class"
  },
  "api/Inflatable.QueryProvider.CachedResult.html": {
    "href": "api/Inflatable.QueryProvider.CachedResult.html",
    "title": "Class CachedResult | Inflatable API Reference",
    "keywords": "Class CachedResult Namespace Inflatable.QueryProvider Assembly Inflatable.dll Cached result public class CachedResult Inheritance object CachedResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CachedResult(Dynamo, Type) Initializes a new instance of the QueryResults class. public CachedResult(Dynamo value, Type objectType) Parameters value Dynamo The value. objectType Type Type of the object. Exceptions ArgumentNullException query Properties ObjectType Gets the type of the object. public Type ObjectType { get; } Property Value Type The type of the object. Value Gets the value. public Dynamo Value { get; } Property Value Dynamo The value."
  },
  "api/Inflatable.QueryProvider.Enums.QueryType.html": {
    "href": "api/Inflatable.QueryProvider.Enums.QueryType.html",
    "title": "Enum QueryType | Inflatable API Reference",
    "keywords": "Enum QueryType Namespace Inflatable.QueryProvider.Enums Assembly Inflatable.dll Query type enum public enum QueryType Fields Delete = 2 The delete Insert = 0 The insert JoinsDelete = 5 The joins delete JoinsSave = 6 The joins save LinqQuery = 3 The linq query LoadData = 7 The load data LoadProperty = 4 The load property Update = 1 The update"
  },
  "api/Inflatable.QueryProvider.Enums.html": {
    "href": "api/Inflatable.QueryProvider.Enums.html",
    "title": "Namespace Inflatable.QueryProvider.Enums | Inflatable API Reference",
    "keywords": "Namespace Inflatable.QueryProvider.Enums Enums QueryType Query type enum"
  },
  "api/Inflatable.QueryProvider.Interfaces.IDataQueryGenerator-1.html": {
    "href": "api/Inflatable.QueryProvider.Interfaces.IDataQueryGenerator-1.html",
    "title": "Interface IDataQueryGenerator<TObject> | Inflatable API Reference",
    "keywords": "Interface IDataQueryGenerator<TObject> Namespace Inflatable.QueryProvider.Interfaces Assembly Inflatable.dll Data query generator interface public interface IDataQueryGenerator<TObject> : IQueryGenerator<TObject> where TObject : class Type Parameters TObject The type of the object. Inherited Members IQueryGenerator<TObject>.QueryType IQueryGenerator<TObject>.GenerateDeclarations() IQueryGenerator<TObject>.GenerateQueries(TObject) Methods GenerateQueries(Dynamo[]) Generates the query. IQuery[] GenerateQueries(Dynamo[] ids) Parameters ids Dynamo[] The ids. Returns IQuery[] The resulting query See Also IQueryGenerator<TObject>"
  },
  "api/Inflatable.QueryProvider.Interfaces.IGenerator-1.html": {
    "href": "api/Inflatable.QueryProvider.Interfaces.IGenerator-1.html",
    "title": "Interface IGenerator<TMappedClass> | Inflatable API Reference",
    "keywords": "Interface IGenerator<TMappedClass> Namespace Inflatable.QueryProvider.Interfaces Assembly Inflatable.dll Generator interface public interface IGenerator<TMappedClass> : IGenerator where TMappedClass : class Type Parameters TMappedClass The type of the mapped class. Inherited Members IGenerator.AssociatedType IGenerator.GenerateDeclarations(QueryType) IGenerator.GenerateQueries(QueryType, object) IGenerator.GenerateQueries(QueryType, object, IClassProperty) IGenerator.GenerateQueries(QueryType, Dynamo[]) Properties QueryGenerators Gets the query generators. IDictionary<QueryType, IQueryGenerator<TMappedClass>> QueryGenerators { get; } Property Value IDictionary<QueryType, IQueryGenerator<TMappedClass>> The query generators. Methods GenerateQueries(IQueryData) Generates the query. IQuery[] GenerateQueries(IQueryData data) Parameters data IQueryData The data. Returns IQuery[] The resulting query"
  },
  "api/Inflatable.QueryProvider.Interfaces.IGenerator.html": {
    "href": "api/Inflatable.QueryProvider.Interfaces.IGenerator.html",
    "title": "Interface IGenerator | Inflatable API Reference",
    "keywords": "Interface IGenerator Namespace Inflatable.QueryProvider.Interfaces Assembly Inflatable.dll Generator interface public interface IGenerator Properties AssociatedType Gets the type of the associated. Type AssociatedType { get; } Property Value Type The type of the associated. Methods GenerateDeclarations(QueryType) Generates the declarations needed for the query. IQuery[] GenerateDeclarations(QueryType type) Parameters type QueryType The type. Returns IQuery[] The resulting declarations. GenerateQueries(QueryType, Dynamo[]) Generates the queries. IQuery[] GenerateQueries(QueryType type, Dynamo[] ids) Parameters type QueryType The type. ids Dynamo[] The ids. Returns IQuery[] The resulting query GenerateQueries(QueryType, object) Generates the query. IQuery[] GenerateQueries(QueryType type, object queryObject) Parameters type QueryType The type. queryObject object The query object. Returns IQuery[] The resulting queries. GenerateQueries(QueryType, object, IClassProperty) Generates the query. IQuery[] GenerateQueries(QueryType type, object queryObject, IClassProperty property) Parameters type QueryType The type. queryObject object The query object. property IClassProperty The property. Returns IQuery[] The resulting query"
  },
  "api/Inflatable.QueryProvider.Interfaces.ILinqQueryGenerator-1.html": {
    "href": "api/Inflatable.QueryProvider.Interfaces.ILinqQueryGenerator-1.html",
    "title": "Interface ILinqQueryGenerator<TObject> | Inflatable API Reference",
    "keywords": "Interface ILinqQueryGenerator<TObject> Namespace Inflatable.QueryProvider.Interfaces Assembly Inflatable.dll Linq query generator public interface ILinqQueryGenerator<TObject> : IQueryGenerator<TObject> where TObject : class Type Parameters TObject The type of the object. Inherited Members IQueryGenerator<TObject>.QueryType IQueryGenerator<TObject>.GenerateDeclarations() IQueryGenerator<TObject>.GenerateQueries(TObject) Methods GenerateQueries(QueryData<TObject>) Generates the query. IQuery[] GenerateQueries(QueryData<TObject> data) Parameters data QueryData<TObject> The data. Returns IQuery[] The resulting query"
  },
  "api/Inflatable.QueryProvider.Interfaces.IPropertyQueryGenerator-1.html": {
    "href": "api/Inflatable.QueryProvider.Interfaces.IPropertyQueryGenerator-1.html",
    "title": "Interface IPropertyQueryGenerator<TObject> | Inflatable API Reference",
    "keywords": "Interface IPropertyQueryGenerator<TObject> Namespace Inflatable.QueryProvider.Interfaces Assembly Inflatable.dll Property query generator public interface IPropertyQueryGenerator<TObject> : IQueryGenerator<TObject> where TObject : class Type Parameters TObject The type of the object. Inherited Members IQueryGenerator<TObject>.QueryType IQueryGenerator<TObject>.GenerateDeclarations() IQueryGenerator<TObject>.GenerateQueries(TObject) Methods GenerateQueries(TObject, IClassProperty) Generates the query. IQuery[] GenerateQueries(TObject queryObject, IClassProperty property) Parameters queryObject TObject The object to generate the queries from. property IClassProperty The property. Returns IQuery[] The resulting query"
  },
  "api/Inflatable.QueryProvider.Interfaces.IQueries.html": {
    "href": "api/Inflatable.QueryProvider.Interfaces.IQueries.html",
    "title": "Interface IQueries | Inflatable API Reference",
    "keywords": "Interface IQueries Namespace Inflatable.QueryProvider.Interfaces Assembly Inflatable.dll Holds the default commands for an individual mapping public interface IQueries : IDictionary<QueryType, IQuery?>, ICollection<KeyValuePair<QueryType, IQuery?>>, IEnumerable<KeyValuePair<QueryType, IQuery?>>, IEnumerable Inherited Members IDictionary<QueryType, IQuery>.Add(QueryType, IQuery) IDictionary<QueryType, IQuery>.ContainsKey(QueryType) IDictionary<QueryType, IQuery>.Remove(QueryType) IDictionary<QueryType, IQuery>.TryGetValue(QueryType, out IQuery) IDictionary<QueryType, IQuery>.this[QueryType] IDictionary<QueryType, IQuery>.Keys IDictionary<QueryType, IQuery>.Values ICollection<KeyValuePair<QueryType, IQuery>>.Add(KeyValuePair<QueryType, IQuery>) ICollection<KeyValuePair<QueryType, IQuery>>.Clear() ICollection<KeyValuePair<QueryType, IQuery>>.Contains(KeyValuePair<QueryType, IQuery>) ICollection<KeyValuePair<QueryType, IQuery>>.CopyTo(KeyValuePair<QueryType, IQuery>[], int) ICollection<KeyValuePair<QueryType, IQuery>>.Remove(KeyValuePair<QueryType, IQuery>) ICollection<KeyValuePair<QueryType, IQuery>>.Count ICollection<KeyValuePair<QueryType, IQuery>>.IsReadOnly IEnumerable<KeyValuePair<QueryType, IQuery>>.GetEnumerator() IEnumerable.GetEnumerator()"
  },
  "api/Inflatable.QueryProvider.Interfaces.IQuery.html": {
    "href": "api/Inflatable.QueryProvider.Interfaces.IQuery.html",
    "title": "Interface IQuery | Inflatable API Reference",
    "keywords": "Interface IQuery Namespace Inflatable.QueryProvider.Interfaces Assembly Inflatable.dll Holds an individual query's information. public interface IQuery Properties DatabaseCommandType Gets the type of the database command. CommandType DatabaseCommandType { get; } Property Value CommandType The type of the database command. Parameters Gets the parameters. IParameter?[] Parameters { get; } Property Value IParameter[] The parameters. QueryString Gets the query string. string QueryString { get; } Property Value string The query string. QueryType Gets the type of the query. QueryType QueryType { get; } Property Value QueryType The type of the query. ReturnType Gets the type of the return value. Type ReturnType { get; } Property Value Type The type of the return value."
  },
  "api/Inflatable.QueryProvider.Interfaces.IQueryGenerator-1.html": {
    "href": "api/Inflatable.QueryProvider.Interfaces.IQueryGenerator-1.html",
    "title": "Interface IQueryGenerator<TObject> | Inflatable API Reference",
    "keywords": "Interface IQueryGenerator<TObject> Namespace Inflatable.QueryProvider.Interfaces Assembly Inflatable.dll Query generator public interface IQueryGenerator<TObject> where TObject : class Type Parameters TObject The type of the object. Properties QueryType Gets the type of the query. QueryType QueryType { get; } Property Value QueryType The type of the query. Methods GenerateDeclarations() Generates the declarations needed for the query. IQuery[] GenerateDeclarations() Returns IQuery[] The resulting declarations. GenerateQueries(TObject) Generates the query. IQuery[] GenerateQueries(TObject queryObject) Parameters queryObject TObject The object to generate the queries from. Returns IQuery[] The resulting query"
  },
  "api/Inflatable.QueryProvider.Interfaces.IQueryProvider.html": {
    "href": "api/Inflatable.QueryProvider.Interfaces.IQueryProvider.html",
    "title": "Interface IQueryProvider | Inflatable API Reference",
    "keywords": "Interface IQueryProvider Namespace Inflatable.QueryProvider.Interfaces Assembly Inflatable.dll Query provider interface public interface IQueryProvider Properties Providers Provider name associated with the query provider DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] Methods Batch(IDatabase) Creates a batch for running commands SQLHelper Batch(IDatabase source) Parameters source IDatabase The source. Returns SQLHelper A batch object CreateGenerator<TMappedClass>(IMappingSource) Creates a generator object IGenerator<TMappedClass> CreateGenerator<TMappedClass>(IMappingSource mappingInformation) where TMappedClass : class Parameters mappingInformation IMappingSource The mapping information. Returns IGenerator<TMappedClass> Generator object Type Parameters TMappedClass Class type to create the generator for"
  },
  "api/Inflatable.QueryProvider.Interfaces.html": {
    "href": "api/Inflatable.QueryProvider.Interfaces.html",
    "title": "Namespace Inflatable.QueryProvider.Interfaces | Inflatable API Reference",
    "keywords": "Namespace Inflatable.QueryProvider.Interfaces Interfaces IDataQueryGenerator<TObject> Data query generator interface IGenerator Generator interface IGenerator<TMappedClass> Generator interface ILinqQueryGenerator<TObject> Linq query generator IPropertyQueryGenerator<TObject> Property query generator IQueries Holds the default commands for an individual mapping IQuery Holds an individual query's information. IQueryGenerator<TObject> Query generator IQueryProvider Query provider interface"
  },
  "api/Inflatable.QueryProvider.MappingData.IQueryMapping.html": {
    "href": "api/Inflatable.QueryProvider.MappingData.IQueryMapping.html",
    "title": "Interface IQueryMapping | Inflatable API Reference",
    "keywords": "Interface IQueryMapping Namespace Inflatable.QueryProvider.MappingData Assembly Inflatable.dll Query mapping interface public interface IQueryMapping Properties IDProperties Gets the identifier properties. List<IIDProperty> IDProperties { get; } Property Value List<IIDProperty> The identifier properties. ParentMappings Gets the parent mappings. List<IMapping> ParentMappings { get; } Property Value List<IMapping> The parent mappings. PrimaryParentMapping Gets the primary parent mapping (with primary ID). IMapping PrimaryParentMapping { get; } Property Value IMapping The primary parent mapping (with primary ID). Schema Gets the schema. string Schema { get; } Property Value string The schema."
  },
  "api/Inflatable.QueryProvider.MappingData.IQueryPropertyMapping.html": {
    "href": "api/Inflatable.QueryProvider.MappingData.IQueryPropertyMapping.html",
    "title": "Interface IQueryPropertyMapping | Inflatable API Reference",
    "keywords": "Interface IQueryPropertyMapping Namespace Inflatable.QueryProvider.MappingData Assembly Inflatable.dll Query property mapping information public interface IQueryPropertyMapping Properties ForeignIDs Gets the foreign ids. List<IIDProperty> ForeignIDs { get; } Property Value List<IIDProperty> The foreign ids."
  },
  "api/Inflatable.QueryProvider.MappingData.html": {
    "href": "api/Inflatable.QueryProvider.MappingData.html",
    "title": "Namespace Inflatable.QueryProvider.MappingData | Inflatable API Reference",
    "keywords": "Namespace Inflatable.QueryProvider.MappingData Interfaces IQueryMapping Query mapping interface IQueryPropertyMapping Query property mapping information"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.DataLoadQuery-1.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.DataLoadQuery-1.html",
    "title": "Class DataLoadQuery<TMappedClass> | Inflatable API Reference",
    "keywords": "Class DataLoadQuery<TMappedClass> Namespace Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators Assembly Inflatable.dll Data load query public class DataLoadQuery<TMappedClass> : QueryGeneratorBaseClass<TMappedClass>, IDataQueryGenerator<TMappedClass>, IQueryGenerator<TMappedClass> where TMappedClass : class Type Parameters TMappedClass The type of the mapped class. Inheritance object QueryGeneratorBaseClass<TMappedClass> DataLoadQuery<TMappedClass> Implements IDataQueryGenerator<TMappedClass> IQueryGenerator<TMappedClass> Inherited Members QueryGeneratorBaseClass<TMappedClass>.AssociatedType QueryGeneratorBaseClass<TMappedClass>.MappingInformation QueryGeneratorBaseClass<TMappedClass>.ObjectPool QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IMapProperty, IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetForeignColumnName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetForeignParameterName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IMapProperty, IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IManyToManyProperty) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DataLoadQuery(IMappingSource, ObjectPool<StringBuilder>) Initializes a new instance of the DataLoadQuery<TMappedClass> class. public DataLoadQuery(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters mappingInformation IMappingSource Mapping information objectPool ObjectPool<StringBuilder> The object pool. Properties IDColumnInfo Gets the identifier column information. public IQueryColumnInfo[] IDColumnInfo { get; } Property Value IQueryColumnInfo[] The identifier column information. QueryType Gets the type of the query. public override QueryType QueryType { get; } Property Value QueryType The type of the query. Methods GenerateDeclarations() Generates the declarations needed for the query. public override IQuery[] GenerateDeclarations() Returns IQuery[] The resulting declarations. GenerateQueries(Dynamo[]) Generates the query. public IQuery[] GenerateQueries(Dynamo[] ids) Parameters ids Dynamo[] Returns IQuery[] The resulting query GenerateQueries(TMappedClass) Generates the query. public override IQuery[] GenerateQueries(TMappedClass queryObject) Parameters queryObject TMappedClass The object to generate the queries from. Returns IQuery[] The resulting query See Also QueryGeneratorBaseClass<TMappedClass>"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.DeletePropertiesQuery-1.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.DeletePropertiesQuery-1.html",
    "title": "Class DeletePropertiesQuery<TMappedClass> | Inflatable API Reference",
    "keywords": "Class DeletePropertiesQuery<TMappedClass> Namespace Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators Assembly Inflatable.dll Delete properties query public class DeletePropertiesQuery<TMappedClass> : PropertyQueryGeneratorBaseClass<TMappedClass>, IPropertyQueryGenerator<TMappedClass>, IQueryGenerator<TMappedClass> where TMappedClass : class Type Parameters TMappedClass The type of the mapped class. Inheritance object QueryGeneratorBaseClass<TMappedClass> PropertyQueryGeneratorBaseClass<TMappedClass> DeletePropertiesQuery<TMappedClass> Implements IPropertyQueryGenerator<TMappedClass> IQueryGenerator<TMappedClass> Inherited Members PropertyQueryGeneratorBaseClass<TMappedClass>.GenerateQueries(TMappedClass) QueryGeneratorBaseClass<TMappedClass>.AssociatedType QueryGeneratorBaseClass<TMappedClass>.MappingInformation QueryGeneratorBaseClass<TMappedClass>.ObjectPool QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IMapProperty, IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetForeignColumnName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetForeignParameterName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IMapProperty, IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IManyToManyProperty) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeletePropertiesQuery(IMappingSource, ObjectPool<StringBuilder>) Initializes a new instance of the SavePropertiesQuery<TMappedClass> class. public DeletePropertiesQuery(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters mappingInformation IMappingSource Mapping information objectPool ObjectPool<StringBuilder> The object pool. Properties QueryType Gets the type of the query. public override QueryType QueryType { get; } Property Value QueryType The type of the query. Methods GenerateDeclarations() Generates the declarations needed for the query. public override IQuery[] GenerateDeclarations() Returns IQuery[] The resulting declarations. GenerateQueries(TMappedClass, IClassProperty) Generates the query. public override IQuery[] GenerateQueries(TMappedClass queryObject, IClassProperty property) Parameters queryObject TMappedClass The object to generate the queries from. property IClassProperty The property. Returns IQuery[] The resulting query See Also PropertyQueryGeneratorBaseClass<TObject>"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.DeleteQuery-1.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.DeleteQuery-1.html",
    "title": "Class DeleteQuery<TMappedClass> | Inflatable API Reference",
    "keywords": "Class DeleteQuery<TMappedClass> Namespace Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators Assembly Inflatable.dll Delete query generator public class DeleteQuery<TMappedClass> : QueryGeneratorBaseClass<TMappedClass>, IQueryGenerator<TMappedClass> where TMappedClass : class Type Parameters TMappedClass The type of the mapped class. Inheritance object QueryGeneratorBaseClass<TMappedClass> DeleteQuery<TMappedClass> Implements IQueryGenerator<TMappedClass> Inherited Members QueryGeneratorBaseClass<TMappedClass>.AssociatedType QueryGeneratorBaseClass<TMappedClass>.MappingInformation QueryGeneratorBaseClass<TMappedClass>.ObjectPool QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IMapProperty, IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetForeignColumnName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetForeignParameterName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IMapProperty, IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IManyToManyProperty) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteQuery(IMappingSource, ObjectPool<StringBuilder>) Initializes a new instance of the DeleteQuery<TMappedClass> class. public DeleteQuery(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters mappingInformation IMappingSource The mapping information. objectPool ObjectPool<StringBuilder> The object pool. Properties QueryType Gets the type of the query. public override QueryType QueryType { get; } Property Value QueryType The type of the query. Methods GenerateDeclarations() Generates the declarations needed for the query. public override IQuery[] GenerateDeclarations() Returns IQuery[] The resulting declarations. GenerateQueries(TMappedClass) Generates a delete query. public override IQuery[] GenerateQueries(TMappedClass queryObject) Parameters queryObject TMappedClass The object to generate the queries from. Returns IQuery[] The resulting query See Also QueryGeneratorBaseClass<TMappedClass>"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.HelperClasses.QueryGeneratorData.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.HelperClasses.QueryGeneratorData.html",
    "title": "Class QueryGeneratorData | Inflatable API Reference",
    "keywords": "Class QueryGeneratorData Namespace Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.HelperClasses Assembly Inflatable.dll Generator query data public class QueryGeneratorData Inheritance object QueryGeneratorData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QueryGeneratorData(IMapping, IEnumerable<IIDProperty>, string) Initializes a new instance of the QueryGeneratorData class. public QueryGeneratorData(IMapping associatedMapping, IEnumerable<IIDProperty> iDProperties, string queryText) Parameters associatedMapping IMapping The associated mapping. iDProperties IEnumerable<IIDProperty> The i d properties. queryText string The query text. Properties AssociatedMapping Gets or sets the associated mapping. public IMapping AssociatedMapping { get; set; } Property Value IMapping The associated mapping. IDProperties Gets or sets the identifier properties. public IEnumerable<IIDProperty> IDProperties { get; set; } Property Value IEnumerable<IIDProperty> The identifier properties. QueryText Gets or sets the query text. public string QueryText { get; set; } Property Value string The query text."
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.HelperClasses.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.HelperClasses.html",
    "title": "Namespace Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.HelperClasses | Inflatable API Reference",
    "keywords": "Namespace Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.HelperClasses Classes QueryGeneratorData Generator query data"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.InsertQuery-1.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.InsertQuery-1.html",
    "title": "Class InsertQuery<TMappedClass> | Inflatable API Reference",
    "keywords": "Class InsertQuery<TMappedClass> Namespace Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators Assembly Inflatable.dll Insert query generator public class InsertQuery<TMappedClass> : QueryGeneratorBaseClass<TMappedClass>, IQueryGenerator<TMappedClass> where TMappedClass : class Type Parameters TMappedClass The type of the mapped class. Inheritance object QueryGeneratorBaseClass<TMappedClass> InsertQuery<TMappedClass> Implements IQueryGenerator<TMappedClass> Inherited Members QueryGeneratorBaseClass<TMappedClass>.AssociatedType QueryGeneratorBaseClass<TMappedClass>.MappingInformation QueryGeneratorBaseClass<TMappedClass>.ObjectPool QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IMapProperty, IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetForeignColumnName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetForeignParameterName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IMapProperty, IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IManyToManyProperty) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InsertQuery(IMappingSource, ObjectPool<StringBuilder>) Initializes a new instance of the InsertQuery<TMappedClass> class. public InsertQuery(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters mappingInformation IMappingSource The mapping information. objectPool ObjectPool<StringBuilder> The object pool. Properties QueryType Gets the type of the query. public override QueryType QueryType { get; } Property Value QueryType The type of the query. Methods GenerateDeclarations() Generates the declarations needed for the query. public override IQuery[] GenerateDeclarations() Returns IQuery[] The resulting declarations. GenerateQueries(TMappedClass) Generates the insert query. public override IQuery[] GenerateQueries(TMappedClass queryObject) Parameters queryObject TMappedClass The object to generate the queries from. Returns IQuery[] The resulting query See Also QueryGeneratorBaseClass<TMappedClass>"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.LinqQueryGenerator-1.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.LinqQueryGenerator-1.html",
    "title": "Class LinqQueryGenerator<TMappedClass> | Inflatable API Reference",
    "keywords": "Class LinqQueryGenerator<TMappedClass> Namespace Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators Assembly Inflatable.dll SQL Server Linq query generator public class LinqQueryGenerator<TMappedClass> : LinqQueryGeneratorBaseClass<TMappedClass>, ILinqQueryGenerator<TMappedClass>, IQueryGenerator<TMappedClass> where TMappedClass : class Type Parameters TMappedClass The type of the mapped class. Inheritance object QueryGeneratorBaseClass<TMappedClass> LinqQueryGeneratorBaseClass<TMappedClass> LinqQueryGenerator<TMappedClass> Implements ILinqQueryGenerator<TMappedClass> IQueryGenerator<TMappedClass> Inherited Members LinqQueryGeneratorBaseClass<TMappedClass>.GenerateQueries(TMappedClass) QueryGeneratorBaseClass<TMappedClass>.AssociatedType QueryGeneratorBaseClass<TMappedClass>.MappingInformation QueryGeneratorBaseClass<TMappedClass>.ObjectPool QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IMapProperty, IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetForeignColumnName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetForeignParameterName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IMapProperty, IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IManyToManyProperty) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LinqQueryGenerator(IMappingSource, ObjectPool<StringBuilder>) Initializes a new instance of the LinqQueryGenerator<TMappedClass> class. public LinqQueryGenerator(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters mappingInformation IMappingSource The mapping information. objectPool ObjectPool<StringBuilder> Exceptions ArgumentNullException mappingInformation Properties QueryType Gets the type of the query. public override QueryType QueryType { get; } Property Value QueryType The type of the query. Methods GenerateDeclarations() Generates the declarations needed for the query. public override IQuery[] GenerateDeclarations() Returns IQuery[] The resulting declarations. GenerateQueries(QueryData<TMappedClass>) Generates the query. public override IQuery[] GenerateQueries(QueryData<TMappedClass> data) Parameters data QueryData<TMappedClass> The data. Returns IQuery[] The resulting query See Also ILinqQueryGenerator<TObject>"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.LoadPropertiesQuery-1.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.LoadPropertiesQuery-1.html",
    "title": "Class LoadPropertiesQuery<TMappedClass> | Inflatable API Reference",
    "keywords": "Class LoadPropertiesQuery<TMappedClass> Namespace Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators Assembly Inflatable.dll Load properties query public class LoadPropertiesQuery<TMappedClass> : PropertyQueryGeneratorBaseClass<TMappedClass>, IPropertyQueryGenerator<TMappedClass>, IQueryGenerator<TMappedClass> where TMappedClass : class Type Parameters TMappedClass The type of the mapped class. Inheritance object QueryGeneratorBaseClass<TMappedClass> PropertyQueryGeneratorBaseClass<TMappedClass> LoadPropertiesQuery<TMappedClass> Implements IPropertyQueryGenerator<TMappedClass> IQueryGenerator<TMappedClass> Inherited Members PropertyQueryGeneratorBaseClass<TMappedClass>.GenerateQueries(TMappedClass) QueryGeneratorBaseClass<TMappedClass>.AssociatedType QueryGeneratorBaseClass<TMappedClass>.MappingInformation QueryGeneratorBaseClass<TMappedClass>.ObjectPool QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IMapProperty, IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetForeignColumnName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetForeignParameterName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IMapProperty, IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IManyToManyProperty) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LoadPropertiesQuery(IMappingSource, ObjectPool<StringBuilder>) Initializes a new instance of the LoadPropertiesQuery<TMappedClass> class. public LoadPropertiesQuery(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters mappingInformation IMappingSource Mapping information objectPool ObjectPool<StringBuilder> The object pool. Properties QueryType Gets the type of the query. public override QueryType QueryType { get; } Property Value QueryType The type of the query. Methods GenerateDeclarations() Generates the declarations needed for the query. public override IQuery[] GenerateDeclarations() Returns IQuery[] The resulting declarations. GenerateQueries(TMappedClass, IClassProperty) Generates the query. public override IQuery[] GenerateQueries(TMappedClass queryObject, IClassProperty property) Parameters queryObject TMappedClass The object to generate the queries from. property IClassProperty The property. Returns IQuery[] The resulting query See Also PropertyQueryGeneratorBaseClass<TObject>"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.SavePropertiesQuery-1.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.SavePropertiesQuery-1.html",
    "title": "Class SavePropertiesQuery<TMappedClass> | Inflatable API Reference",
    "keywords": "Class SavePropertiesQuery<TMappedClass> Namespace Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators Assembly Inflatable.dll Save properties query generator public class SavePropertiesQuery<TMappedClass> : PropertyQueryGeneratorBaseClass<TMappedClass>, IPropertyQueryGenerator<TMappedClass>, IQueryGenerator<TMappedClass> where TMappedClass : class Type Parameters TMappedClass The type of the mapped class. Inheritance object QueryGeneratorBaseClass<TMappedClass> PropertyQueryGeneratorBaseClass<TMappedClass> SavePropertiesQuery<TMappedClass> Implements IPropertyQueryGenerator<TMappedClass> IQueryGenerator<TMappedClass> Inherited Members PropertyQueryGeneratorBaseClass<TMappedClass>.GenerateQueries(TMappedClass) QueryGeneratorBaseClass<TMappedClass>.AssociatedType QueryGeneratorBaseClass<TMappedClass>.MappingInformation QueryGeneratorBaseClass<TMappedClass>.ObjectPool QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IMapProperty, IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetForeignColumnName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetForeignParameterName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IMapProperty, IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IManyToManyProperty) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SavePropertiesQuery(IMappingSource, ObjectPool<StringBuilder>) Initializes a new instance of the SavePropertiesQuery<TMappedClass> class. public SavePropertiesQuery(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters mappingInformation IMappingSource Mapping information objectPool ObjectPool<StringBuilder> The object pool. Properties QueryType Gets the type of the query. public override QueryType QueryType { get; } Property Value QueryType The type of the query. Methods GenerateDeclarations() Generates the declarations needed for the query. public override IQuery[] GenerateDeclarations() Returns IQuery[] The resulting declarations. GenerateQueries(TMappedClass, IClassProperty) Generates the query. public override IQuery[] GenerateQueries(TMappedClass queryObject, IClassProperty property) Parameters queryObject TMappedClass The object to generate the queries from. property IClassProperty The property. Returns IQuery[] The resulting query See Also PropertyQueryGeneratorBaseClass<TObject>"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.UpdateQuery-1.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.UpdateQuery-1.html",
    "title": "Class UpdateQuery<TMappedClass> | Inflatable API Reference",
    "keywords": "Class UpdateQuery<TMappedClass> Namespace Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators Assembly Inflatable.dll Update query generator public class UpdateQuery<TMappedClass> : QueryGeneratorBaseClass<TMappedClass>, IQueryGenerator<TMappedClass> where TMappedClass : class Type Parameters TMappedClass The type of the mapped class. Inheritance object QueryGeneratorBaseClass<TMappedClass> UpdateQuery<TMappedClass> Implements IQueryGenerator<TMappedClass> Inherited Members QueryGeneratorBaseClass<TMappedClass>.AssociatedType QueryGeneratorBaseClass<TMappedClass>.MappingInformation QueryGeneratorBaseClass<TMappedClass>.ObjectPool QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IMapProperty, IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetForeignColumnName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetForeignParameterName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IMapProperty, IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IManyToManyProperty) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateQuery(IMappingSource, ObjectPool<StringBuilder>) Initializes a new instance of the UpdateQuery<TMappedClass> class. public UpdateQuery(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters mappingInformation IMappingSource The mapping information. objectPool ObjectPool<StringBuilder> The object pool. Properties QueryType Gets the type of the query. public override QueryType QueryType { get; } Property Value QueryType The type of the query. Methods GenerateDeclarations() Generates the declarations needed for the query. public override IQuery[] GenerateDeclarations() Returns IQuery[] The resulting declarations. GenerateQueries(TMappedClass) Generates the query. public override IQuery[] GenerateQueries(TMappedClass queryObject) Parameters queryObject TMappedClass The object to generate the queries from. Returns IQuery[] The resulting query See Also QueryGeneratorBaseClass<TMappedClass>"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.html",
    "title": "Namespace Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators | Inflatable API Reference",
    "keywords": "Namespace Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators Classes DataLoadQuery<TMappedClass> Data load query DeletePropertiesQuery<TMappedClass> Delete properties query DeleteQuery<TMappedClass> Delete query generator InsertQuery<TMappedClass> Insert query generator LinqQueryGenerator<TMappedClass> SQL Server Linq query generator LoadPropertiesQuery<TMappedClass> Load properties query SavePropertiesQuery<TMappedClass> Save properties query generator UpdateQuery<TMappedClass> Update query generator"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.SQLServerGenerator-1.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.SQLServerGenerator-1.html",
    "title": "Class SQLServerGenerator<TMappedClass> | Inflatable API Reference",
    "keywords": "Class SQLServerGenerator<TMappedClass> Namespace Inflatable.QueryProvider.Providers.SQLServer Assembly Inflatable.dll SQL Server query generator public class SQLServerGenerator<TMappedClass> : GeneratorBaseClass<TMappedClass>, IGenerator<TMappedClass>, IGenerator where TMappedClass : class Type Parameters TMappedClass The type of the mapped class. Inheritance object GeneratorBaseClass<TMappedClass> SQLServerGenerator<TMappedClass> Implements IGenerator<TMappedClass> IGenerator Inherited Members GeneratorBaseClass<TMappedClass>.AssociatedType GeneratorBaseClass<TMappedClass>.MappingInformation GeneratorBaseClass<TMappedClass>.QueryGenerators GeneratorBaseClass<TMappedClass>.GenerateDeclarations(QueryType) GeneratorBaseClass<TMappedClass>.GenerateQueries(IQueryData) GeneratorBaseClass<TMappedClass>.GenerateQueries(QueryType, object) GeneratorBaseClass<TMappedClass>.GenerateQueries(QueryType, object, IClassProperty) GeneratorBaseClass<TMappedClass>.GenerateQueries(QueryType, Dynamo[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SQLServerGenerator(IMappingSource, ObjectPool<StringBuilder>) Initializes a new instance of the SQLServerGenerator<TMappedClass> class. public SQLServerGenerator(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters mappingInformation IMappingSource The mapping information. objectPool ObjectPool<StringBuilder> The object pool. Exceptions ArgumentNullException mappingInformation See Also IGenerator<TMappedClass>"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.SQLServerQueryProvider.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.SQLServerQueryProvider.html",
    "title": "Class SQLServerQueryProvider | Inflatable API Reference",
    "keywords": "Class SQLServerQueryProvider Namespace Inflatable.QueryProvider.Providers.SQLServer Assembly Inflatable.dll SQL Server query provider public class SQLServerQueryProvider : IQueryProvider Inheritance object SQLServerQueryProvider Implements IQueryProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SQLServerQueryProvider(IConfiguration, ObjectPool<StringBuilder>?, ILogger<SQLHelper>) Initializes a new instance of the SQLServerQueryProvider class. public SQLServerQueryProvider(IConfiguration configuration, ObjectPool<StringBuilder>? stringBuilderPool, ILogger<SQLHelper> logger = null) Parameters configuration IConfiguration The configuration. stringBuilderPool ObjectPool<StringBuilder> The string builder pool. logger ILogger<SQLHelper> The logger. Exceptions ArgumentNullException configuration Properties Configuration Gets the configuration. public IConfiguration Configuration { get; } Property Value IConfiguration The configuration. Providers Provider name associated with the query provider public DbProviderFactory[] Providers { get; } Property Value DbProviderFactory[] Methods Batch(IDatabase) Creates a batch for running commands public SQLHelper Batch(IDatabase source) Parameters source IDatabase The source. Returns SQLHelper A batch object CreateGenerator<TMappedClass>(IMappingSource) Creates a generator object public IGenerator<TMappedClass> CreateGenerator<TMappedClass>(IMappingSource mappingInformation) where TMappedClass : class Parameters mappingInformation IMappingSource The mapping information. Returns IGenerator<TMappedClass> Generator object Type Parameters TMappedClass Class type to create the generator for See Also IQueryProvider"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.html",
    "title": "Namespace Inflatable.QueryProvider.Providers.SQLServer | Inflatable API Reference",
    "keywords": "Namespace Inflatable.QueryProvider.Providers.SQLServer Classes SQLServerGenerator<TMappedClass> SQL Server query generator SQLServerQueryProvider SQL Server query provider"
  },
  "api/Inflatable.QueryProvider.Queries.html": {
    "href": "api/Inflatable.QueryProvider.Queries.html",
    "title": "Class Queries | Inflatable API Reference",
    "keywords": "Class Queries Namespace Inflatable.QueryProvider Assembly Inflatable.dll Query holder public class Queries : IQueries, IDictionary<QueryType, IQuery?>, ICollection<KeyValuePair<QueryType, IQuery?>>, IEnumerable<KeyValuePair<QueryType, IQuery?>>, IEnumerable Inheritance object Queries Implements IQueries IDictionary<QueryType, IQuery> ICollection<KeyValuePair<QueryType, IQuery>> IEnumerable<KeyValuePair<QueryType, IQuery>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Count Gets the count. public int Count { get; } Property Value int The count. IsReadOnly Gets a value indicating whether this instance is read only. public bool IsReadOnly { get; } Property Value bool true if this instance is read only; otherwise, false. this[QueryType] Gets or sets the IQuery with the specified key. public IQuery? this[QueryType key] { get; set; } Parameters key QueryType The key. Property Value IQuery The IQuery. Keys Gets the keys. public ICollection<QueryType> Keys { get; } Property Value ICollection<QueryType> The keys. Values Gets the values. public ICollection<IQuery?> Values { get; } Property Value ICollection<IQuery> The values. Methods Add(QueryType, IQuery?) Adds the specified key. public void Add(QueryType key, IQuery? value) Parameters key QueryType The key. value IQuery The value. Add(KeyValuePair<QueryType, IQuery?>) Adds the specified item. public void Add(KeyValuePair<QueryType, IQuery?> item) Parameters item KeyValuePair<QueryType, IQuery> The item. Clear() Clears this instance. public void Clear() Contains(KeyValuePair<QueryType, IQuery?>) Determines whether [contains] [the specified item]. public bool Contains(KeyValuePair<QueryType, IQuery?> item) Parameters item KeyValuePair<QueryType, IQuery> The item. Returns bool true if [contains] [the specified item]; otherwise, false. ContainsKey(QueryType) Determines whether the specified key contains key. public bool ContainsKey(QueryType key) Parameters key QueryType The key. Returns bool true if the specified key contains key; otherwise, false. CopyTo(KeyValuePair<QueryType, IQuery?>[], int) Copies to. public void CopyTo(KeyValuePair<QueryType, IQuery?>[] array, int arrayIndex) Parameters array KeyValuePair<QueryType, IQuery>[] The array. arrayIndex int Index of the array. GetEnumerator() Gets the enumerator. public IEnumerator<KeyValuePair<QueryType, IQuery?>>? GetEnumerator() Returns IEnumerator<KeyValuePair<QueryType, IQuery>> The enumerator Remove(QueryType) Removes the specified key. public bool Remove(QueryType key) Parameters key QueryType The key. Returns bool True if it is removed, false otherwise. Remove(KeyValuePair<QueryType, IQuery?>) Removes the specified item. public bool Remove(KeyValuePair<QueryType, IQuery?> item) Parameters item KeyValuePair<QueryType, IQuery> The item. Returns bool True if it is removed, false otherwise. TryGetValue(QueryType, out IQuery?) Tries the get value. public bool TryGetValue(QueryType key, out IQuery? value) Parameters key QueryType The key. value IQuery The value. Returns bool True if it is found, false otherwise. See Also IQueries"
  },
  "api/Inflatable.QueryProvider.Query.html": {
    "href": "api/Inflatable.QueryProvider.Query.html",
    "title": "Class Query | Inflatable API Reference",
    "keywords": "Class Query Namespace Inflatable.QueryProvider Assembly Inflatable.dll Query holder public class Query : IQuery Inheritance object Query Implements IQuery Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Query(Type, CommandType, string, QueryType, params IParameter?[]) Initializes a new instance of the Query class. public Query(Type returnType, CommandType databaseCommandType, string queryString, QueryType queryType, params IParameter?[] parameters) Parameters returnType Type Type of the return. databaseCommandType CommandType Type of the database command. queryString string The query string. queryType QueryType Type of the query. parameters IParameter[] The parameters. Properties DatabaseCommandType Gets the type of the database command. public CommandType DatabaseCommandType { get; set; } Property Value CommandType The type of the database command. Parameters Gets or sets the parameters. public IParameter?[] Parameters { get; set; } Property Value IParameter[] The parameters. QueryString Gets the query string. public string QueryString { get; set; } Property Value string The query string. QueryType Gets the type of the query. public QueryType QueryType { get; set; } Property Value QueryType The type of the query. ReturnType Gets the type of the return value. public Type ReturnType { get; set; } Property Value Type The type of the return value. See Also IQuery"
  },
  "api/Inflatable.QueryProvider.QueryProviderManager.html": {
    "href": "api/Inflatable.QueryProvider.QueryProviderManager.html",
    "title": "Class QueryProviderManager | Inflatable API Reference",
    "keywords": "Class QueryProviderManager Namespace Inflatable.QueryProvider Assembly Inflatable.dll Query provider manager public class QueryProviderManager Inheritance object QueryProviderManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QueryProviderManager(IEnumerable<IQueryProvider>, ILogger<QueryProviderManager>) Initializes a new instance of the QueryProviderManager class. public QueryProviderManager(IEnumerable<IQueryProvider> providers, ILogger<QueryProviderManager> logger = null) Parameters providers IEnumerable<IQueryProvider> The providers. logger ILogger<QueryProviderManager> The logger. Exceptions ArgumentNullException providers Properties Logger Gets the logger. public ILogger Logger { get; } Property Value ILogger The logger. Providers Gets the providers. public Dictionary<DbProviderFactory, IQueryProvider> Providers { get; } Property Value Dictionary<DbProviderFactory, IQueryProvider> The providers. Methods CreateBatch(IDatabase) Creates a batch. public SQLHelper CreateBatch(IDatabase source) Parameters source IDatabase The source. Returns SQLHelper Creates a batch Exceptions ArgumentNullException source ArgumentException Provider not found CreateGenerator(Type, IMappingSource) Creates a query generator. public IGenerator? CreateGenerator(Type type, IMappingSource mappingInfo) Parameters type Type The type of the mapped class.. mappingInfo IMappingSource The mapping information. Returns IGenerator The requested query generator. CreateGenerator<TMappedClass>(IMappingSource) Creates a query generator. public IGenerator<TMappedClass>? CreateGenerator<TMappedClass>(IMappingSource mappingInfo) where TMappedClass : class Parameters mappingInfo IMappingSource The mapping information. Returns IGenerator<TMappedClass> The requested query generator Type Parameters TMappedClass The type of the mapped class. Exceptions ArgumentNullException mappingInfo ArgumentException Provider not found"
  },
  "api/Inflatable.QueryProvider.QueryResults.html": {
    "href": "api/Inflatable.QueryProvider.QueryResults.html",
    "title": "Class QueryResults | Inflatable API Reference",
    "keywords": "Class QueryResults Namespace Inflatable.QueryProvider Assembly Inflatable.dll Query results public class QueryResults Inheritance object QueryResults Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QueryResults(IQuery, IEnumerable<Dynamo>, ISession, Aspectus) Initializes a new instance of the QueryResults class. public QueryResults(IQuery query, IEnumerable<Dynamo> values, ISession session, Aspectus aspectus) Parameters query IQuery The query. values IEnumerable<Dynamo> The values. session ISession The session. aspectus Aspectus The aspectus. Exceptions ArgumentNullException session or query ArgumentNullException query Properties Aspectus public Aspectus Aspectus { get; } Property Value Aspectus Query Gets the query. public IQuery Query { get; } Property Value IQuery The query. Session Gets the session. public ISession Session { get; } Property Value ISession The session. Values Gets the values. public List<Dynamo> Values { get; } Property Value List<Dynamo> The values. Methods CacheValues(string, List<QueryResults>, ICache?, InflatableOptions) Gets the cached items as a list. public static void CacheValues(string keyName, List<QueryResults> results, ICache? cache, InflatableOptions inflatableOptions) Parameters keyName string Name of the key. results List<QueryResults> The results. cache ICache The cache. inflatableOptions InflatableOptions The inflatable options. CanCopy(QueryResults, IEnumerable<IIDProperty>) Determines whether this instance can copy the specified results. public bool CanCopy(QueryResults results, IEnumerable<IIDProperty> idProperties) Parameters results QueryResults The results. idProperties IEnumerable<IIDProperty> The identifier properties. Returns bool true if this instance can copy the specified results; otherwise, false. ConvertValues<TObject>() Converts the values. public IList<TObject> ConvertValues<TObject>() where TObject : class Returns IList<TObject> The resulting list of objects. Type Parameters TObject The type of the object. Copy(QueryResults, IEnumerable<IIDProperty>) Copies the specified return value. public void Copy(QueryResults results, IEnumerable<IIDProperty> idProperties) Parameters results QueryResults The results. idProperties IEnumerable<IIDProperty> The identifier properties. CopyOrAdd(QueryResults, IEnumerable<IIDProperty>) Copies the specified return value. public void CopyOrAdd(QueryResults results, IEnumerable<IIDProperty> idProperties) Parameters results QueryResults The results. idProperties IEnumerable<IIDProperty> The identifier properties. RemoveCacheTag(string, ICache?) Removes the cache tag. public static void RemoveCacheTag(string name, ICache? cache) Parameters name string The name. cache ICache The cache. TryGetCached(string, ICache?, out List<QueryResults>) Gets the cached value. public static bool TryGetCached(string keyName, ICache? cache, out List<QueryResults> results) Parameters keyName string Name of the key. cache ICache The cache. results List<QueryResults> The results. Returns bool The cached value"
  },
  "api/Inflatable.QueryProvider.html": {
    "href": "api/Inflatable.QueryProvider.html",
    "title": "Namespace Inflatable.QueryProvider | Inflatable API Reference",
    "keywords": "Namespace Inflatable.QueryProvider Classes CachedResult Cached result Queries Query holder Query Query holder QueryProviderManager Query provider manager QueryResults Query results"
  },
  "api/Inflatable.Registration.InflatableOptions.html": {
    "href": "api/Inflatable.Registration.InflatableOptions.html",
    "title": "Class InflatableOptions | Inflatable API Reference",
    "keywords": "Class InflatableOptions Namespace Inflatable.Registration Assembly Inflatable.dll Inflatable options public class InflatableOptions : IOptions<InflatableOptions> Inheritance object InflatableOptions Implements IOptions<InflatableOptions> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AbsoluteExpirationQueriesKeptInCache Gets or sets the absolute expiration queries kept in cache. public TimeSpan AbsoluteExpirationQueriesKeptInCache { get; set; } Property Value TimeSpan The absolute expiration queries kept in cache. Default Gets the default. public static InflatableOptions Default { get; } Property Value InflatableOptions The default. MaxCacheSize Gets or sets the maximum size. public long? MaxCacheSize { get; set; } Property Value long? The maximum size. ScanFrequency Gets or sets the scan frequency. public TimeSpan ScanFrequency { get; set; } Property Value TimeSpan The scan frequency. SlidingExpirationQueriesKeptInCache Gets or sets the sliding expiration queries kept in cache. public TimeSpan SlidingExpirationQueriesKeptInCache { get; set; } Property Value TimeSpan The sliding expiration queries kept in cache. Value Gets the default configured Options instance. public InflatableOptions Value { get; } Property Value InflatableOptions See Also IOptions<TOptions>"
  },
  "api/Inflatable.Registration.html": {
    "href": "api/Inflatable.Registration.html",
    "title": "Namespace Inflatable.Registration | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Registration Classes InflatableOptions Inflatable options"
  },
  "api/Inflatable.Schema.DataModel.html": {
    "href": "api/Inflatable.Schema.DataModel.html",
    "title": "Class DataModel | Inflatable API Reference",
    "keywords": "Class DataModel Namespace Inflatable.Schema Assembly Inflatable.dll Data model class public class DataModel Inheritance object DataModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DataModel(IMappingSource, IConfiguration, DataModeler, Sherlock, SQLHelper, ILogger?) Initializes a new instance of the DataModel class. public DataModel(IMappingSource source, IConfiguration config, DataModeler dataModeler, Sherlock sherlock, SQLHelper batch, ILogger? logger = null) Parameters source IMappingSource The source. config IConfiguration The configuration. dataModeler DataModeler The data modeler. sherlock Sherlock The sherlock. batch SQLHelper The batch. logger ILogger The logger. Exceptions ArgumentNullException source or config or logger Properties GeneratedSchemaChanges Gets the generated schema changes. public string[] GeneratedSchemaChanges { get; } Property Value string[] The generated schema changes. SourceSpec Gets the source spec. public ISource SourceSpec { get; } Property Value ISource The source spec."
  },
  "api/Inflatable.Schema.SchemaManager.html": {
    "href": "api/Inflatable.Schema.SchemaManager.html",
    "title": "Class SchemaManager | Inflatable API Reference",
    "keywords": "Class SchemaManager Namespace Inflatable.Schema Assembly Inflatable.dll Model manager public class SchemaManager Inheritance object SchemaManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SchemaManager(MappingManager, IConfiguration, DataModeler, Sherlock, SQLHelper, ILogger<SchemaManager>) Initializes a new instance of the SchemaManager class. public SchemaManager(MappingManager mappings, IConfiguration config, DataModeler dataModeler, Sherlock sherlock, SQLHelper sQLHelper, ILogger<SchemaManager> logger = null) Parameters mappings MappingManager The mappings. config IConfiguration The configuration. dataModeler DataModeler The data modeler. sherlock Sherlock The sherlock analyzer. sQLHelper SQLHelper The s ql helper. logger ILogger<SchemaManager> The logger. Exceptions ArgumentNullException logger Properties Models Gets the models. public IEnumerable<DataModel> Models { get; } Property Value IEnumerable<DataModel> The models."
  },
  "api/Inflatable.Schema.html": {
    "href": "api/Inflatable.Schema.html",
    "title": "Namespace Inflatable.Schema | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Schema Classes DataModel Data model class SchemaManager Model manager"
  },
  "api/Inflatable.Sessions.Commands.BaseClasses.CommandBaseClass.html": {
    "href": "api/Inflatable.Sessions.Commands.BaseClasses.CommandBaseClass.html",
    "title": "Class CommandBaseClass | Inflatable API Reference",
    "keywords": "Class CommandBaseClass Namespace Inflatable.Sessions.Commands.BaseClasses Assembly Inflatable.dll Command base class public abstract class CommandBaseClass : ICommand Inheritance object CommandBaseClass Implements ICommand Derived DeleteCommand SaveCommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandBaseClass(MappingManager, QueryProviderManager, ICache, object[]) Initializes a new instance of the CommandBaseClass class. protected CommandBaseClass(MappingManager mappingManager, QueryProviderManager queryProviderManager, ICache cache, object[] objects) Parameters mappingManager MappingManager The mapping manager. queryProviderManager QueryProviderManager The query provider manager. cache ICache The cache. objects object[] The objects. Properties Cache Gets the cache. public ICache Cache { get; } Property Value ICache The cache. CommandType Gets the type of the command. public abstract CommandType CommandType { get; } Property Value CommandType The type of the command. MappingManager Gets the mapping manager. protected MappingManager MappingManager { get; } Property Value MappingManager The mapping manager. Objects Gets the objects. public object[] Objects { get; } Property Value object[] The objects. QueryProviderManager Gets the query provider manager. protected QueryProviderManager QueryProviderManager { get; } Property Value QueryProviderManager The query provider manager. Methods CanExecute(object, IMappingSource) Determines whether this instance can execute the specified object. protected static bool CanExecute(object @object, IMappingSource source) Parameters object object The object. source IMappingSource The source. Returns bool true if this instance can execute the specified object; otherwise, false. CompareObjects(object, object, IMappingSource) Compares the objects. protected static bool CompareObjects(object obj1, object obj2, IMappingSource source) Parameters obj1 object The obj1. obj2 object The obj2. source IMappingSource The source. Returns bool True if they're the same, false otherwise. Execute(IMappingSource) Executes this instance. public abstract int Execute(IMappingSource source) Parameters source IMappingSource The source. Returns int The number of rows that are modified. ExecuteAsync(IMappingSource) Executes this instance. public abstract Task<int> ExecuteAsync(IMappingSource source) Parameters source IMappingSource The source. Returns Task<int> The number of rows that are modified. Merge(ICommand) Merges the specified command. public bool Merge(ICommand command) Parameters command ICommand The command. Returns bool True if the items are merged, false otherwise. RemoveItemsFromCache(object) Removes the items from cache. protected void RemoveItemsFromCache(object @object) Parameters object object The object. WasObjectSeen(object, IList<object>, IMappingSource) Determines if the object was seen before. protected static bool WasObjectSeen(object @object, IList<object> objectsSeen, IMappingSource source) Parameters object object The object. objectsSeen IList<object> The objects seen already. source IMappingSource The source. Returns bool True if it was seen, otherwise false. See Also ICommand"
  },
  "api/Inflatable.Sessions.Commands.BaseClasses.html": {
    "href": "api/Inflatable.Sessions.Commands.BaseClasses.html",
    "title": "Namespace Inflatable.Sessions.Commands.BaseClasses | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Sessions.Commands.BaseClasses Classes CommandBaseClass Command base class"
  },
  "api/Inflatable.Sessions.Commands.DeleteCommand.html": {
    "href": "api/Inflatable.Sessions.Commands.DeleteCommand.html",
    "title": "Class DeleteCommand | Inflatable API Reference",
    "keywords": "Class DeleteCommand Namespace Inflatable.Sessions.Commands Assembly Inflatable.dll Delete command public class DeleteCommand : CommandBaseClass, ICommand Inheritance object CommandBaseClass DeleteCommand Implements ICommand Inherited Members CommandBaseClass.Cache CommandBaseClass.Objects CommandBaseClass.MappingManager CommandBaseClass.QueryProviderManager CommandBaseClass.Merge(ICommand) CommandBaseClass.CanExecute(object, IMappingSource) CommandBaseClass.CompareObjects(object, object, IMappingSource) CommandBaseClass.WasObjectSeen(object, IList<object>, IMappingSource) CommandBaseClass.RemoveItemsFromCache(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteCommand(MappingManager, QueryProviderManager, ICache, params object[]) Initializes a new instance of the DeleteCommand class. public DeleteCommand(MappingManager mappingManager, QueryProviderManager queryProviderManager, ICache cache, params object[] objectsToDelete) Parameters mappingManager MappingManager The mapping manager. queryProviderManager QueryProviderManager The query provider manager. cache ICache The cache. objectsToDelete object[] The objects to delete. Properties CommandType Gets the type of the command. public override CommandType CommandType { get; } Property Value CommandType The type of the command. Methods Execute(IMappingSource) Executes this instance. public override int Execute(IMappingSource source) Parameters source IMappingSource The source. Returns int The number of rows that are modified. ExecuteAsync(IMappingSource) Executes this instance. public override Task<int> ExecuteAsync(IMappingSource source) Parameters source IMappingSource Mapping source. Returns Task<int> The number of rows that are modified. See Also CommandBaseClass"
  },
  "api/Inflatable.Sessions.Commands.Enums.CommandType.html": {
    "href": "api/Inflatable.Sessions.Commands.Enums.CommandType.html",
    "title": "Enum CommandType | Inflatable API Reference",
    "keywords": "Enum CommandType Namespace Inflatable.Sessions.Commands.Enums Assembly Inflatable.dll Command types public enum CommandType Fields Delete = 0 The delete type Save = 1 The save type"
  },
  "api/Inflatable.Sessions.Commands.Enums.html": {
    "href": "api/Inflatable.Sessions.Commands.Enums.html",
    "title": "Namespace Inflatable.Sessions.Commands.Enums | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Sessions.Commands.Enums Enums CommandType Command types"
  },
  "api/Inflatable.Sessions.Commands.Interfaces.ICommand.html": {
    "href": "api/Inflatable.Sessions.Commands.Interfaces.ICommand.html",
    "title": "Interface ICommand | Inflatable API Reference",
    "keywords": "Interface ICommand Namespace Inflatable.Sessions.Commands.Interfaces Assembly Inflatable.dll Command interface public interface ICommand Properties CommandType Gets the type of the command. CommandType CommandType { get; } Property Value CommandType The type of the command. Methods Execute(IMappingSource) Executes this instance. int Execute(IMappingSource source) Parameters source IMappingSource The source. Returns int The number of rows that are modified. ExecuteAsync(IMappingSource) Executes this instance. Task<int> ExecuteAsync(IMappingSource source) Parameters source IMappingSource The source. Returns Task<int> The number of rows that are modified. Merge(ICommand) Merges the specified command. bool Merge(ICommand command) Parameters command ICommand The command. Returns bool True if the items are merged, false otherwise."
  },
  "api/Inflatable.Sessions.Commands.Interfaces.html": {
    "href": "api/Inflatable.Sessions.Commands.Interfaces.html",
    "title": "Namespace Inflatable.Sessions.Commands.Interfaces | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Sessions.Commands.Interfaces Interfaces ICommand Command interface"
  },
  "api/Inflatable.Sessions.Commands.SaveCommand.html": {
    "href": "api/Inflatable.Sessions.Commands.SaveCommand.html",
    "title": "Class SaveCommand | Inflatable API Reference",
    "keywords": "Class SaveCommand Namespace Inflatable.Sessions.Commands Assembly Inflatable.dll Save command public class SaveCommand : CommandBaseClass, ICommand Inheritance object CommandBaseClass SaveCommand Implements ICommand Inherited Members CommandBaseClass.Cache CommandBaseClass.Objects CommandBaseClass.MappingManager CommandBaseClass.QueryProviderManager CommandBaseClass.Merge(ICommand) CommandBaseClass.CanExecute(object, IMappingSource) CommandBaseClass.CompareObjects(object, object, IMappingSource) CommandBaseClass.WasObjectSeen(object, IList<object>, IMappingSource) CommandBaseClass.RemoveItemsFromCache(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SaveCommand(MappingManager, QueryProviderManager, ICache, object[]) Initializes a new instance of the SaveCommand class. public SaveCommand(MappingManager mappingManager, QueryProviderManager queryProviderManager, ICache cache, object[] objects) Parameters mappingManager MappingManager The mapping manager. queryProviderManager QueryProviderManager The query provider manager. cache ICache The cache. objects object[] The objects. Properties CommandType Gets the type of the command. public override CommandType CommandType { get; } Property Value CommandType The type of the command. Methods Execute(IMappingSource) Executes this instance. public override int Execute(IMappingSource source) Parameters source IMappingSource The source. Returns int The number of rows that are modified. ExecuteAsync(IMappingSource) Executes this instance. public override Task<int> ExecuteAsync(IMappingSource source) Parameters source IMappingSource The source. Returns Task<int> The number of rows that are modified. See Also CommandBaseClass"
  },
  "api/Inflatable.Sessions.Commands.html": {
    "href": "api/Inflatable.Sessions.Commands.html",
    "title": "Namespace Inflatable.Sessions.Commands | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Sessions.Commands Classes DeleteCommand Delete command SaveCommand Save command"
  },
  "api/Inflatable.Sessions.ISession.html": {
    "href": "api/Inflatable.Sessions.ISession.html",
    "title": "Interface ISession | Inflatable API Reference",
    "keywords": "Interface ISession Namespace Inflatable.Sessions Assembly Inflatable.dll Session interface public interface ISession Methods ClearCache() Clears the cache. void ClearCache() Delete<TObject>(params TObject[]) Deletes the specified objects to delete. ISession Delete<TObject>(params TObject[] objectsToDelete) where TObject : class Parameters objectsToDelete TObject[] The objects to delete. Returns ISession Type Parameters TObject The type of the object. Execute() Executes this instance. int Execute() Returns int ExecuteAsync() Executes the asynchronous. Task<int> ExecuteAsync() Returns Task<int> ExecuteAsync<TObject>(IDictionary<IMappingSource, QueryData<TObject>>) Executes the asynchronous. Task<IEnumerable<dynamic>> ExecuteAsync<TObject>(IDictionary<IMappingSource, QueryData<TObject>> queries) where TObject : class Parameters queries IDictionary<IMappingSource, QueryData<TObject>> The queries. Returns Task<IEnumerable<dynamic>> Type Parameters TObject The type of the object. ExecuteAsync<TObject>(string, CommandType, string, params object[]) Executes the asynchronous. Task<IEnumerable<TObject>> ExecuteAsync<TObject>(string command, CommandType type, string connection, params object[] parameters) where TObject : class Parameters command string The command. type CommandType The type. connection string The connection. parameters object[] The parameters. Returns Task<IEnumerable<TObject>> Type Parameters TObject The type of the object. ExecuteCountAsync<TObject>(IDictionary<IMappingSource, QueryData<TObject>>) Executes the count asynchronous. Task<int> ExecuteCountAsync<TObject>(IDictionary<IMappingSource, QueryData<TObject>> queries) where TObject : class Parameters queries IDictionary<IMappingSource, QueryData<TObject>> The queries. Returns Task<int> Type Parameters TObject The type of the object. ExecuteDynamicAsync(string, CommandType, string, params object[]) Executes the dynamic asynchronous. Task<IEnumerable<dynamic>> ExecuteDynamicAsync(string command, CommandType type, string connection, params object[] parameters) Parameters command string The command. type CommandType The type. connection string The connection. parameters object[] The parameters. Returns Task<IEnumerable<dynamic>> ExecuteScalarAsync<TObject>(string, CommandType, string, params object[]) Executes the scalar asynchronous. Task<TObject> ExecuteScalarAsync<TObject>(string command, CommandType type, string connection, params object[] parameters) Parameters command string The command. type CommandType The type. connection string The connection. parameters object[] The parameters. Returns Task<TObject> Type Parameters TObject The type of the object. LoadPropertiesAsync<TObject, TData>(TObject, string) Loads the properties asynchronous. Task<IList<TData>> LoadPropertiesAsync<TObject, TData>(TObject objectToLoadProperty, string propertyName) where TObject : class where TData : class Parameters objectToLoadProperty TObject The object to load property. propertyName string Name of the property. Returns Task<IList<TData>> Type Parameters TObject The type of the object. TData The type of the data. LoadProperties<TObject, TData>(TObject, string) Loads the properties. IList<TData> LoadProperties<TObject, TData>(TObject objectToLoadProperty, string propertyName) where TObject : class where TData : class Parameters objectToLoadProperty TObject The object to load property. propertyName string Name of the property. Returns IList<TData> Type Parameters TObject The type of the object. TData The type of the data. LoadPropertyAsync<TObject, TData>(TObject, string) Loads the property asynchronous. Task<TData> LoadPropertyAsync<TObject, TData>(TObject objectToLoadProperty, string propertyName) where TObject : class where TData : class Parameters objectToLoadProperty TObject The object to load property. propertyName string Name of the property. Returns Task<TData> Type Parameters TObject The type of the object. TData The type of the data. LoadProperty<TObject, TData>(TObject, string) Loads the property. TData LoadProperty<TObject, TData>(TObject objectToLoadProperty, string propertyName) where TObject : class where TData : class Parameters objectToLoadProperty TObject The object to load property. propertyName string Name of the property. Returns TData Type Parameters TObject The type of the object. TData The type of the data. Save<TObject>(params TObject[]) Saves the specified objects to save. ISession Save<TObject>(params TObject[] objectsToSave) where TObject : class Parameters objectsToSave TObject[] The objects to save. Returns ISession Type Parameters TObject The type of the object."
  },
  "api/Inflatable.Sessions.Session.html": {
    "href": "api/Inflatable.Sessions.Session.html",
    "title": "Class Session | Inflatable API Reference",
    "keywords": "Class Session Namespace Inflatable.Sessions Assembly Inflatable.dll Class for an individual session public class Session : ISession Inheritance object Session Implements ISession Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Session(Aspectus, DataMapper, MappingManager, SchemaManager, QueryProviderManager, Cache, IEnumerable<IOptions<InflatableOptions>>, IServiceProvider, ILogger<Session>?) Initializes a new instance of the Session class. public Session(Aspectus aspectus, DataMapper dataMapper, MappingManager mappingManager, SchemaManager schemaManager, QueryProviderManager queryProviderManager, Cache cacheManager, IEnumerable<IOptions<InflatableOptions>> options, IServiceProvider serviceProvider, ILogger<Session>? logger = null) Parameters aspectus Aspectus dataMapper DataMapper The data mapper. mappingManager MappingManager The mapping manager. schemaManager SchemaManager The schema manager. queryProviderManager QueryProviderManager The query provider manager. cacheManager Cache The cache manager. options IEnumerable<IOptions<InflatableOptions>> The options. serviceProvider IServiceProvider logger ILogger<Session> The Logger?. Exceptions ArgumentNullException mappingManager or queryProviderManager or logger Methods ClearCache() Clears the cache. public void ClearCache() Delete<TObject>(params TObject[]) Adds the objects for deletion. public ISession Delete<TObject>(params TObject[] objectsToDelete) where TObject : class Parameters objectsToDelete TObject[] The objects to delete. Returns ISession This. Type Parameters TObject The type of the object. Execute() Executes all queued commands. public int Execute() Returns int The number of rows affected. ExecuteAsync() Executes all queued commands. public Task<int> ExecuteAsync() Returns Task<int> The number of rows affected. ExecuteAsync<TObject>(IDictionary<IMappingSource, QueryData<TObject>>) Executes the specified command and returns items of a specific type. public Task<IEnumerable<dynamic>> ExecuteAsync<TObject>(IDictionary<IMappingSource, QueryData<TObject>> queries) where TObject : class Parameters queries IDictionary<IMappingSource, QueryData<TObject>> The queries to run. Returns Task<IEnumerable<dynamic>> The resulting data Type Parameters TObject The type of the object. ExecuteAsync<TObject>(string, CommandType, string, params object[]) Executes the specified command and returns items of a specific type. public Task<IEnumerable<TObject>> ExecuteAsync<TObject>(string command, CommandType type, string connection, params object[] parameters) where TObject : class Parameters command string The command. type CommandType The type. connection string The connection name. parameters object[] The parameters. Returns Task<IEnumerable<TObject>> The list of objects Type Parameters TObject The type of the object. Exceptions ArgumentException ExecuteCountAsync<TObject>(IDictionary<IMappingSource, QueryData<TObject>>) Executes the specified command and returns the count. public Task<int> ExecuteCountAsync<TObject>(IDictionary<IMappingSource, QueryData<TObject>> queries) where TObject : class Parameters queries IDictionary<IMappingSource, QueryData<TObject>> The queries to run. Returns Task<int> The resulting data Type Parameters TObject The type of the object. ExecuteDynamicAsync(string, CommandType, string, params object[]) Executes the specified command and returns items of a specific type. public Task<IEnumerable<dynamic>> ExecuteDynamicAsync(string command, CommandType type, string connection, params object[] parameters) Parameters command string The command. type CommandType The type. connection string The connection name. parameters object[] The parameters. Returns Task<IEnumerable<dynamic>> The list of objects Exceptions ArgumentException ExecuteScalarAsync<TObject>(string, CommandType, string, params object[]) Executes the specified command and returns the first item of a specific type. public Task<TObject> ExecuteScalarAsync<TObject>(string command, CommandType type, string connection, params object[] parameters) Parameters command string The command. type CommandType The type. connection string The connection name. parameters object[] The parameters. Returns Task<TObject> The list of objects Type Parameters TObject The type of the object. Exceptions ArgumentException Source not found {connection} LoadPropertiesAsync<TObject, TData>(TObject, string) Loads a property (primarily used internally for lazy loading) public Task<IList<TData>> LoadPropertiesAsync<TObject, TData>(TObject objectToLoadProperty, string propertyName) where TObject : class where TData : class Parameters objectToLoadProperty TObject The object to load property. propertyName string Name of the property. Returns Task<IList<TData>> The appropriate property value Type Parameters TObject The type of the object. TData The type of the data. LoadProperties<TObject, TData>(TObject, string) Loads a property (primarily used internally for lazy loading) public IList<TData> LoadProperties<TObject, TData>(TObject objectToLoadProperty, string propertyName) where TObject : class where TData : class Parameters objectToLoadProperty TObject The object to load property. propertyName string Name of the property. Returns IList<TData> The appropriate property value Type Parameters TObject The type of the object. TData The type of the data. LoadPropertyAsync<TObject, TData>(TObject, string) Loads a property (primarily used internally for lazy loading) public Task<TData> LoadPropertyAsync<TObject, TData>(TObject objectToLoadProperty, string propertyName) where TObject : class where TData : class Parameters objectToLoadProperty TObject The object to load property. propertyName string Name of the property. Returns Task<TData> The appropriate property value Type Parameters TObject The type of the object. TData The type of the data. LoadProperty<TObject, TData>(TObject, string) Loads a property (primarily used internally for lazy loading) public TData LoadProperty<TObject, TData>(TObject objectToLoadProperty, string propertyName) where TObject : class where TData : class Parameters objectToLoadProperty TObject The object to load property. propertyName string Name of the property. Returns TData The appropriate property value Type Parameters TObject The type of the object. TData The type of the data. Save<TObject>(params TObject[]) Adds the specified objects to save. public ISession Save<TObject>(params TObject[] objectsToSave) where TObject : class Parameters objectsToSave TObject[] The objects to save. Returns ISession This Type Parameters TObject The type of the object. See Also ISession"
  },
  "api/Inflatable.Sessions.SessionQueryInfo.html": {
    "href": "api/Inflatable.Sessions.SessionQueryInfo.html",
    "title": "Class SessionQueryInfo | Inflatable API Reference",
    "keywords": "Class SessionQueryInfo Namespace Inflatable.Sessions Assembly Inflatable.dll Session query info public class SessionQueryInfo Inheritance object SessionQueryInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SessionQueryInfo(IMappingSource, IMapping[], IMapping[]) Initializes a new instance of the SessionQueryInfo class. public SessionQueryInfo(IMappingSource source, IMapping[] childMappings, IMapping[] parentMappings) Parameters source IMappingSource The source. childMappings IMapping[] The child mappings. parentMappings IMapping[] The parent mappings. Properties AssociatedMapping Gets or sets the associated mapping. public IMapping AssociatedMapping { get; set; } Property Value IMapping The associated mapping. ChildMappings Gets or sets the child mappings. public IMapping[] ChildMappings { get; set; } Property Value IMapping[] The child mappings. IDColumnInfo Gets or sets the identifier column information. public IEnumerable<IQueryColumnInfo> IDColumnInfo { get; set; } Property Value IEnumerable<IQueryColumnInfo> The identifier column information. IDProperties Gets or sets the identifier properties. public IEnumerable<IIDProperty> IDProperties { get; set; } Property Value IEnumerable<IIDProperty> The identifier properties. ParentMappings Gets or sets the parent mappings. public IMapping[] ParentMappings { get; set; } Property Value IMapping[] The parent mappings. Source Gets or sets the source. public IMappingSource Source { get; set; } Property Value IMappingSource The source."
  },
  "api/Inflatable.Sessions.html": {
    "href": "api/Inflatable.Sessions.html",
    "title": "Namespace Inflatable.Sessions | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Sessions Classes Session Class for an individual session SessionQueryInfo Session query info Interfaces ISession Session interface"
  },
  "api/Inflatable.Utils.ExpressionTypeConverter-2.html": {
    "href": "api/Inflatable.Utils.ExpressionTypeConverter-2.html",
    "title": "Class ExpressionTypeConverter<TData, TReturn> | Inflatable API Reference",
    "keywords": "Class ExpressionTypeConverter<TData, TReturn> Namespace Inflatable.Utils Assembly Inflatable.dll Expression type converter public class ExpressionTypeConverter<TData, TReturn> Type Parameters TData The type of the data. TReturn The type of the return. Inheritance object ExpressionTypeConverter<TData, TReturn> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExpressionTypeConverter(Expression<Func<TData, TReturn>>) Initializes a new instance of the ExpressionTypeConverter<TData, TReturn> class. public ExpressionTypeConverter(Expression<Func<TData, TReturn>> expression) Parameters expression Expression<Func<TData, TReturn>> The expression. Properties Expression Gets or sets the expression. public Expression<Func<TData, TReturn>> Expression { get; set; } Property Value Expression<Func<TData, TReturn>> The expression. Methods Convert<TNewType>() Converts this instance. public Expression<Func<TNewType, TReturn>> Convert<TNewType>() Returns Expression<Func<TNewType, TReturn>> Type Parameters TNewType The type of the new type."
  },
  "api/Inflatable.Utils.Tree-1.html": {
    "href": "api/Inflatable.Utils.Tree-1.html",
    "title": "Class Tree<TData> | Inflatable API Reference",
    "keywords": "Class Tree<TData> Namespace Inflatable.Utils Assembly Inflatable.dll Tree holding data. public class Tree<TData> Type Parameters TData The type of the data. Inheritance object Tree<TData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Tree(TData) Initializes a new instance of the Tree<TData> class. public Tree(TData rootData) Parameters rootData TData The root data. Properties Root Gets or sets the root. public TreeNode<TData> Root { get; set; } Property Value TreeNode<TData> The root. Methods ContainsNode(TData, Func<TData, TData, bool>) Determines whether the specified data contains node. public bool ContainsNode(TData data, Func<TData, TData, bool> comparer) Parameters data TData The data. comparer Func<TData, TData, bool> The comparer. Returns bool true if the specified data contains node; otherwise, false. ToList() Converts the tree to a list. public List<TData> ToList() Returns List<TData> The resulting list ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance."
  },
  "api/Inflatable.Utils.TreeNode-1.html": {
    "href": "api/Inflatable.Utils.TreeNode-1.html",
    "title": "Class TreeNode<TData> | Inflatable API Reference",
    "keywords": "Class TreeNode<TData> Namespace Inflatable.Utils Assembly Inflatable.dll Tree node public class TreeNode<TData> Type Parameters TData The type of the data. Inheritance object TreeNode<TData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TreeNode(TData, TreeNode<TData>?) Initializes a new instance of the TreeNode<TData> class. public TreeNode(TData data, TreeNode<TData>? parent) Parameters data TData The data. parent TreeNode<TData> The parent. Properties Data Gets or sets the data. public TData Data { get; set; } Property Value TData The data. Nodes Gets or sets the nodes. public List<TreeNode<TData>> Nodes { get; set; } Property Value List<TreeNode<TData>> The nodes. Parent Gets or sets the parent. public TreeNode<TData>? Parent { get; set; } Property Value TreeNode<TData> The parent. Methods AddNode(TData) Adds the node. public TreeNode<TData> AddNode(TData data) Parameters data TData The data. Returns TreeNode<TData> The resulting node. ContainsNode(TData, Func<TData, TData, bool>) Determines whether the specified data contains node. public bool ContainsNode(TData data, Func<TData, TData, bool> comparer) Parameters data TData The data. comparer Func<TData, TData, bool> The comparer. Returns bool true if the specified data contains node; otherwise, false. Remove() Removes this instance from the tree public TreeNode<TData> Remove() Returns TreeNode<TData> This ToList() Returns the sub tree as a list. public List<TData> ToList() Returns List<TData> The resulting list. ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance."
  },
  "api/Inflatable.Utils.Visitor.html": {
    "href": "api/Inflatable.Utils.Visitor.html",
    "title": "Class Visitor | Inflatable API Reference",
    "keywords": "Class Visitor Namespace Inflatable.Utils Assembly Inflatable.dll Visitor expression visitor public class Visitor : ExpressionVisitor Inheritance object ExpressionVisitor Visitor Inherited Members ExpressionVisitor.Visit(ReadOnlyCollection<Expression>) ExpressionVisitor.Visit(Expression) ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string) ExpressionVisitor.VisitAndConvert<T>(T, string) ExpressionVisitor.VisitBinary(BinaryExpression) ExpressionVisitor.VisitBlock(BlockExpression) ExpressionVisitor.VisitCatchBlock(CatchBlock) ExpressionVisitor.VisitConditional(ConditionalExpression) ExpressionVisitor.VisitConstant(ConstantExpression) ExpressionVisitor.VisitDebugInfo(DebugInfoExpression) ExpressionVisitor.VisitDefault(DefaultExpression) ExpressionVisitor.VisitDynamic(DynamicExpression) ExpressionVisitor.VisitElementInit(ElementInit) ExpressionVisitor.VisitExtension(Expression) ExpressionVisitor.VisitGoto(GotoExpression) ExpressionVisitor.VisitIndex(IndexExpression) ExpressionVisitor.VisitInvocation(InvocationExpression) ExpressionVisitor.VisitLabel(LabelExpression) ExpressionVisitor.VisitLabelTarget(LabelTarget) ExpressionVisitor.VisitLambda<T>(Expression<T>) ExpressionVisitor.VisitListInit(ListInitExpression) ExpressionVisitor.VisitLoop(LoopExpression) ExpressionVisitor.VisitMember(MemberExpression) ExpressionVisitor.VisitMemberAssignment(MemberAssignment) ExpressionVisitor.VisitMemberBinding(MemberBinding) ExpressionVisitor.VisitMemberInit(MemberInitExpression) ExpressionVisitor.VisitMemberListBinding(MemberListBinding) ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding) ExpressionVisitor.VisitMethodCall(MethodCallExpression) ExpressionVisitor.VisitNew(NewExpression) ExpressionVisitor.VisitNewArray(NewArrayExpression) ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression) ExpressionVisitor.VisitSwitch(SwitchExpression) ExpressionVisitor.VisitSwitchCase(SwitchCase) ExpressionVisitor.VisitTry(TryExpression) ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression) ExpressionVisitor.VisitUnary(UnaryExpression) ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Visitor(ParameterExpression) Initializes a new instance of the Visitor class. public Visitor(ParameterExpression parameter) Parameters parameter ParameterExpression The parameter. Methods VisitParameter(ParameterExpression) Visits the ParameterExpression. protected override Expression VisitParameter(ParameterExpression node) Parameters node ParameterExpression The expression to visit. Returns Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. See Also ExpressionVisitor"
  },
  "api/Inflatable.Utils.html": {
    "href": "api/Inflatable.Utils.html",
    "title": "Namespace Inflatable.Utils | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Utils Classes ExpressionTypeConverter<TData, TReturn> Expression type converter TreeNode<TData> Tree node Tree<TData> Tree holding data. Visitor Visitor expression visitor"
  },
  "api/Inflatable.html": {
    "href": "api/Inflatable.html",
    "title": "Namespace Inflatable | Inflatable API Reference",
    "keywords": "Namespace Inflatable Classes DbContext Db Context DbContext<TObject> Db context"
  },
  "api/Microsoft.Extensions.DependencyInjection.Registration.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.Registration.html",
    "title": "Class Registration | Inflatable API Reference",
    "keywords": "Class Registration Namespace Microsoft.Extensions.DependencyInjection Assembly Inflatable.dll Registration extension methods public static class Registration Inheritance object Registration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterInflatable(ICanisterConfiguration?) Registers the library with the bootstrapper. public static ICanisterConfiguration? RegisterInflatable(this ICanisterConfiguration? bootstrapper) Parameters bootstrapper ICanisterConfiguration The bootstrapper. Returns ICanisterConfiguration The bootstrapper"
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | Inflatable API Reference",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes Registration Registration extension methods"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | Inflatable API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | Inflatable API Reference",
    "keywords": "Code using BigBook; using Inflatable; using Inflatable.Sessions; using Microsoft.Data.SqlClient; using Microsoft.Extensions.DependencyInjection; using SQLHelperDB; using System; using System.Data; using System.Linq; using System.Threading.Tasks; using TestApp.Models; namespace TestApp { /// <summary> /// Example program to show how to use the ORM /// </summary> internal class Program { /// <summary> /// The string val1 constant /// </summary> private const string StringVal1Const = \"A\"; /// <summary> /// The string val2 constant /// </summary> private const string StringVal2Const = \"ASDFGHKL\"; /// <summary> /// The services for the application /// </summary> private static ServiceProvider Services; /// <summary> /// A more complex example /// </summary> private static async Task ComplexTest() { Console.WriteLine(\"Complex test\"); Console.WriteLine(\"------------\"); // Starting by setting up the objects we'll be using Console.WriteLine(\"Setting up values\"); ComplexClass[] Values = 200.Times(x => { var ReturnValue = new ComplexClass() { Value1 = \"A\", Value2 = 1, Value3 = 2 }; ReturnValue.ManyToOneProperty.Add(new ComplexClass2() { DateValue = DateTime.Now }); return ReturnValue; }).ToArray(); // Save the objects to the database Console.WriteLine(\"Saving values\"); await new DbContext().Save(Values).ExecuteAsync().ConfigureAwait(false); // Now let's query the database and get back the values we saved Console.WriteLine(\"Querying values\"); var Results = DbContext<ComplexClass>.CreateQuery().ToList(); // Now let's update a sub class's properties Results.ForEach(x => x.ManyToOneProperty.ForEach(y => y.DateValue = DateTime.Now)); // And now let's save the changes Console.WriteLine(\"Resaving values\"); new DbContext().Save(Results.ToArray()).ExecuteAsync().GetAwaiter().GetResult(); Console.WriteLine(\"Done\"); Console.WriteLine(); } /// <summary> /// Data cleanup task /// </summary> private static void DataCleanup() { SQLHelper Helper = Services.GetService<SQLHelper>(); try { Task.Run(async () => await Helper.CreateBatch(SqlClientFactory.Instance, \"Data Source=localhost;Initial Catalog=master;Integrated Security=SSPI;Pooling=false\") .AddQuery(CommandType.Text, \"ALTER DATABASE InflatableTestDatabase SET OFFLINE WITH ROLLBACK IMMEDIATE\\r\\nALTER DATABASE InflatableTestDatabase SET ONLINE\\r\\nDROP DATABASE InflatableTestDatabase\") .ExecuteScalarAsync<int>().ConfigureAwait(false)).GetAwaiter().GetResult(); } catch { } } /// <summary> /// Defines the entry point of the application. /// </summary> private static async Task Main() { // Let's set up the services we'll be using for the application Services = new ServiceCollection() .AddLogging() // Add logging .AddCanisterModules() // Add Inflatable and required dependencies .BuildServiceProvider(); // Build the service provider // Now let's set up the database Console.WriteLine(\"Setting up session\"); Console.WriteLine(); Services.GetService<ISession>(); try { await SimpleTest().ConfigureAwait(false); await ComplexTest().ConfigureAwait(false); } finally { DataCleanup(); } } /// <summary> /// The simple test example /// </summary> private static async Task SimpleTest() { Console.WriteLine(\"Simple test\"); Console.WriteLine(\"-----------\"); // Starting by setting up the objects we'll be using Console.WriteLine(\"Setting up values\"); SimpleClass[] Values = 200.Times(x => new SimpleClass() { BoolValue = x % 2 == 0, StringValue1 = StringVal1Const, StringValue2 = StringVal2Const }).ToArray(); // Save the objects to the database Console.WriteLine(\"Saving values\"); new DbContext().Save(Values).ExecuteAsync().GetAwaiter().GetResult(); // Now let's query the database and get back the values we saved Console.WriteLine(\"Querying values\"); var Results = DbContext<SimpleClass>.CreateQuery().Where(x => x.BoolValue).ToList(); Console.WriteLine(\"Done\"); Console.WriteLine(); } } } Output Setting up session Simple Test ----------- Setting up values Saving values Querying values Done Complex Test ------------ Setting up values Saving values Querying values Resaving values Done"
  },
  "index.html": {
    "href": "index.html",
    "title": "Inflatable | Inflatable API Reference",
    "keywords": "Inflatable Inflatable is a feature-rich ORM (Object-Relational Mapping) library for .NET applications. It provides seamless integration with your data access layer, allowing you to interact with your database using a convenient and expressive API. Getting Started To use Inflatable, you need to wire it up with you ServiceCollection. Follow the steps below to configure your application: Install the Inflatable package from NuGet. In your application's startup code, add the following lines to configure Canister: var services = new ServiceCollection(); services.AddCanisterModules(); // ... The AddCanisterModules() extension method registers Inflatable with the IoC container. With these steps completed, Inflatable is ready to be used within your application. Basic Usage The primary class of interest in Inflatable is the DbContext class, which provides a rich set of features for querying and interacting with your database. Querying Data To retrieve data from the database, use the DbContext<T> class with the CreateQuery() method: var results = DbContext<MyPoco>.CreateQuery().Where(x => x.MyProperty == 12).ToList(); The CreateQuery() method returns an IQueryable<T>, allowing you to chain additional query operations such as Where, Select, OrderBy, Distinct, First, Single, Take, and their variations. Please note that functions like GroupBy, Union, and Include are not currently implemented. For more complex queries or when you need to execute raw SQL, you can use the ExecuteAsync() method: var results = await DbContext<MyPoco>.ExecuteAsync(\"SELECT * FROM MyTable\", CommandType.Text, \"MyConnectionString\"); Saving and Deleting Objects To save or delete an object, you need to create an instance of DbContext or a Session object: await new DbContext<MyPoco>().Save(myObject).ExecuteAsync(); Alternatively, you can resolve the DbContext from the service provider in your application. Documentation For detailed information on using Inflatable and its advanced features, refer to the documentation available on the project's website. Contributing Contributions are welcome! If you have any bug reports, feature requests, or would like to contribute to the project, please check out the contribution guidelines."
  }
}