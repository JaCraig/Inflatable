{
  "api/Inflatable.Aspect.EndMethod.IListProperty.html": {
    "href": "api/Inflatable.Aspect.EndMethod.IListProperty.html",
    "title": "Class IListProperty | Inflatable API Reference",
    "keywords": "Class IListProperty List property Inheritance object IListProperty Implements IEndMethodHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Aspect.EndMethod Assembly: Inflatable.dll Syntax public class IListProperty : IEndMethodHelper Methods | Improve this Doc View Source Setup(string, MethodInfo, IMapping, StringBuilder) Setups the specified return value name. Declaration public void Setup(string returnValueName, MethodInfo method, IMapping mapping, StringBuilder builder) Parameters Type Name Description string returnValueName Name of the return value. MethodInfo method The method. IMapping mapping The mapping. StringBuilder builder The builder. See Also IEndMethodHelper Implements IEndMethodHelper See Also IEndMethodHelper"
  },
  "api/Inflatable.Aspect.EndMethod.IManyToOnePropertyLazyLoad.html": {
    "href": "api/Inflatable.Aspect.EndMethod.IManyToOnePropertyLazyLoad.html",
    "title": "Class IManyToOnePropertyLazyLoad | Inflatable API Reference",
    "keywords": "Class IManyToOnePropertyLazyLoad Many to one lazy loading setup. Inheritance object IManyToOnePropertyLazyLoad Implements IEndMethodHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Aspect.EndMethod Assembly: Inflatable.dll Syntax public class IManyToOnePropertyLazyLoad : IEndMethodHelper Methods | Improve this Doc View Source Setup(string, MethodInfo, IMapping, StringBuilder) Setups the specified return value name. Declaration public void Setup(string returnValueName, MethodInfo method, IMapping mapping, StringBuilder builder) Parameters Type Name Description string returnValueName Name of the return value. MethodInfo method The method. IMapping mapping The mapping. StringBuilder builder The builder. See Also IEndMethodHelper Implements IEndMethodHelper See Also IEndMethodHelper"
  },
  "api/Inflatable.Aspect.EndMethod.SingleProperty.html": {
    "href": "api/Inflatable.Aspect.EndMethod.SingleProperty.html",
    "title": "Class SingleProperty | Inflatable API Reference",
    "keywords": "Class SingleProperty Single mapped property Inheritance object SingleProperty Implements IEndMethodHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Aspect.EndMethod Assembly: Inflatable.dll Syntax public class SingleProperty : IEndMethodHelper Methods | Improve this Doc View Source Setup(string, MethodInfo, IMapping, StringBuilder) Setups the specified return value name. Declaration public void Setup(string returnValueName, MethodInfo method, IMapping mapping, StringBuilder builder) Parameters Type Name Description string returnValueName Name of the return value. MethodInfo method The method. IMapping mapping The mapping. StringBuilder builder The builder. See Also IEndMethodHelper Implements IEndMethodHelper See Also IEndMethodHelper"
  },
  "api/Inflatable.Aspect.EndMethod.html": {
    "href": "api/Inflatable.Aspect.EndMethod.html",
    "title": "Namespace Inflatable.Aspect.EndMethod | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Aspect.EndMethod Classes IListProperty List property IManyToOnePropertyLazyLoad Many to one lazy loading setup. SingleProperty Single mapped property"
  },
  "api/Inflatable.Aspect.InterfaceImplementation.SetupIORMInitializationMethod.html": {
    "href": "api/Inflatable.Aspect.InterfaceImplementation.SetupIORMInitializationMethod.html",
    "title": "Class SetupIORMInitializationMethod | Inflatable API Reference",
    "keywords": "Class SetupIORMInitializationMethod Inheritance object SetupIORMInitializationMethod Implements IInterfaceImplementationHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Aspect.InterfaceImplementation Assembly: Inflatable.dll Syntax public class SetupIORMInitializationMethod : IInterfaceImplementationHelper Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IInterfaceImplementationHelper Methods | Improve this Doc View Source Setup(Type, ORMAspect, ObjectPool<StringBuilder>) Setups the specified type. Declaration public string Setup(Type type, ORMAspect aspect, ObjectPool<StringBuilder> objectPool) Parameters Type Name Description Type type The type. ORMAspect aspect The aspect. ObjectPool<StringBuilder> objectPool The object pool. Returns Type Description string The resulting code in string format. See Also IInterfaceImplementationHelper Implements IInterfaceImplementationHelper See Also IInterfaceImplementationHelper"
  },
  "api/Inflatable.Aspect.InterfaceImplementation.SetupIORMObjectProperties.html": {
    "href": "api/Inflatable.Aspect.InterfaceImplementation.SetupIORMObjectProperties.html",
    "title": "Class SetupIORMObjectProperties | Inflatable API Reference",
    "keywords": "Class SetupIORMObjectProperties Sets up the IORM Object properties Inheritance object SetupIORMObjectProperties Implements IInterfaceImplementationHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Aspect.InterfaceImplementation Assembly: Inflatable.dll Syntax public class SetupIORMObjectProperties : IInterfaceImplementationHelper Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IInterfaceImplementationHelper Methods | Improve this Doc View Source Setup(Type, ORMAspect, ObjectPool<StringBuilder>) Setups the specified type. Declaration public string Setup(Type type, ORMAspect aspect, ObjectPool<StringBuilder> objectPool) Parameters Type Name Description Type type The type. ORMAspect aspect The aspect. ObjectPool<StringBuilder> objectPool The object pool. Returns Type Description string The resulting code in string format. See Also IInterfaceImplementationHelper Implements IInterfaceImplementationHelper See Also IInterfaceImplementationHelper"
  },
  "api/Inflatable.Aspect.InterfaceImplementation.SetupManyToManyFields.html": {
    "href": "api/Inflatable.Aspect.InterfaceImplementation.SetupManyToManyFields.html",
    "title": "Class SetupManyToManyFields | Inflatable API Reference",
    "keywords": "Class SetupManyToManyFields Sets up many to many fields. Inheritance object SetupManyToManyFields Implements IInterfaceImplementationHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Aspect.InterfaceImplementation Assembly: Inflatable.dll Syntax public class SetupManyToManyFields : IInterfaceImplementationHelper Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IInterfaceImplementationHelper Methods | Improve this Doc View Source Setup(Type, ORMAspect, ObjectPool<StringBuilder>) Setups the specified type. Declaration public string Setup(Type type, ORMAspect aspect, ObjectPool<StringBuilder> objectPool) Parameters Type Name Description Type type The type. ORMAspect aspect The aspect. ObjectPool<StringBuilder> objectPool The object pool. Returns Type Description string The resulting code in string format. See Also IInterfaceImplementationHelper Implements IInterfaceImplementationHelper See Also IInterfaceImplementationHelper"
  },
  "api/Inflatable.Aspect.InterfaceImplementation.SetupMapFields.html": {
    "href": "api/Inflatable.Aspect.InterfaceImplementation.SetupMapFields.html",
    "title": "Class SetupMapFields | Inflatable API Reference",
    "keywords": "Class SetupMapFields Sets up the map fields Inheritance object SetupMapFields Implements IInterfaceImplementationHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Aspect.InterfaceImplementation Assembly: Inflatable.dll Syntax public class SetupMapFields : IInterfaceImplementationHelper Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IInterfaceImplementationHelper Methods | Improve this Doc View Source Setup(Type, ORMAspect, ObjectPool<StringBuilder>) Setups the specified type. Declaration public string Setup(Type type, ORMAspect aspect, ObjectPool<StringBuilder> objectPool) Parameters Type Name Description Type type The type. ORMAspect aspect The aspect. ObjectPool<StringBuilder> objectPool The object pool. Returns Type Description string The resulting code in string format. See Also IInterfaceImplementationHelper Implements IInterfaceImplementationHelper See Also IInterfaceImplementationHelper"
  },
  "api/Inflatable.Aspect.InterfaceImplementation.SetupReferenceFields.html": {
    "href": "api/Inflatable.Aspect.InterfaceImplementation.SetupReferenceFields.html",
    "title": "Class SetupReferenceFields | Inflatable API Reference",
    "keywords": "Class SetupReferenceFields Sets up the reference fields Inheritance object SetupReferenceFields Implements IInterfaceImplementationHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Aspect.InterfaceImplementation Assembly: Inflatable.dll Syntax public class SetupReferenceFields : IInterfaceImplementationHelper Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IInterfaceImplementationHelper Methods | Improve this Doc View Source Setup(Type, ORMAspect, ObjectPool<StringBuilder>) Setups the specified type. Declaration public string Setup(Type type, ORMAspect aspect, ObjectPool<StringBuilder> objectPool) Parameters Type Name Description Type type The type. ORMAspect aspect The aspect. ObjectPool<StringBuilder> objectPool The object pool. Returns Type Description string The resulting code in string format. See Also IInterfaceImplementationHelper Implements IInterfaceImplementationHelper See Also IInterfaceImplementationHelper"
  },
  "api/Inflatable.Aspect.InterfaceImplementation.html": {
    "href": "api/Inflatable.Aspect.InterfaceImplementation.html",
    "title": "Namespace Inflatable.Aspect.InterfaceImplementation | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Aspect.InterfaceImplementation Classes SetupIORMInitializationMethod SetupIORMObjectProperties Sets up the IORM Object properties SetupManyToManyFields Sets up many to many fields. SetupMapFields Sets up the map fields SetupReferenceFields Sets up the reference fields"
  },
  "api/Inflatable.Aspect.Interfaces.IEndMethodHelper.html": {
    "href": "api/Inflatable.Aspect.Interfaces.IEndMethodHelper.html",
    "title": "Interface IEndMethodHelper | Inflatable API Reference",
    "keywords": "Interface IEndMethodHelper End method helper Namespace: Inflatable.Aspect.Interfaces Assembly: Inflatable.dll Syntax public interface IEndMethodHelper Methods | Improve this Doc View Source Setup(string, MethodInfo, IMapping, StringBuilder) Setups the specified return value name. Declaration void Setup(string returnValueName, MethodInfo method, IMapping mapping, StringBuilder builder) Parameters Type Name Description string returnValueName Name of the return value. MethodInfo method The method. IMapping mapping The mapping. StringBuilder builder The builder."
  },
  "api/Inflatable.Aspect.Interfaces.IInterfaceImplementationHelper.html": {
    "href": "api/Inflatable.Aspect.Interfaces.IInterfaceImplementationHelper.html",
    "title": "Interface IInterfaceImplementationHelper | Inflatable API Reference",
    "keywords": "Interface IInterfaceImplementationHelper Interface implementation helper Namespace: Inflatable.Aspect.Interfaces Assembly: Inflatable.dll Syntax public interface IInterfaceImplementationHelper Properties | Improve this Doc View Source Order Gets the order. Declaration int Order { get; } Property Value Type Description int The order. Methods | Improve this Doc View Source Setup(Type, ORMAspect, ObjectPool<StringBuilder>) Setups the specified type. Declaration string Setup(Type type, ORMAspect aspect, ObjectPool<StringBuilder> objectPool) Parameters Type Name Description Type type The type. ORMAspect aspect The aspect. ObjectPool<StringBuilder> objectPool The object pool. Returns Type Description string The resulting code in string format."
  },
  "api/Inflatable.Aspect.Interfaces.IORMObject.html": {
    "href": "api/Inflatable.Aspect.Interfaces.IORMObject.html",
    "title": "Interface IORMObject | Inflatable API Reference",
    "keywords": "Interface IORMObject ORM object interface Inherited Members INotifyPropertyChanged.PropertyChanged Namespace: Inflatable.Aspect.Interfaces Assembly: Inflatable.dll Syntax public interface IORMObject : INotifyPropertyChanged Properties | Improve this Doc View Source PropertiesChanged0 Gets the properties changed. Declaration IList<string> PropertiesChanged0 { get; set; } Property Value Type Description IList<string> The properties changed. | Improve this Doc View Source Session0 ORM session that this item came from (used for lazy loading) Declaration ISession Session0 { get; set; } Property Value Type Description ISession The ORM session object. Methods | Improve this Doc View Source InitializeORMObject0(ISession) Initializes the orm object. Declaration void InitializeORMObject0(ISession session) Parameters Type Name Description ISession session The session."
  },
  "api/Inflatable.Aspect.Interfaces.IStartMethodHelper.html": {
    "href": "api/Inflatable.Aspect.Interfaces.IStartMethodHelper.html",
    "title": "Interface IStartMethodHelper | Inflatable API Reference",
    "keywords": "Interface IStartMethodHelper Start of method helper interface Namespace: Inflatable.Aspect.Interfaces Assembly: Inflatable.dll Syntax public interface IStartMethodHelper Methods | Improve this Doc View Source Setup(MethodInfo, IMapping, StringBuilder) Sets up the specified method. Declaration void Setup(MethodInfo method, IMapping mapping, StringBuilder builder) Parameters Type Name Description MethodInfo method The method. IMapping mapping The mapping. StringBuilder builder The builder."
  },
  "api/Inflatable.Aspect.Interfaces.html": {
    "href": "api/Inflatable.Aspect.Interfaces.html",
    "title": "Namespace Inflatable.Aspect.Interfaces | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Aspect.Interfaces Interfaces IEndMethodHelper End method helper IInterfaceImplementationHelper Interface implementation helper IORMObject ORM object interface IStartMethodHelper Start of method helper interface"
  },
  "api/Inflatable.Aspect.ORMAspect.html": {
    "href": "api/Inflatable.Aspect.ORMAspect.html",
    "title": "Class ORMAspect | Inflatable API Reference",
    "keywords": "Class ORMAspect ORM Aspect Inheritance object ORMAspect Implements IAspect Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Aspect Assembly: Inflatable.dll Syntax public class ORMAspect : IAspect Constructors | Improve this Doc View Source ORMAspect(MappingManager, IEnumerable<IStartMethodHelper>, IEnumerable<IInterfaceImplementationHelper>, IEnumerable<IEndMethodHelper>, ObjectPool<StringBuilder>) Initializes a new instance of the ORMAspect class. Declaration public ORMAspect(MappingManager classManager, IEnumerable<IStartMethodHelper> startMethodHelpers, IEnumerable<IInterfaceImplementationHelper> interfaceImplementationHelpers, IEnumerable<IEndMethodHelper> endMethodHelpers, ObjectPool<StringBuilder> objectPool) Parameters Type Name Description MappingManager classManager The class manager. IEnumerable<IStartMethodHelper> startMethodHelpers The start method helpers. IEnumerable<IInterfaceImplementationHelper> interfaceImplementationHelpers The interface implementation helpers. IEnumerable<IEndMethodHelper> endMethodHelpers The end method helpers. ObjectPool<StringBuilder> objectPool The object pool. Exceptions Type Condition ArgumentNullException classManager ArgumentNullException classManager See Also IAspect Properties | Improve this Doc View Source AssembliesUsing Set of assemblies that the aspect requires Declaration public ICollection<MetadataReference> AssembliesUsing { get; } Property Value Type Description ICollection<MetadataReference> See Also IAspect | Improve this Doc View Source ClassManager Gets the class manager. Declaration public MappingManager ClassManager { get; } Property Value Type Description MappingManager The class manager. See Also IAspect | Improve this Doc View Source EndMethodHelpers Gets the end method helpers. Declaration public IEnumerable<IEndMethodHelper> EndMethodHelpers { get; } Property Value Type Description IEnumerable<IEndMethodHelper> The end method helpers. See Also IAspect | Improve this Doc View Source IDFields Gets or sets the identifier fields that have been completed already. Declaration public List<IIDProperty> IDFields { get; } Property Value Type Description List<IIDProperty> The identifier fields that have been completed already. See Also IAspect | Improve this Doc View Source InterfaceImplementationHelpers Gets the interface implementation helpers. Declaration public IEnumerable<IInterfaceImplementationHelper> InterfaceImplementationHelpers { get; } Property Value Type Description IEnumerable<IInterfaceImplementationHelper> The interface implementation helpers. See Also IAspect | Improve this Doc View Source InterfacesUsing List of interfaces that need to be injected by this aspect Declaration public ICollection<Type> InterfacesUsing { get; } Property Value Type Description ICollection<Type> See Also IAspect | Improve this Doc View Source ManyToManyFields Gets or sets the many to many fields. Declaration public List<IManyToManyProperty> ManyToManyFields { get; } Property Value Type Description List<IManyToManyProperty> The many to many fields. See Also IAspect | Improve this Doc View Source ManyToOneFields Gets or sets the many to one fields. Declaration public List<IManyToOneProperty> ManyToOneFields { get; } Property Value Type Description List<IManyToOneProperty> The many to one fields. See Also IAspect | Improve this Doc View Source MapFields Gets or sets the map fields. Declaration public List<IMapProperty> MapFields { get; } Property Value Type Description List<IMapProperty> The map fields. See Also IAspect | Improve this Doc View Source ObjectPool Gets the object pool. Declaration public ObjectPool<StringBuilder> ObjectPool { get; } Property Value Type Description ObjectPool<StringBuilder> The object pool. See Also IAspect | Improve this Doc View Source ReferenceFields The reference fields that have been completed already. Declaration public List<IProperty> ReferenceFields { get; } Property Value Type Description List<IProperty> The reference fields that have been completed already. See Also IAspect | Improve this Doc View Source StartMethodHelpers Gets the start method helpers. Declaration public IEnumerable<IStartMethodHelper> StartMethodHelpers { get; } Property Value Type Description IEnumerable<IStartMethodHelper> The start method helpers. See Also IAspect | Improve this Doc View Source Usings Using statements that the aspect requires Declaration public ICollection<string> Usings { get; } Property Value Type Description ICollection<string> See Also IAspect Methods | Improve this Doc View Source Setup(object) Used to hook into the object once it has been created Declaration public void Setup(object value) Parameters Type Name Description object value Object created by the system See Also IAspect | Improve this Doc View Source SetupDefaultConstructor(Type) Used to insert code into the default constructor Declaration public string SetupDefaultConstructor(Type baseType) Parameters Type Name Description Type baseType Base type Returns Type Description string The code to insert See Also IAspect | Improve this Doc View Source SetupEndMethod(MethodInfo, Type, string) Used to insert code at the end of the method Declaration public string SetupEndMethod(MethodInfo method, Type baseType, string returnValueName) Parameters Type Name Description MethodInfo method Overridding Method Type baseType Base type string returnValueName Local holder for the value returned by the function Returns Type Description string The code to insert See Also IAspect | Improve this Doc View Source SetupExceptionMethod(MethodInfo, Type) Used to insert code within the catch portion of the try/catch portion of the method Declaration public string SetupExceptionMethod(MethodInfo method, Type baseType) Parameters Type Name Description MethodInfo method Overridding Method Type baseType Base type Returns Type Description string The code to insert See Also IAspect | Improve this Doc View Source SetupInterfaces(Type) Sets up the interfaces. Declaration public string SetupInterfaces(Type type) Parameters Type Name Description Type type The type. Returns Type Description string The code required to set them up. See Also IAspect | Improve this Doc View Source SetupStartMethod(MethodInfo, Type) Used to insert code at the beginning of the method Declaration public string SetupStartMethod(MethodInfo method, Type baseType) Parameters Type Name Description MethodInfo method Overridding Method Type baseType Base type Returns Type Description string The code to insert See Also IAspect Implements IAspect See Also IAspect"
  },
  "api/Inflatable.Aspect.StartMethod.IDStartMethod.html": {
    "href": "api/Inflatable.Aspect.StartMethod.IDStartMethod.html",
    "title": "Class IDStartMethod | Inflatable API Reference",
    "keywords": "Class IDStartMethod ID start method helper Inheritance object IDStartMethod Implements IStartMethodHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Aspect.StartMethod Assembly: Inflatable.dll Syntax public class IDStartMethod : IStartMethodHelper Methods | Improve this Doc View Source Setup(MethodInfo, IMapping, StringBuilder) Sets up the specified method. Declaration public void Setup(MethodInfo method, IMapping mapping, StringBuilder builder) Parameters Type Name Description MethodInfo method The method. IMapping mapping The mapping. StringBuilder builder The builder. See Also IStartMethodHelper Implements IStartMethodHelper See Also IStartMethodHelper"
  },
  "api/Inflatable.Aspect.StartMethod.MapStartMethod.html": {
    "href": "api/Inflatable.Aspect.StartMethod.MapStartMethod.html",
    "title": "Class MapStartMethod | Inflatable API Reference",
    "keywords": "Class MapStartMethod Map start method Inheritance object MapStartMethod Implements IStartMethodHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Aspect.StartMethod Assembly: Inflatable.dll Syntax public class MapStartMethod : IStartMethodHelper Methods | Improve this Doc View Source Setup(MethodInfo, IMapping, StringBuilder) Sets up the specified method. Declaration public void Setup(MethodInfo method, IMapping mapping, StringBuilder builder) Parameters Type Name Description MethodInfo method The method. IMapping mapping The mapping. StringBuilder builder The builder. See Also IStartMethodHelper Implements IStartMethodHelper See Also IStartMethodHelper"
  },
  "api/Inflatable.Aspect.StartMethod.ReferenceStartMethod.html": {
    "href": "api/Inflatable.Aspect.StartMethod.ReferenceStartMethod.html",
    "title": "Class ReferenceStartMethod | Inflatable API Reference",
    "keywords": "Class ReferenceStartMethod Reference start method Inheritance object ReferenceStartMethod Implements IStartMethodHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Aspect.StartMethod Assembly: Inflatable.dll Syntax public class ReferenceStartMethod : IStartMethodHelper Methods | Improve this Doc View Source Setup(MethodInfo, IMapping, StringBuilder) Sets up the specified method. Declaration public void Setup(MethodInfo method, IMapping mapping, StringBuilder builder) Parameters Type Name Description MethodInfo method The method. IMapping mapping The mapping. StringBuilder builder The builder. See Also IStartMethodHelper Implements IStartMethodHelper See Also IStartMethodHelper"
  },
  "api/Inflatable.Aspect.StartMethod.html": {
    "href": "api/Inflatable.Aspect.StartMethod.html",
    "title": "Namespace Inflatable.Aspect.StartMethod | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Aspect.StartMethod Classes IDStartMethod ID start method helper MapStartMethod Map start method ReferenceStartMethod Reference start method"
  },
  "api/Inflatable.Aspect.html": {
    "href": "api/Inflatable.Aspect.html",
    "title": "Namespace Inflatable.Aspect | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Aspect Classes ORMAspect ORM Aspect"
  },
  "api/Inflatable.BaseClasses.MappingBaseClass-2.html": {
    "href": "api/Inflatable.BaseClasses.MappingBaseClass-2.html",
    "title": "Class MappingBaseClass<TClassType, TDatabaseType> | Inflatable API Reference",
    "keywords": "Class MappingBaseClass<TClassType, TDatabaseType> Mapping base class Inheritance object MappingBaseClass<TClassType, TDatabaseType> Implements IMapping<TClassType> IMapping Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Inflatable.BaseClasses Assembly: Inflatable.dll Syntax public abstract class MappingBaseClass<TClassType, TDatabaseType> : IMapping<TClassType>, IMapping where TClassType : class where TDatabaseType : IDatabase Type Parameters Name Description TClassType The type of the lass type. TDatabaseType The type of the atabase type. Constructors | Improve this Doc View Source MappingBaseClass(string, string, string, string, int, bool) Initializes a new instance of the MappingBaseClass<TClassType, TDatabaseType> class. Declaration protected MappingBaseClass(string tableName = \"\", string schemaName = \"dbo\", string suffix = \"_\", string prefix = \"\", int order = 10, bool merge = false) Parameters Type Name Description string tableName Name of the table. string schemaName Name of the schema. string suffix The suffix. string prefix The prefix. int order The order. bool merge if set to true [merge] this mapping when possible. See Also IMapping IMapping<TClassType> Properties | Improve this Doc View Source AutoIDProperties Gets the automatic identifier properties. Declaration public List<IAutoIDProperty> AutoIDProperties { get; } Property Value Type Description List<IAutoIDProperty> The automatic identifier properties. See Also IMapping IMapping<TClassType> | Improve this Doc View Source DatabaseConfigType Gets the type of the database configuration. Declaration public Type DatabaseConfigType { get; } Property Value Type Description Type The type of the database configuration. See Also IMapping IMapping<TClassType> | Improve this Doc View Source IDProperties ID properties Declaration public List<IIDProperty> IDProperties { get; } Property Value Type Description List<IIDProperty> The identifier properties. See Also IMapping IMapping<TClassType> | Improve this Doc View Source ManyToManyProperties Gets the many to many properties. Declaration public List<IManyToManyProperty> ManyToManyProperties { get; } Property Value Type Description List<IManyToManyProperty> The many to many properties. See Also IMapping IMapping<TClassType> | Improve this Doc View Source ManyToOneProperties Gets the many to one properties. Declaration public List<IManyToOneProperty> ManyToOneProperties { get; } Property Value Type Description List<IManyToOneProperty> The many to one properties. See Also IMapping IMapping<TClassType> | Improve this Doc View Source MapProperties Gets the map properties. Declaration public List<IMapProperty> MapProperties { get; } Property Value Type Description List<IMapProperty> The map properties. See Also IMapping IMapping<TClassType> | Improve this Doc View Source Merge Gets a value indicating whether this IMapping should be merged. Declaration public bool Merge { get; } Property Value Type Description bool true if merge this instance; otherwise, false. See Also IMapping IMapping<TClassType> | Improve this Doc View Source ObjectType The object type associated with the mapping Declaration public Type ObjectType { get; } Property Value Type Description Type The type of the object. See Also IMapping IMapping<TClassType> | Improve this Doc View Source Order Order that the mappings are initialized Declaration public int Order { get; } Property Value Type Description int The order. See Also IMapping IMapping<TClassType> | Improve this Doc View Source Prefix Prefix used for defining properties/table name Declaration public string Prefix { get; } Property Value Type Description string The prefix. See Also IMapping IMapping<TClassType> | Improve this Doc View Source Queries Gets the queries. Declaration public IQueries Queries { get; } Property Value Type Description IQueries The queries. See Also IMapping IMapping<TClassType> | Improve this Doc View Source ReferenceProperties Reference Properties list Declaration public List<IProperty> ReferenceProperties { get; } Property Value Type Description List<IProperty> The reference properties. See Also IMapping IMapping<TClassType> | Improve this Doc View Source SchemaName Gets the name of the schema. Declaration public string SchemaName { get; } Property Value Type Description string The name of the schema. See Also IMapping IMapping<TClassType> | Improve this Doc View Source Suffix Suffix used for defining properties/table name Declaration public string Suffix { get; } Property Value Type Description string The suffix. See Also IMapping IMapping<TClassType> | Improve this Doc View Source TableName Table name Declaration public string TableName { get; } Property Value Type Description string The name of the table. See Also IMapping IMapping<TClassType> Methods | Improve this Doc View Source AddAutoKey() Adds an automatic key. Declaration public void AddAutoKey() See Also IMapping IMapping<TClassType> | Improve this Doc View Source ContainsProperty(string) Determines whether the mapping contains a property. Declaration public bool ContainsProperty(string propertyName) Parameters Type Name Description string propertyName Name of the property. Returns Type Description bool true if the mapping contains the specified property; otherwise, false. See Also IMapping IMapping<TClassType> | Improve this Doc View Source Copy(IMapping) Copies the specified mapping. Declaration public void Copy(IMapping mapping) Parameters Type Name Description IMapping mapping The mapping. See Also IMapping IMapping<TClassType> | Improve this Doc View Source CopyProperty(IIDProperty) Copies the property. Declaration public void CopyProperty(IIDProperty prop) Parameters Type Name Description IIDProperty prop The property. See Also IMapping IMapping<TClassType> | Improve this Doc View Source CopyProperty(IManyToManyProperty) Copies the property. Declaration public void CopyProperty(IManyToManyProperty prop) Parameters Type Name Description IManyToManyProperty prop The property. See Also IMapping IMapping<TClassType> | Improve this Doc View Source CopyProperty(IManyToOneProperty) Copies the property. Declaration public void CopyProperty(IManyToOneProperty prop) Parameters Type Name Description IManyToOneProperty prop The property. See Also IMapping IMapping<TClassType> | Improve this Doc View Source CopyProperty(IMapProperty) Copies the property. Declaration public void CopyProperty(IMapProperty prop) Parameters Type Name Description IMapProperty prop The property. See Also IMapping IMapping<TClassType> | Improve this Doc View Source CopyProperty(IProperty) Copies the property. Declaration public void CopyProperty(IProperty prop) Parameters Type Name Description IProperty prop The property. See Also IMapping IMapping<TClassType> | Improve this Doc View Source Equals(object?) determines if the mappings are equal Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) See Also IMapping IMapping<TClassType> | Improve this Doc View Source GetColumnName(string) Gets the name of the column based on property name. Declaration public string GetColumnName(string propertyName) Parameters Type Name Description string propertyName Name of the property. Returns Type Description string The column name. See Also IMapping IMapping<TClassType> | Improve this Doc View Source GetHashCode() Gets the mapping's hash code Declaration public override int GetHashCode() Returns Type Description int Hash code for the mapping Overrides object.GetHashCode() See Also IMapping IMapping<TClassType> | Improve this Doc View Source ID<TDataType>(Expression<Func<TClassType, TDataType>>) Declares a property as an ID Declaration public ID<TClassType, TDataType> ID<TDataType>(Expression<Func<TClassType, TDataType>> expression) Parameters Type Name Description Expression<Func<TClassType, TDataType>> expression Expression pointing to the property Returns Type Description ID<TClassType, TDataType> the ID object Type Parameters Name Description TDataType Data type Exceptions Type Condition ArgumentNullException expression See Also IMapping IMapping<TClassType> | Improve this Doc View Source ManyToMany<TDataType>(Expression<Func<TClassType, IList<TDataType>>>) Sets a property as a many to many type. Declaration public ManyToMany<TClassType, TDataType> ManyToMany<TDataType>(Expression<Func<TClassType, IList<TDataType>>> expression) where TDataType : class Parameters Type Name Description Expression<Func<TClassType, IList<TDataType>>> expression Expression pointing to the property Returns Type Description ManyToMany<TClassType, TDataType> The many to many object Type Parameters Name Description TDataType The type of the data type. See Also IMapping IMapping<TClassType> | Improve this Doc View Source ManyToOne<TDataType>(Expression<Func<TClassType, IList<TDataType>>>) Sets a property as a many to one type. Declaration public ManyToOneMany<TClassType, TDataType> ManyToOne<TDataType>(Expression<Func<TClassType, IList<TDataType>>> expression) where TDataType : class Parameters Type Name Description Expression<Func<TClassType, IList<TDataType>>> expression Expression pointing to the property Returns Type Description ManyToOneMany<TClassType, TDataType> The many to many object Type Parameters Name Description TDataType The type of the data type. See Also IMapping IMapping<TClassType> | Improve this Doc View Source ManyToOne<TDataType>(Expression<Func<TClassType, TDataType?>>) Sets a property as a many to one type. Declaration public ManyToOneSingle<TClassType, TDataType> ManyToOne<TDataType>(Expression<Func<TClassType, TDataType?>> expression) where TDataType : class Parameters Type Name Description Expression<Func<TClassType, TDataType>> expression Expression pointing to the property Returns Type Description ManyToOneSingle<TClassType, TDataType> The many to many object Type Parameters Name Description TDataType The type of the data type. See Also IMapping IMapping<TClassType> | Improve this Doc View Source Map<TDataType>(Expression<Func<TClassType, TDataType?>>) Sets a property as a map type. Declaration public Map<TClassType, TDataType> Map<TDataType>(Expression<Func<TClassType, TDataType?>> expression) where TDataType : class Parameters Type Name Description Expression<Func<TClassType, TDataType>> expression Expression pointing to the property Returns Type Description Map<TClassType, TDataType> The map object Type Parameters Name Description TDataType The type of the data type. Exceptions Type Condition ArgumentNullException expression See Also IMapping IMapping<TClassType> | Improve this Doc View Source Reduce(IMapping, ILogger) Reduces this instance based on parent mapping properties. Declaration public void Reduce(IMapping parentMapping, ILogger logger) Parameters Type Name Description IMapping parentMapping The parent mapping. ILogger logger The logger. See Also IMapping IMapping<TClassType> | Improve this Doc View Source Reduce(ILogger) Reduces this instance and removes duplicate properties Declaration public void Reduce(ILogger logger) Parameters Type Name Description ILogger logger The logger. See Also IMapping IMapping<TClassType> | Improve this Doc View Source Reference<TDataType>(Expression<Func<TClassType, TDataType>>) Sets a property as a reference type Declaration public Reference<TClassType, TDataType> Reference<TDataType>(Expression<Func<TClassType, TDataType>> expression) Parameters Type Name Description Expression<Func<TClassType, TDataType>> expression Expression pointing to the property Returns Type Description Reference<TClassType, TDataType> the reference object Type Parameters Name Description TDataType Data type Exceptions Type Condition ArgumentNullException expression See Also IMapping IMapping<TClassType> | Improve this Doc View Source SetQuery(QueryType, string, CommandType, params IParameter[]) Sets the default query based on query type Declaration public IMapping SetQuery(QueryType queryType, string queryString, CommandType databaseCommandType, params IParameter[] parameters) Parameters Type Name Description QueryType queryType Type of the query. string queryString The query string. CommandType databaseCommandType Type of the database command. IParameter[] parameters The parameters. Returns Type Description IMapping This Exceptions Type Condition ArgumentNullException queryString See Also IMapping IMapping<TClassType> | Improve this Doc View Source Setup() Sets up the mapping Declaration public void Setup() See Also IMapping IMapping<TClassType> | Improve this Doc View Source ToString() Converts the mapping to a string Declaration public override string ToString() Returns Type Description string The table name Overrides object.ToString() See Also IMapping IMapping<TClassType> Operators | Improve this Doc View Source operator ==(MappingBaseClass<TClassType, TDatabaseType>?, MappingBaseClass<TClassType, TDatabaseType>?) Determines if the two items are equal Declaration public static bool operator ==(MappingBaseClass<TClassType, TDatabaseType>? Item1, MappingBaseClass<TClassType, TDatabaseType>? Item2) Parameters Type Name Description MappingBaseClass<TClassType, TDatabaseType> Item1 Item 1 MappingBaseClass<TClassType, TDatabaseType> Item2 Item 2 Returns Type Description bool True if they are equal, false otherwise See Also IMapping IMapping<TClassType> | Improve this Doc View Source operator !=(MappingBaseClass<TClassType, TDatabaseType>?, MappingBaseClass<TClassType, TDatabaseType>?) Determines if the two items are not equal Declaration public static bool operator !=(MappingBaseClass<TClassType, TDatabaseType>? Item1, MappingBaseClass<TClassType, TDatabaseType>? Item2) Parameters Type Name Description MappingBaseClass<TClassType, TDatabaseType> Item1 Item 1 MappingBaseClass<TClassType, TDatabaseType> Item2 Item 2 Returns Type Description bool True if they are not equal, false otherwise See Also IMapping IMapping<TClassType> Implements IMapping<TClassType> IMapping See Also IMapping IMapping<TClassType>"
  },
  "api/Inflatable.BaseClasses.ObjectBaseClass-2.html": {
    "href": "api/Inflatable.BaseClasses.ObjectBaseClass-2.html",
    "title": "Class ObjectBaseClass<TObjectType, TIDType> | Inflatable API Reference",
    "keywords": "Class ObjectBaseClass<TObjectType, TIDType> Object base class helper. This is not required but automatically sets up basic functions and properties to simplify things a bit. Inheritance object ObjectBaseClass<TObjectType, TIDType> Implements IComparable IComparable<TObjectType> IObject<TIDType> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.BaseClasses Assembly: Inflatable.dll Syntax public abstract class ObjectBaseClass<TObjectType, TIDType> : IComparable, IComparable<TObjectType>, IObject<TIDType> where TObjectType : ObjectBaseClass<TObjectType, TIDType>, new() where TIDType : IComparable Type Parameters Name Description TObjectType Object type (must be the child object type) TIDType ID type Constructors | Improve this Doc View Source ObjectBaseClass() Constructor Declaration protected ObjectBaseClass() Properties | Improve this Doc View Source Active Is the object active? Declaration [BoolGenerator] public bool Active { get; set; } Property Value Type Description bool | Improve this Doc View Source DateCreated Date object was created Declaration [Between(\"1/1/1900\", \"1/1/2100\", \"\")] [DateTimeGenerator(\"1/1/1900\", \"1/1/2100\")] public DateTime DateCreated { get; set; } Property Value Type Description DateTime | Improve this Doc View Source DateModified Date last modified Declaration [Between(\"1/1/1900\", \"1/1/2100\", \"\")] [DateTimeGenerator(\"1/1/1900\", \"1/1/2100\")] public DateTime DateModified { get; set; } Property Value Type Description DateTime | Improve this Doc View Source ID ID for the object Declaration public TIDType ID { get; set; } Property Value Type Description TIDType Methods | Improve this Doc View Source CompareTo(object?) Compares the object to another object Declaration public int CompareTo(object? obj) Parameters Type Name Description object obj Object to compare to Returns Type Description int 0 if they are equal, -1 if this is smaller, 1 if it is larger | Improve this Doc View Source CompareTo(TObjectType?) Compares the object to another object Declaration public virtual int CompareTo(TObjectType? other) Parameters Type Name Description TObjectType other Object to compare to Returns Type Description int 0 if they are equal, -1 if this is smaller, 1 if it is larger | Improve this Doc View Source Equals(object?) Determines if two items are equal Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare this to Returns Type Description bool true if they are the same, false otherwise Overrides object.Equals(object) | Improve this Doc View Source GetHashCode() Returns the hash of this item Declaration public override int GetHashCode() Returns Type Description int the int hash of the item Overrides object.GetHashCode() | Improve this Doc View Source SetupObject() Sets up the object for saving purposes Declaration public virtual void SetupObject() Operators | Improve this Doc View Source operator ==(ObjectBaseClass<TObjectType, TIDType>, ObjectBaseClass<TObjectType, TIDType>) The == operator Declaration public static bool operator ==(ObjectBaseClass<TObjectType, TIDType> left, ObjectBaseClass<TObjectType, TIDType> right) Parameters Type Name Description ObjectBaseClass<TObjectType, TIDType> left The left. ObjectBaseClass<TObjectType, TIDType> right The right. Returns Type Description bool true if the first and second item are the same, false otherwise | Improve this Doc View Source operator >(ObjectBaseClass<TObjectType, TIDType>, ObjectBaseClass<TObjectType, TIDType>) The > operator Declaration public static bool operator >(ObjectBaseClass<TObjectType, TIDType> left, ObjectBaseClass<TObjectType, TIDType> right) Parameters Type Name Description ObjectBaseClass<TObjectType, TIDType> left The left. ObjectBaseClass<TObjectType, TIDType> right The right. Returns Type Description bool True if the first item is greater than the second, false otherwise | Improve this Doc View Source operator >=(ObjectBaseClass<TObjectType, TIDType>, ObjectBaseClass<TObjectType, TIDType>) Implements the operator >=. Declaration public static bool operator >=(ObjectBaseClass<TObjectType, TIDType> left, ObjectBaseClass<TObjectType, TIDType> right) Parameters Type Name Description ObjectBaseClass<TObjectType, TIDType> left The left. ObjectBaseClass<TObjectType, TIDType> right The right. Returns Type Description bool The result of the operator. | Improve this Doc View Source operator !=(ObjectBaseClass<TObjectType, TIDType>, ObjectBaseClass<TObjectType, TIDType>) != operator Declaration public static bool operator !=(ObjectBaseClass<TObjectType, TIDType> first, ObjectBaseClass<TObjectType, TIDType> second) Parameters Type Name Description ObjectBaseClass<TObjectType, TIDType> first First item ObjectBaseClass<TObjectType, TIDType> second Second item Returns Type Description bool returns true if they are not equal, false otherwise | Improve this Doc View Source operator <(ObjectBaseClass<TObjectType, TIDType>, ObjectBaseClass<TObjectType, TIDType>) The < operator Declaration public static bool operator <(ObjectBaseClass<TObjectType, TIDType> left, ObjectBaseClass<TObjectType, TIDType> right) Parameters Type Name Description ObjectBaseClass<TObjectType, TIDType> left The left. ObjectBaseClass<TObjectType, TIDType> right The right. Returns Type Description bool True if the first item is less than the second, false otherwise | Improve this Doc View Source operator <=(ObjectBaseClass<TObjectType, TIDType>, ObjectBaseClass<TObjectType, TIDType>) Implements the operator <=. Declaration public static bool operator <=(ObjectBaseClass<TObjectType, TIDType> left, ObjectBaseClass<TObjectType, TIDType> right) Parameters Type Name Description ObjectBaseClass<TObjectType, TIDType> left The left. ObjectBaseClass<TObjectType, TIDType> right The right. Returns Type Description bool The result of the operator. Implements IComparable IComparable<T> IObject<IDType>"
  },
  "api/Inflatable.BaseClasses.html": {
    "href": "api/Inflatable.BaseClasses.html",
    "title": "Namespace Inflatable.BaseClasses | Inflatable API Reference",
    "keywords": "Namespace Inflatable.BaseClasses Classes MappingBaseClass<TClassType, TDatabaseType> Mapping base class ObjectBaseClass<TObjectType, TIDType> Object base class helper. This is not required but automatically sets up basic functions and properties to simplify things a bit."
  },
  "api/Inflatable.ClassMapper.BaseClasses.IDPropertyBase-3.html": {
    "href": "api/Inflatable.ClassMapper.BaseClasses.IDPropertyBase-3.html",
    "title": "Class IDPropertyBase<TClassType, TDataType, TReturnType> | Inflatable API Reference",
    "keywords": "Class IDPropertyBase<TClassType, TDataType, TReturnType> ID property base class Inheritance object IDPropertyBase<TClassType, TDataType, TReturnType> ID<ClassType, DataType> Implements IIDProperty<TClassType, TDataType, TReturnType> IFluentInterface IIDProperty<TClassType, TDataType> IIDProperty IPropertyColumns Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Inflatable.ClassMapper.BaseClasses Assembly: Inflatable.dll Syntax public abstract class IDPropertyBase<TClassType, TDataType, TReturnType> : IIDProperty<TClassType, TDataType, TReturnType>, IFluentInterface, IIDProperty<TClassType, TDataType>, IIDProperty, IPropertyColumns where TClassType : class where TReturnType : IIDProperty<TClassType, TDataType, TReturnType> Type Parameters Name Description TClassType The type of the lass type. TDataType The type of the ata type. TReturnType The type of the eturn type. Constructors | Improve this Doc View Source IDPropertyBase(Expression<Func<TClassType, TDataType>>, IMapping) Constructor Declaration protected IDPropertyBase(Expression<Func<TClassType, TDataType>> expression, IMapping mapping) Parameters Type Name Description Expression<Func<TClassType, TDataType>> expression Expression used to point to the property IMapping mapping Mapping the StringID is added to See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> Properties | Improve this Doc View Source AutoIncrement Gets a value indicating whether to [automatic increment]. Declaration public bool AutoIncrement { get; } Property Value Type Description bool true if [automatic increment]; otherwise, false. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source ColumnName Gets the name of the column. Declaration public string ColumnName { get; } Property Value Type Description string The name of the column. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source Columns Gets the columns associated with this property. Declaration public IQueryColumnInfo[]? Columns { get; protected set; } Property Value Type Description IQueryColumnInfo[] The columns associated with this property. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source CompiledExpression Compiled version of the expression Declaration public Func<TClassType, TDataType> CompiledExpression { get; } Property Value Type Description Func<TClassType, TDataType> See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source ComputedColumnSpecification Gets the computed column specification. Declaration public string ComputedColumnSpecification { get; } Property Value Type Description string The computed column specification. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source Constraints Gets the constraints if the data source supports them. Declaration public IList<string> Constraints { get; } Property Value Type Description IList<string> The constraints if the data source supports them. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source DefaultValue Default value for this property Declaration public Func<TDataType> DefaultValue { get; } Property Value Type Description Func<TDataType> See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source Expression Expression pointing to the property Declaration public Expression<Func<TClassType, TDataType>> Expression { get; } Property Value Type Description Expression<Func<TClassType, TDataType>> See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source Index Gets a value indicating whether this IIDProperty is indexed. Declaration public bool Index { get; } Property Value Type Description bool true if index; otherwise, false. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source InternalFieldName Gets the name of the internal field. Declaration public string InternalFieldName { get; } Property Value Type Description string The name of the internal field. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source MaxLength Gets the maximum length. Declaration public int MaxLength { get; } Property Value Type Description int The maximum length. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source Name Gets the name. Declaration public string Name { get; } Property Value Type Description string The name. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source Nullable Gets a value indicating whether this IIDProperty is nullable. Declaration public bool Nullable { get; } Property Value Type Description bool true if nullable; otherwise, false. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source ParentMapping Gets the parent mapping. Declaration public IMapping ParentMapping { get; } Property Value Type Description IMapping The parent mapping. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source PropertyType Gets the type of the property. Declaration public Type PropertyType { get; } Property Value Type Description Type The type of the property. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source ReadOnly Gets a value indicating whether [read only]. Declaration public bool ReadOnly { get; } Property Value Type Description bool true if [read only]; otherwise, false. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source SetAction Gets or sets the expression used to set the value. Declaration protected Action<TClassType, TDataType> SetAction { get; set; } Property Value Type Description Action<TClassType, TDataType> The set expression. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source TypeName Gets the name of the type. Declaration public string TypeName { get; } Property Value Type Description string The name of the type. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source Unique Gets a value indicating whether this IIDProperty is unique. Declaration public bool Unique { get; } Property Value Type Description bool true if unique; otherwise, false. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> Methods | Improve this Doc View Source AddToChildTable(ITable) Adds to a child table. Declaration public void AddToChildTable(ITable table) Parameters Type Name Description ITable table The table. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source AddToTable(ITable) Adds to table. Declaration public void AddToTable(ITable table) Parameters Type Name Description ITable table The table. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source CompareTo(IDPropertyBase<TClassType, TDataType, TReturnType>?) Compares to. Declaration public virtual int CompareTo(IDPropertyBase<TClassType, TDataType, TReturnType>? other) Parameters Type Name Description IDPropertyBase<TClassType, TDataType, TReturnType> other The other. Returns Type Description int 1 if it's greater, 0 if they're equal, -1 if it's less than. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source CompareTo(object?) Compares the object to another object Declaration public int CompareTo(object? other) Parameters Type Name Description object other Object to compare to Returns Type Description int 0 if they are equal, -1 if this is smaller, 1 if it is larger See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source Convert<TResult>(IMapping) Converts this instance to the class specified Declaration public abstract IIDProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters Type Name Description IMapping mapping The mapping. Returns Type Description IIDProperty The resulting property Type Parameters Name Description TResult The type of the result. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source Equals(object) Determines if the two objects are equal and returns true if they are, false otherwise Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Object to compare to Returns Type Description bool True if they are equal, false otherwise Overrides object.Equals(object) See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source GetColumnInfo() Gets the column information. Declaration public IQueryColumnInfo[] GetColumnInfo() Returns Type Description IQueryColumnInfo[] The column information. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source GetHashCode() Returns the hash code for the property Declaration public override int GetHashCode() Returns Type Description int The hash code for the property Overrides object.GetHashCode() See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source IsAutoIncremented() Determines whether this [is auto incremented]. Declaration public TReturnType IsAutoIncremented() Returns Type Description TReturnType this See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source IsIndexed() Determines whether this instance is indexed. Declaration public TReturnType IsIndexed() Returns Type Description TReturnType this See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source IsReadOnly() Determines whether [is read only]. Declaration public TReturnType IsReadOnly() Returns Type Description TReturnType this See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source IsUnique() Determines whether this instance is unique. Declaration public TReturnType IsUnique() Returns Type Description TReturnType this See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source SetColumnInfo(IMappingSource?) Sets the column information. Declaration public abstract void SetColumnInfo(IMappingSource? mappings) Parameters Type Name Description IMappingSource mappings The mappings. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source Setup() Sets up the property (used internally) Declaration public abstract void Setup() See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source ToString() Gets the property as a string Declaration public override string ToString() Returns Type Description string The string representation of the property Overrides object.ToString() See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source WithColumnName(string) Sets the name of the field in the database. Declaration public TReturnType WithColumnName(string columnName) Parameters Type Name Description string columnName Name of the field. Returns Type Description TReturnType this See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source WithComputedColumnSpecification(string) Sets the computed column specification if the source allows it. Declaration public TReturnType WithComputedColumnSpecification(string computedColumnSpecification) Parameters Type Name Description string computedColumnSpecification The computed column specification. Returns Type Description TReturnType this See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source WithConstraint(string) Sets a constraint on the field if the source allows it. Declaration public TReturnType WithConstraint(string constraint) Parameters Type Name Description string constraint The constraint. Returns Type Description TReturnType this See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source WithDefaultValue(Func<TDataType>) Sets the default value of the property. Declaration public TReturnType WithDefaultValue(Func<TDataType> value) Parameters Type Name Description Func<TDataType> value The value. Returns Type Description TReturnType this See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source WithMaxLength() Sets the length for the property to MAX. Declaration public TReturnType WithMaxLength() Returns Type Description TReturnType this. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source WithMaxLength(int) Sets the max length. Declaration public TReturnType WithMaxLength(int maxLength) Parameters Type Name Description int maxLength The maximum length. Returns Type Description TReturnType This See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> Operators | Improve this Doc View Source operator ==(IDPropertyBase<TClassType, TDataType, TReturnType>, IDPropertyBase<TClassType, TDataType, TReturnType>) The == operator Declaration public static bool operator ==(IDPropertyBase<TClassType, TDataType, TReturnType> left, IDPropertyBase<TClassType, TDataType, TReturnType> right) Parameters Type Name Description IDPropertyBase<TClassType, TDataType, TReturnType> left left item IDPropertyBase<TClassType, TDataType, TReturnType> right right item Returns Type Description bool true if the left and right item are the same, false otherwise See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source operator >(IDPropertyBase<TClassType, TDataType, TReturnType>, IDPropertyBase<TClassType, TDataType, TReturnType>) The > operator Declaration public static bool operator >(IDPropertyBase<TClassType, TDataType, TReturnType> left, IDPropertyBase<TClassType, TDataType, TReturnType> right) Parameters Type Name Description IDPropertyBase<TClassType, TDataType, TReturnType> left left item IDPropertyBase<TClassType, TDataType, TReturnType> right right item Returns Type Description bool True if the left item is greater than the right, false otherwise See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source operator >=(IDPropertyBase<TClassType, TDataType, TReturnType>, IDPropertyBase<TClassType, TDataType, TReturnType>) Implements the operator >=. Declaration public static bool operator >=(IDPropertyBase<TClassType, TDataType, TReturnType> left, IDPropertyBase<TClassType, TDataType, TReturnType> right) Parameters Type Name Description IDPropertyBase<TClassType, TDataType, TReturnType> left The left. IDPropertyBase<TClassType, TDataType, TReturnType> right The right. Returns Type Description bool The result of the operator. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source operator !=(IDPropertyBase<TClassType, TDataType, TReturnType>, IDPropertyBase<TClassType, TDataType, TReturnType>) != operator Declaration public static bool operator !=(IDPropertyBase<TClassType, TDataType, TReturnType> left, IDPropertyBase<TClassType, TDataType, TReturnType> right) Parameters Type Name Description IDPropertyBase<TClassType, TDataType, TReturnType> left left item IDPropertyBase<TClassType, TDataType, TReturnType> right right item Returns Type Description bool returns true if they are not equal, false otherwise See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source operator <(IDPropertyBase<TClassType, TDataType, TReturnType>, IDPropertyBase<TClassType, TDataType, TReturnType>) The < operator Declaration public static bool operator <(IDPropertyBase<TClassType, TDataType, TReturnType> left, IDPropertyBase<TClassType, TDataType, TReturnType> right) Parameters Type Name Description IDPropertyBase<TClassType, TDataType, TReturnType> left left item IDPropertyBase<TClassType, TDataType, TReturnType> right right item Returns Type Description bool True if the left item is less than the right, false otherwise See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> | Improve this Doc View Source operator <=(IDPropertyBase<TClassType, TDataType, TReturnType>, IDPropertyBase<TClassType, TDataType, TReturnType>) Implements the operator <=. Declaration public static bool operator <=(IDPropertyBase<TClassType, TDataType, TReturnType> left, IDPropertyBase<TClassType, TDataType, TReturnType> right) Parameters Type Name Description IDPropertyBase<TClassType, TDataType, TReturnType> left The left. IDPropertyBase<TClassType, TDataType, TReturnType> right The right. Returns Type Description bool The result of the operator. See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType> Implements IIDProperty<ClassType, DataType, ReturnType> IFluentInterface IIDProperty<ClassType, DataType> IIDProperty IPropertyColumns See Also IIDProperty<ClassType, DataType, ReturnType> IIDProperty<ClassType, DataType>"
  },
  "api/Inflatable.ClassMapper.BaseClasses.ManyClassPropertyBase-3.html": {
    "href": "api/Inflatable.ClassMapper.BaseClasses.ManyClassPropertyBase-3.html",
    "title": "Class ManyClassPropertyBase<TClassType, TDataType, TReturnType> | Inflatable API Reference",
    "keywords": "Class ManyClassPropertyBase<TClassType, TDataType, TReturnType> Many class property base. Inheritance object ManyClassPropertyBase<TClassType, TDataType, TReturnType> ManyToMany<TClassType, TDataType> Implements IManyToManyProperty<TClassType, IList<TDataType>, TReturnType> IFluentInterface IManyToManyProperty<TClassType, IList<TDataType>> IManyToManyProperty IClassProperty IPropertyColumns Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Inflatable.ClassMapper.BaseClasses Assembly: Inflatable.dll Syntax public abstract class ManyClassPropertyBase<TClassType, TDataType, TReturnType> : IManyToManyProperty<TClassType, IList<TDataType>, TReturnType>, IFluentInterface, IManyToManyProperty<TClassType, IList<TDataType>>, IManyToManyProperty, IClassProperty, IPropertyColumns where TClassType : class where TDataType : class where TReturnType : IManyToManyProperty<TClassType, IList<TDataType>, TReturnType> Type Parameters Name Description TClassType The class type. TDataType The data type. TReturnType The return type. Constructors | Improve this Doc View Source ManyClassPropertyBase(Expression<Func<TClassType, IList<TDataType>>>, IMapping) Constructor Declaration protected ManyClassPropertyBase(Expression<Func<TClassType, IList<TDataType>>> expression, IMapping mapping) Parameters Type Name Description Expression<Func<TClassType, IList<TDataType>>> expression Expression used to point to the property IMapping mapping Mapping the StringID is added to Properties | Improve this Doc View Source Cascade Gets a value indicating whether this is cascade. Declaration public bool Cascade { get; protected set; } Property Value Type Description bool true if cascade; otherwise, false. | Improve this Doc View Source Columns Gets the columns associated with this property. Declaration public IQueryColumnInfo[]? Columns { get; protected set; } Property Value Type Description IQueryColumnInfo[] The columns associated with this property. | Improve this Doc View Source CompiledExpression Compiled version of the expression Declaration public Func<TClassType, IList<TDataType>> CompiledExpression { get; } Property Value Type Description Func<TClassType, IList<TDataType>> The compiled expression. | Improve this Doc View Source DatabaseJoinsCascade Gets a value indicating whether [database joins cascade]. Declaration public bool DatabaseJoinsCascade { get; protected set; } Property Value Type Description bool true if [database joins cascade]; otherwise, false. | Improve this Doc View Source Expression Expression pointing to the property Declaration public Expression<Func<TClassType, IList<TDataType>>> Expression { get; } Property Value Type Description Expression<Func<TClassType, IList<TDataType>>> The expression. | Improve this Doc View Source ForeignMapping Gets the foreign mapping. Declaration public List<IMapping> ForeignMapping { get; protected set; } Property Value Type Description List<IMapping> The foreign mapping. | Improve this Doc View Source InternalFieldName Gets the name of the internal field. Declaration public string InternalFieldName { get; } Property Value Type Description string The name of the internal field. | Improve this Doc View Source LoadPropertyQuery Gets the load property query. Declaration public Query? LoadPropertyQuery { get; protected set; } Property Value Type Description Query The load property query. | Improve this Doc View Source Name Gets the name. Declaration public string Name { get; } Property Value Type Description string The name. | Improve this Doc View Source OnDeleteDoNothingValue Gets or sets a value indicating whether [on delete do nothing]. Declaration protected bool OnDeleteDoNothingValue { get; set; } Property Value Type Description bool true if [on delete do nothing]; otherwise, false. | Improve this Doc View Source ParentMapping Gets the parent mapping. Declaration public IMapping ParentMapping { get; } Property Value Type Description IMapping The parent mapping. | Improve this Doc View Source PropertyType Gets the type of the property. Declaration public Type PropertyType { get; protected set; } Property Value Type Description Type The type of the property. | Improve this Doc View Source TableName Gets the name of the table. Declaration public string? TableName { get; protected set; } Property Value Type Description string The name of the table. | Improve this Doc View Source TypeName Gets the name of the type. Declaration public string TypeName { get; protected set; } Property Value Type Description string The name of the type. Methods | Improve this Doc View Source CascadeChanges() Cascades changes to the mapped instance. Declaration public TReturnType CascadeChanges() Returns Type Description TReturnType This | Improve this Doc View Source Convert<TResult>(IMapping) Converts this instance to the class specified Declaration public abstract IManyToManyProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters Type Name Description IMapping mapping The mapping. Returns Type Description IManyToManyProperty The resulting property Type Parameters Name Description TResult The type of the result. | Improve this Doc View Source Equals(object) Determines if the two objects are equal and returns true if they are, false otherwise Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Object to compare to Returns Type Description bool True if they are equal, false otherwise Overrides object.Equals(object) | Improve this Doc View Source GetColumnInfo() Gets the column information. Declaration public IQueryColumnInfo[] GetColumnInfo() Returns Type Description IQueryColumnInfo[] The column information. | Improve this Doc View Source GetHashCode() Returns the hash code for the property Declaration public override int GetHashCode() Returns Type Description int The hash code for the property Overrides object.GetHashCode() | Improve this Doc View Source GetValue(object) Gets the property's value from the object sent in Declaration public object? GetValue(object Object) Parameters Type Name Description object Object Object to get the value from Returns Type Description object The value of the property | Improve this Doc View Source LoadUsing(string, CommandType) Loads the property using the query specified. Declaration public TReturnType LoadUsing(string queryText, CommandType type) Parameters Type Name Description string queryText The query text. CommandType type The type. Returns Type Description TReturnType This | Improve this Doc View Source OnDeleteDoNothing() Called when you want to override the default referential integrity and do nothing on delete. Declaration public TReturnType OnDeleteDoNothing() Returns Type Description TReturnType This | Improve this Doc View Source SetColumnInfo(IMappingSource) Sets the column information. Declaration public abstract void SetColumnInfo(IMappingSource mappings) Parameters Type Name Description IMappingSource mappings The mappings. | Improve this Doc View Source SetTableName(string) Sets the table's name. Declaration public TReturnType SetTableName(string tableName) Parameters Type Name Description string tableName Name of the table. Returns Type Description TReturnType This | Improve this Doc View Source Setup(IMappingSource, ISource) Sets up the property (used internally) Declaration public abstract void Setup(IMappingSource mappings, ISource sourceSpec) Parameters Type Name Description IMappingSource mappings The mappings. ISource sourceSpec The source spec. | Improve this Doc View Source Similar(IManyToManyProperty) Checks if the properties are similar to one another Declaration public bool Similar(IManyToManyProperty secondProperty) Parameters Type Name Description IManyToManyProperty secondProperty The second property. Returns Type Description bool True if they are similar, false otherwise | Improve this Doc View Source ToString() Gets the property as a string Declaration public override string ToString() Returns Type Description string The string representation of the property Overrides object.ToString() Operators | Improve this Doc View Source operator ==(ManyClassPropertyBase<TClassType, TDataType, TReturnType>, ManyClassPropertyBase<TClassType, TDataType, TReturnType>) The == operator Declaration public static bool operator ==(ManyClassPropertyBase<TClassType, TDataType, TReturnType> first, ManyClassPropertyBase<TClassType, TDataType, TReturnType> second) Parameters Type Name Description ManyClassPropertyBase<TClassType, TDataType, TReturnType> first First item ManyClassPropertyBase<TClassType, TDataType, TReturnType> second Second item Returns Type Description bool true if the first and second item are the same, false otherwise | Improve this Doc View Source operator >(ManyClassPropertyBase<TClassType, TDataType, TReturnType>, ManyClassPropertyBase<TClassType, TDataType, TReturnType>) The > operator Declaration public static bool operator >(ManyClassPropertyBase<TClassType, TDataType, TReturnType> first, ManyClassPropertyBase<TClassType, TDataType, TReturnType> second) Parameters Type Name Description ManyClassPropertyBase<TClassType, TDataType, TReturnType> first First item ManyClassPropertyBase<TClassType, TDataType, TReturnType> second Second item Returns Type Description bool True if the first item is greater than the second, false otherwise | Improve this Doc View Source operator !=(ManyClassPropertyBase<TClassType, TDataType, TReturnType>, ManyClassPropertyBase<TClassType, TDataType, TReturnType>) != operator Declaration public static bool operator !=(ManyClassPropertyBase<TClassType, TDataType, TReturnType> first, ManyClassPropertyBase<TClassType, TDataType, TReturnType> second) Parameters Type Name Description ManyClassPropertyBase<TClassType, TDataType, TReturnType> first First item ManyClassPropertyBase<TClassType, TDataType, TReturnType> second Second item Returns Type Description bool returns true if they are not equal, false otherwise | Improve this Doc View Source operator <(ManyClassPropertyBase<TClassType, TDataType, TReturnType>, ManyClassPropertyBase<TClassType, TDataType, TReturnType>) The < operator Declaration public static bool operator <(ManyClassPropertyBase<TClassType, TDataType, TReturnType> first, ManyClassPropertyBase<TClassType, TDataType, TReturnType> second) Parameters Type Name Description ManyClassPropertyBase<TClassType, TDataType, TReturnType> first First item ManyClassPropertyBase<TClassType, TDataType, TReturnType> second Second item Returns Type Description bool True if the first item is less than the second, false otherwise Implements IManyToManyProperty<TClassType, TDataType, TReturnType> IFluentInterface IManyToManyProperty<TClassType, TDataType> IManyToManyProperty IClassProperty IPropertyColumns"
  },
  "api/Inflatable.ClassMapper.BaseClasses.ManyToOneManyPropertyBase-3.html": {
    "href": "api/Inflatable.ClassMapper.BaseClasses.ManyToOneManyPropertyBase-3.html",
    "title": "Class ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> | Inflatable API Reference",
    "keywords": "Class ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> Many to one single property base Inheritance object ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> ManyToOneMany<TClassType, TDataType> Implements IManyToOneProperty<TClassType, IList<TDataType>, TReturnType> IFluentInterface IManyToOneProperty<TClassType, IList<TDataType>> IManyToOneListProperty IManyToOneProperty IClassProperty IPropertyColumns Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Inflatable.ClassMapper.BaseClasses Assembly: Inflatable.dll Syntax public abstract class ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> : IManyToOneProperty<TClassType, IList<TDataType>, TReturnType>, IFluentInterface, IManyToOneProperty<TClassType, IList<TDataType>>, IManyToOneListProperty, IManyToOneProperty, IClassProperty, IPropertyColumns where TClassType : class where TDataType : class where TReturnType : IManyToOneProperty<TClassType, IList<TDataType>, TReturnType> Type Parameters Name Description TClassType The type of the class type. TDataType The type of the data type. TReturnType The type of the return type. Constructors | Improve this Doc View Source ManyToOneManyPropertyBase(Expression<Func<TClassType, IList<TDataType>>>, IMapping) Constructor Declaration protected ManyToOneManyPropertyBase(Expression<Func<TClassType, IList<TDataType>>> expression, IMapping mapping) Parameters Type Name Description Expression<Func<TClassType, IList<TDataType>>> expression Expression used to point to the property IMapping mapping Mapping the StringID is added to See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> Properties | Improve this Doc View Source Cascade Gets a value indicating whether this is cascade. Declaration public bool Cascade { get; protected set; } Property Value Type Description bool true if cascade; otherwise, false. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source ColumnName Gets or sets the name of the column. Declaration public string ColumnName { get; protected set; } Property Value Type Description string The name of the column. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source Columns Gets the columns associated with this property. Declaration public IQueryColumnInfo[]? Columns { get; protected set; } Property Value Type Description IQueryColumnInfo[] The columns associated with this property. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source CompiledExpression Compiled version of the expression Declaration public Func<TClassType, IList<TDataType>> CompiledExpression { get; } Property Value Type Description Func<TClassType, IList<TDataType>> The compiled expression. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source Expression Expression pointing to the property Declaration public Expression<Func<TClassType, IList<TDataType>>> Expression { get; } Property Value Type Description Expression<Func<TClassType, IList<TDataType>>> The expression. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source ForeignMapping Gets the foreign mapping. Declaration public List<IMapping> ForeignMapping { get; protected set; } Property Value Type Description List<IMapping> The foreign mapping. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source InternalFieldName Gets the name of the internal field. Declaration public string InternalFieldName { get; } Property Value Type Description string The name of the internal field. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source LoadPropertyQuery Gets the load property query. Declaration public Query? LoadPropertyQuery { get; protected set; } Property Value Type Description Query The load property query. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source Name Gets the name. Declaration public string Name { get; } Property Value Type Description string The name. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source OnDeleteDoNothingValue Gets or sets a value indicating whether [on delete do nothing]. Declaration protected bool OnDeleteDoNothingValue { get; set; } Property Value Type Description bool true if [on delete do nothing]; otherwise, false. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source ParentMapping Gets the parent mapping. Declaration public IMapping ParentMapping { get; } Property Value Type Description IMapping The parent mapping. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source PropertyType Gets the type of the property. Declaration public Type PropertyType { get; } Property Value Type Description Type The type of the property. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source TypeName Gets the name of the type. Declaration public string TypeName { get; } Property Value Type Description string The name of the type. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> Methods | Improve this Doc View Source CascadeChanges() Cascades changes to the mapped instance. Declaration public TReturnType CascadeChanges() Returns Type Description TReturnType This See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source Convert<TResult>(IMapping) Converts this instance to the class specified Declaration public abstract IManyToOneProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters Type Name Description IMapping mapping The mapping. Returns Type Description IManyToOneProperty The resulting property Type Parameters Name Description TResult The type of the result. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source Equals(object) Determines if the two objects are equal and returns true if they are, false otherwise Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Object to compare to Returns Type Description bool True if they are equal, false otherwise Overrides object.Equals(object) See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source GetColumnInfo() Gets the column information. Declaration public IQueryColumnInfo[] GetColumnInfo() Returns Type Description IQueryColumnInfo[] The column information. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source GetHashCode() Returns the hash code for the property Declaration public override int GetHashCode() Returns Type Description int The hash code for the property Overrides object.GetHashCode() See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source GetValue(object) Gets the property's value from the object sent in Declaration public object? GetValue(object Object) Parameters Type Name Description object Object Object to get the value from Returns Type Description object The value of the property See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source LoadUsing(string, CommandType) Loads the property using the query specified. Declaration public TReturnType LoadUsing(string queryText, CommandType type) Parameters Type Name Description string queryText The query text. CommandType type The type. Returns Type Description TReturnType This See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source OnDeleteDoNothing() Called when you want to override the default referential integrity and do nothing on delete. Declaration public TReturnType OnDeleteDoNothing() Returns Type Description TReturnType This See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source SetColumnInfo(IMappingSource) Sets the column information. Declaration public abstract void SetColumnInfo(IMappingSource mappings) Parameters Type Name Description IMappingSource mappings The mappings. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source SetColumnName(string) Sets the name of the column. Declaration public TReturnType SetColumnName(string columnName) Parameters Type Name Description string columnName Name of the column. Returns Type Description TReturnType This See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source Setup(IMappingSource, ISource) Sets up the property (used internally) Declaration public abstract void Setup(IMappingSource mappings, ISource sourceSpec) Parameters Type Name Description IMappingSource mappings The mappings. ISource sourceSpec The source spec. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source Similar(IManyToOneProperty) Checks if the properties are similar to one another Declaration public bool Similar(IManyToOneProperty secondProperty) Parameters Type Name Description IManyToOneProperty secondProperty The second property. Returns Type Description bool True if they are similar, false otherwise See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source ToString() Gets the property as a string Declaration public override string ToString() Returns Type Description string The string representation of the property Overrides object.ToString() See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> Operators | Improve this Doc View Source operator ==(ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType>, ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType>) The == operator Declaration public static bool operator ==(ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> first, ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> second) Parameters Type Name Description ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> first First item ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> second Second item Returns Type Description bool true if the first and second item are the same, false otherwise See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source operator >(ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType>, ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType>) The > operator Declaration public static bool operator >(ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> first, ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> second) Parameters Type Name Description ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> first First item ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> second Second item Returns Type Description bool True if the first item is greater than the second, false otherwise See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source operator !=(ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType>, ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType>) != operator Declaration public static bool operator !=(ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> first, ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> second) Parameters Type Name Description ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> first First item ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> second Second item Returns Type Description bool returns true if they are not equal, false otherwise See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source operator <(ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType>, ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType>) The < operator Declaration public static bool operator <(ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> first, ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> second) Parameters Type Name Description ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> first First item ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> second Second item Returns Type Description bool True if the first item is less than the second, false otherwise See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> Implements IManyToOneProperty<TClassType, TDataType, TReturnType> IFluentInterface IManyToOneProperty<TClassType, TDataType> IManyToOneListProperty IManyToOneProperty IClassProperty IPropertyColumns See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType>"
  },
  "api/Inflatable.ClassMapper.BaseClasses.ManyToOneOnePropertyBase-3.html": {
    "href": "api/Inflatable.ClassMapper.BaseClasses.ManyToOneOnePropertyBase-3.html",
    "title": "Class ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> | Inflatable API Reference",
    "keywords": "Class ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> Many to one single property base Inheritance object ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> ManyToOneSingle<TClassType, TDataType> Implements IManyToOneProperty<TClassType, TDataType, TReturnType> IFluentInterface IManyToOneProperty<TClassType, TDataType> IManyToOneProperty IClassProperty IPropertyColumns Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Inflatable.ClassMapper.BaseClasses Assembly: Inflatable.dll Syntax public abstract class ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> : IManyToOneProperty<TClassType, TDataType, TReturnType>, IFluentInterface, IManyToOneProperty<TClassType, TDataType>, IManyToOneProperty, IClassProperty, IPropertyColumns where TClassType : class where TDataType : class where TReturnType : IManyToOneProperty<TClassType, TDataType, TReturnType> Type Parameters Name Description TClassType The type of the class type. TDataType The type of the data type. TReturnType The type of the return type. Constructors | Improve this Doc View Source ManyToOneOnePropertyBase(Expression<Func<TClassType, TDataType?>>, IMapping) Constructor Declaration protected ManyToOneOnePropertyBase(Expression<Func<TClassType, TDataType?>> expression, IMapping mapping) Parameters Type Name Description Expression<Func<TClassType, TDataType>> expression Expression used to point to the property IMapping mapping Mapping the StringID is added to See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> Properties | Improve this Doc View Source Cascade Gets a value indicating whether this is cascade. Declaration public bool Cascade { get; protected set; } Property Value Type Description bool true if cascade; otherwise, false. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source ColumnName Gets or sets the name of the column. Declaration public string ColumnName { get; protected set; } Property Value Type Description string The name of the column. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source Columns Gets the columns associated with this property. Declaration public IQueryColumnInfo[]? Columns { get; protected set; } Property Value Type Description IQueryColumnInfo[] The columns associated with this property. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source CompiledExpression Compiled version of the expression Declaration public Func<TClassType, TDataType?> CompiledExpression { get; } Property Value Type Description Func<TClassType, TDataType> The compiled expression. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source Expression Expression pointing to the property Declaration public Expression<Func<TClassType, TDataType?>> Expression { get; } Property Value Type Description Expression<Func<TClassType, TDataType>> The expression. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source ForeignMapping Gets the foreign mapping. Declaration public List<IMapping> ForeignMapping { get; protected set; } Property Value Type Description List<IMapping> The foreign mapping. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source InternalFieldName Gets the name of the internal field. Declaration public string InternalFieldName { get; } Property Value Type Description string The name of the internal field. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source LoadPropertyQuery Gets the load property query. Declaration public Query? LoadPropertyQuery { get; protected set; } Property Value Type Description Query The load property query. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source Name Gets the name. Declaration public string Name { get; } Property Value Type Description string The name. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source OnDeleteDoNothingValue Gets or sets a value indicating whether [on delete do nothing]. Declaration protected bool OnDeleteDoNothingValue { get; set; } Property Value Type Description bool true if [on delete do nothing]; otherwise, false. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source ParentMapping Gets the parent mapping. Declaration public IMapping ParentMapping { get; } Property Value Type Description IMapping The parent mapping. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source PropertyType Gets the type of the property. Declaration public Type PropertyType { get; } Property Value Type Description Type The type of the property. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source TypeName Gets the name of the type. Declaration public string TypeName { get; } Property Value Type Description string The name of the type. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> Methods | Improve this Doc View Source CascadeChanges() Cascades changes to the mapped instance. Declaration public TReturnType CascadeChanges() Returns Type Description TReturnType This See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source Convert<TResult>(IMapping) Converts this instance to the class specified Declaration public abstract IManyToOneProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters Type Name Description IMapping mapping The mapping. Returns Type Description IManyToOneProperty The resulting property Type Parameters Name Description TResult The type of the result. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source Equals(object) Determines if the two objects are equal and returns true if they are, false otherwise Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Object to compare to Returns Type Description bool True if they are equal, false otherwise Overrides object.Equals(object) See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source GetColumnInfo() Gets the column information. Declaration public IQueryColumnInfo[] GetColumnInfo() Returns Type Description IQueryColumnInfo[] The column information. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source GetHashCode() Returns the hash code for the property Declaration public override int GetHashCode() Returns Type Description int The hash code for the property Overrides object.GetHashCode() See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source GetValue(object) Gets the property's value from the object sent in Declaration public object? GetValue(object Object) Parameters Type Name Description object Object Object to get the value from Returns Type Description object The value of the property See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source LoadUsing(string, CommandType) Loads the property using the query specified. Declaration public TReturnType LoadUsing(string queryText, CommandType type) Parameters Type Name Description string queryText The query text. CommandType type The type. Returns Type Description TReturnType This See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source OnDeleteDoNothing() Called when you want to override the default referential integrity and do nothing on delete. Declaration public TReturnType OnDeleteDoNothing() Returns Type Description TReturnType This See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source SetColumnInfo(IMappingSource) Sets the column information. Declaration public abstract void SetColumnInfo(IMappingSource mappings) Parameters Type Name Description IMappingSource mappings The mappings. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source SetColumnName(string) Sets the name of the column. Declaration public TReturnType SetColumnName(string columnName) Parameters Type Name Description string columnName Name of the column. Returns Type Description TReturnType This See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source Setup(IMappingSource, ISource) Sets up the property (used internally) Declaration public abstract void Setup(IMappingSource mappings, ISource sourceSpec) Parameters Type Name Description IMappingSource mappings The mappings. ISource sourceSpec The source spec. See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source Similar(IManyToOneProperty) Checks if the properties are similar to one another Declaration public bool Similar(IManyToOneProperty secondProperty) Parameters Type Name Description IManyToOneProperty secondProperty The second property. Returns Type Description bool True if they are similar, false otherwise See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source ToString() Gets the property as a string Declaration public override string ToString() Returns Type Description string The string representation of the property Overrides object.ToString() See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> Operators | Improve this Doc View Source operator ==(ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType>, ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType>) The == operator Declaration public static bool operator ==(ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> first, ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> second) Parameters Type Name Description ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> first First item ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> second Second item Returns Type Description bool true if the first and second item are the same, false otherwise See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source operator >(ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType>, ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType>) The > operator Declaration public static bool operator >(ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> first, ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> second) Parameters Type Name Description ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> first First item ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> second Second item Returns Type Description bool True if the first item is greater than the second, false otherwise See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source operator !=(ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType>, ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType>) != operator Declaration public static bool operator !=(ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> first, ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> second) Parameters Type Name Description ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> first First item ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> second Second item Returns Type Description bool returns true if they are not equal, false otherwise See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> | Improve this Doc View Source operator <(ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType>, ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType>) The < operator Declaration public static bool operator <(ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> first, ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> second) Parameters Type Name Description ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> first First item ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> second Second item Returns Type Description bool True if the first item is less than the second, false otherwise See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType> Implements IManyToOneProperty<TClassType, TDataType, TReturnType> IFluentInterface IManyToOneProperty<TClassType, TDataType> IManyToOneProperty IClassProperty IPropertyColumns See Also IManyToOneProperty<TClassType, TDataType, TReturnType> IManyToOneProperty<TClassType, TDataType>"
  },
  "api/Inflatable.ClassMapper.BaseClasses.PropertyBase-3.html": {
    "href": "api/Inflatable.ClassMapper.BaseClasses.PropertyBase-3.html",
    "title": "Class PropertyBase<ClassType, DataType, ReturnType> | Inflatable API Reference",
    "keywords": "Class PropertyBase<ClassType, DataType, ReturnType> Property base class Inheritance object PropertyBase<ClassType, DataType, ReturnType> Reference<ClassType, DataType> Implements IProperty<ClassType, DataType, ReturnType> IFluentInterface IProperty<ClassType, DataType> IProperty IPropertyColumns Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Inflatable.ClassMapper.BaseClasses Assembly: Inflatable.dll Syntax public abstract class PropertyBase<ClassType, DataType, ReturnType> : IProperty<ClassType, DataType, ReturnType>, IFluentInterface, IProperty<ClassType, DataType>, IProperty, IPropertyColumns where ClassType : class where ReturnType : IProperty<ClassType, DataType, ReturnType> Type Parameters Name Description ClassType The type of the class type. DataType The type of the data type. ReturnType The type of the return type. Constructors | Improve this Doc View Source PropertyBase(Expression<Func<ClassType, DataType>>, IMapping) Constructor Declaration protected PropertyBase(Expression<Func<ClassType, DataType>> expression, IMapping mapping) Parameters Type Name Description Expression<Func<ClassType, DataType>> expression Expression used to point to the property IMapping mapping Mapping the StringID is added to See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> Properties | Improve this Doc View Source ColumnName Gets the name of the column. Declaration public string ColumnName { get; } Property Value Type Description string The name of the column. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source Columns Gets the columns associated with this property. Declaration public IQueryColumnInfo[]? Columns { get; protected set; } Property Value Type Description IQueryColumnInfo[] The columns associated with this property. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source CompiledExpression Compiled version of the expression Declaration public Func<ClassType, DataType> CompiledExpression { get; } Property Value Type Description Func<ClassType, DataType> See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source ComputedColumnSpecification Gets the computed column specification. Declaration public string ComputedColumnSpecification { get; } Property Value Type Description string The computed column specification. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source Constraints Gets the constraints if the data source supports them. Declaration public IList<string> Constraints { get; } Property Value Type Description IList<string> The constraints if the data source supports them. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source DefaultValue Default value for this property Declaration public Func<DataType> DefaultValue { get; } Property Value Type Description Func<DataType> See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source Expression Expression pointing to the property Declaration public Expression<Func<ClassType, DataType>> Expression { get; } Property Value Type Description Expression<Func<ClassType, DataType>> See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source Index Gets a value indicating whether this IProperty is indexed. Declaration public bool Index { get; } Property Value Type Description bool true if index; otherwise, false. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source InternalFieldName Gets the name of the internal field. Declaration public string InternalFieldName { get; } Property Value Type Description string The name of the internal field. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source MaxLength Gets the maximum length. Declaration public int MaxLength { get; } Property Value Type Description int The maximum length. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source Name Gets the name. Declaration public string Name { get; } Property Value Type Description string The name. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source Nullable Gets a value indicating whether this IProperty is nullable. Declaration public bool Nullable { get; } Property Value Type Description bool true if nullable; otherwise, false. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source ParentMapping Gets the parent mapping. Declaration public IMapping ParentMapping { get; } Property Value Type Description IMapping The parent mapping. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source PropertyType Gets the type of the property. Declaration public Type PropertyType { get; } Property Value Type Description Type The type of the property. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source ReadOnly Gets a value indicating whether [read only]. Declaration public bool ReadOnly { get; } Property Value Type Description bool true if [read only]; otherwise, false. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source SetAction Gets or sets the expression used to set the value. Declaration protected Action<ClassType, DataType> SetAction { get; set; } Property Value Type Description Action<ClassType, DataType> The set expression. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source TypeName Gets the name of the type. Declaration public string TypeName { get; } Property Value Type Description string The name of the type. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source Unique Gets a value indicating whether this IProperty is unique. Declaration public bool Unique { get; } Property Value Type Description bool true if unique; otherwise, false. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> Methods | Improve this Doc View Source AddToTable(ITable) Adds to table. Declaration public void AddToTable(ITable table) Parameters Type Name Description ITable table The table. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source Convert<TResult>(IMapping) Converts this instance to the class specified Declaration public abstract IProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters Type Name Description IMapping mapping The mapping. Returns Type Description IProperty The resulting property Type Parameters Name Description TResult The type of the result. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source Equals(object) Determines if the two objects are equal and returns true if they are, false otherwise Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Object to compare to Returns Type Description bool True if they are equal, false otherwise Overrides object.Equals(object) See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source GetColumnInfo() Gets the column information. Declaration public IQueryColumnInfo[] GetColumnInfo() Returns Type Description IQueryColumnInfo[] The column information. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source GetHashCode() Returns the hash code for the property Declaration public override int GetHashCode() Returns Type Description int The hash code for the property Overrides object.GetHashCode() See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source IsIndexed() Determines whether this instance is indexed. Declaration public ReturnType IsIndexed() Returns Type Description ReturnType this See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source IsReadOnly() Determines whether [is read only]. Declaration public ReturnType IsReadOnly() Returns Type Description ReturnType this See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source IsUnique() Determines whether this instance is unique. Declaration public ReturnType IsUnique() Returns Type Description ReturnType this See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source SetColumnInfo(IMappingSource?) Sets the column information. Declaration public abstract void SetColumnInfo(IMappingSource? mappings) Parameters Type Name Description IMappingSource mappings The mappings. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source Setup() Sets up the property (used internally) Declaration public abstract void Setup() See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source Similar(IProperty) Checks if the properties are similar to one another Declaration public bool Similar(IProperty secondProperty) Parameters Type Name Description IProperty secondProperty The second property. Returns Type Description bool True if they are similar, false otherwise See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source ToString() Gets the property as a string Declaration public override string ToString() Returns Type Description string The string representation of the property Overrides object.ToString() See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source WithColumnName(string) Sets the name of the field in the database. Declaration public ReturnType WithColumnName(string columnName) Parameters Type Name Description string columnName Name of the field. Returns Type Description ReturnType this See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source WithComputedColumnSpecification(string) Sets the computed column specification if the source allows it. Declaration public ReturnType WithComputedColumnSpecification(string computedColumnSpecification) Parameters Type Name Description string computedColumnSpecification The computed column specification. Returns Type Description ReturnType this See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source WithConstraint(string) Sets a constraint on the field if the source allows it. Declaration public ReturnType WithConstraint(string constraint) Parameters Type Name Description string constraint The constraint. Returns Type Description ReturnType this See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source WithDefaultValue(Func<DataType>) Sets the default value of the property. Declaration public ReturnType WithDefaultValue(Func<DataType> value) Parameters Type Name Description Func<DataType> value The value. Returns Type Description ReturnType this See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source WithMaxLength() Sets the length for the property to MAX. Declaration public ReturnType WithMaxLength() Returns Type Description ReturnType this. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source WithMaxLength(int) Sets the max length. Declaration public ReturnType WithMaxLength(int maxLength) Parameters Type Name Description int maxLength The maximum length. Returns Type Description ReturnType This See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> Operators | Improve this Doc View Source operator ==(PropertyBase<ClassType, DataType, ReturnType>, PropertyBase<ClassType, DataType, ReturnType>) The == operator Declaration public static bool operator ==(PropertyBase<ClassType, DataType, ReturnType> first, PropertyBase<ClassType, DataType, ReturnType> second) Parameters Type Name Description PropertyBase<ClassType, DataType, ReturnType> first First item PropertyBase<ClassType, DataType, ReturnType> second Second item Returns Type Description bool true if the first and second item are the same, false otherwise See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source operator >(PropertyBase<ClassType, DataType, ReturnType>, PropertyBase<ClassType, DataType, ReturnType>) The > operator Declaration public static bool operator >(PropertyBase<ClassType, DataType, ReturnType> first, PropertyBase<ClassType, DataType, ReturnType> second) Parameters Type Name Description PropertyBase<ClassType, DataType, ReturnType> first First item PropertyBase<ClassType, DataType, ReturnType> second Second item Returns Type Description bool True if the first item is greater than the second, false otherwise See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source operator !=(PropertyBase<ClassType, DataType, ReturnType>, PropertyBase<ClassType, DataType, ReturnType>) != operator Declaration public static bool operator !=(PropertyBase<ClassType, DataType, ReturnType> first, PropertyBase<ClassType, DataType, ReturnType> second) Parameters Type Name Description PropertyBase<ClassType, DataType, ReturnType> first First item PropertyBase<ClassType, DataType, ReturnType> second Second item Returns Type Description bool returns true if they are not equal, false otherwise See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source operator <(PropertyBase<ClassType, DataType, ReturnType>, PropertyBase<ClassType, DataType, ReturnType>) The < operator Declaration public static bool operator <(PropertyBase<ClassType, DataType, ReturnType> first, PropertyBase<ClassType, DataType, ReturnType> second) Parameters Type Name Description PropertyBase<ClassType, DataType, ReturnType> first First item PropertyBase<ClassType, DataType, ReturnType> second Second item Returns Type Description bool True if the first item is less than the second, false otherwise See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> Implements IProperty<ClassType, DataType, ReturnType> IFluentInterface IProperty<ClassType, DataType> IProperty IPropertyColumns See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType>"
  },
  "api/Inflatable.ClassMapper.BaseClasses.SingleClassPropertyBase-3.html": {
    "href": "api/Inflatable.ClassMapper.BaseClasses.SingleClassPropertyBase-3.html",
    "title": "Class SingleClassPropertyBase<TClassType, TDataType, TReturnType> | Inflatable API Reference",
    "keywords": "Class SingleClassPropertyBase<TClassType, TDataType, TReturnType> Property base class Inheritance object SingleClassPropertyBase<TClassType, TDataType, TReturnType> Map<TClassType, TDataType> Implements IMapProperty<TClassType, TDataType, TReturnType> IFluentInterface IMapProperty<TClassType, TDataType> IMapProperty IClassProperty IPropertyColumns Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Inflatable.ClassMapper.BaseClasses Assembly: Inflatable.dll Syntax public abstract class SingleClassPropertyBase<TClassType, TDataType, TReturnType> : IMapProperty<TClassType, TDataType, TReturnType>, IFluentInterface, IMapProperty<TClassType, TDataType>, IMapProperty, IClassProperty, IPropertyColumns where TClassType : class where TDataType : class where TReturnType : IMapProperty<TClassType, TDataType, TReturnType> Type Parameters Name Description TClassType The type of the class type. TDataType The type of the data type. TReturnType The type of the return type. Constructors | Improve this Doc View Source SingleClassPropertyBase(Expression<Func<TClassType, TDataType?>>, IMapping) Constructor Declaration protected SingleClassPropertyBase(Expression<Func<TClassType, TDataType?>> expression, IMapping mapping) Parameters Type Name Description Expression<Func<TClassType, TDataType>> expression Expression used to point to the property IMapping mapping Mapping the StringID is added to See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> Properties | Improve this Doc View Source Cascade Gets a value indicating whether this is cascade. Declaration public bool Cascade { get; protected set; } Property Value Type Description bool true if cascade; otherwise, false. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source ColumnName Gets the name of the column. Declaration public string ColumnName { get; protected set; } Property Value Type Description string The name of the column. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source Columns Gets the columns associated with this property. Declaration public IQueryColumnInfo[]? Columns { get; protected set; } Property Value Type Description IQueryColumnInfo[] The columns associated with this property. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source CompiledExpression Compiled version of the expression Declaration public Func<TClassType, TDataType?> CompiledExpression { get; protected set; } Property Value Type Description Func<TClassType, TDataType> The compiled expression. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source Expression Expression pointing to the property Declaration public Expression<Func<TClassType, TDataType?>> Expression { get; protected set; } Property Value Type Description Expression<Func<TClassType, TDataType>> The expression. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source ForeignMapping Gets the foreign mapping. Declaration public List<IMapping> ForeignMapping { get; protected set; } Property Value Type Description List<IMapping> The foreign mapping. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source InternalFieldName Gets the name of the internal field. Declaration public string InternalFieldName { get; protected set; } Property Value Type Description string The name of the internal field. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source LoadPropertyQuery Gets the load property query. Declaration public Query? LoadPropertyQuery { get; protected set; } Property Value Type Description Query The load property query. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source Name Gets the name. Declaration public string Name { get; protected set; } Property Value Type Description string The name. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source OnDeleteDoNothingValue Gets or sets a value indicating whether [on delete do nothing]. Declaration protected bool OnDeleteDoNothingValue { get; set; } Property Value Type Description bool true if [on delete do nothing]; otherwise, false. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source ParentMapping Gets the parent mapping. Declaration public IMapping ParentMapping { get; protected set; } Property Value Type Description IMapping The parent mapping. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source PropertyType Gets the type of the property. Declaration public Type PropertyType { get; } Property Value Type Description Type The type of the property. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source SetNullOnDelete Gets or sets a value indicating whether [set null on delete]. Declaration protected bool SetNullOnDelete { get; set; } Property Value Type Description bool true if [set null on delete]; otherwise, false. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source TypeName Gets the name of the type. Declaration public string TypeName { get; protected set; } Property Value Type Description string The name of the type. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source Unique Gets a value indicating whether this is unique. Declaration public bool Unique { get; protected set; } Property Value Type Description bool true if unique; otherwise, false. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> Methods | Improve this Doc View Source AddToTable(ITable) Adds to table. Declaration public void AddToTable(ITable table) Parameters Type Name Description ITable table The table. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source CascadeChanges() Cascades changes to the mapped instance. Declaration public TReturnType CascadeChanges() Returns Type Description TReturnType This See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source Convert<TResult>(IMapping) Converts this instance to the class specified Declaration public abstract IMapProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters Type Name Description IMapping mapping The mapping. Returns Type Description IMapProperty The resulting property Type Parameters Name Description TResult The type of the result. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source Equals(object) Determines if the two objects are equal and returns true if they are, false otherwise Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Object to compare to Returns Type Description bool True if they are equal, false otherwise Overrides object.Equals(object) See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source GetColumnInfo() Gets the column information. Declaration public IQueryColumnInfo[] GetColumnInfo() Returns Type Description IQueryColumnInfo[] The column information. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source GetHashCode() Returns the hash code for the property Declaration public override int GetHashCode() Returns Type Description int The hash code for the property Overrides object.GetHashCode() See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source GetValue(object) Gets the property's value from the object sent in Declaration public object? GetValue(object Object) Parameters Type Name Description object Object Object to get the value from Returns Type Description object The value of the property See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source IsUnique() Determines whether this instance is unique. Declaration public TReturnType IsUnique() Returns Type Description TReturnType this See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source LoadUsing(string, CommandType) Loads the property using the query specified. Declaration public TReturnType LoadUsing(string queryText, CommandType type) Parameters Type Name Description string queryText The query text. CommandType type The type. Returns Type Description TReturnType This See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source OnDeleteDoNothing() Called when you want to override the default referential integrity and do nothing on delete. Declaration public TReturnType OnDeleteDoNothing() Returns Type Description TReturnType This See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source SetColumnInfo(IMappingSource) Sets the column information. Declaration public abstract void SetColumnInfo(IMappingSource mappings) Parameters Type Name Description IMappingSource mappings The mappings. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source Setup(IMappingSource) Sets up the property (used internally) Declaration public abstract void Setup(IMappingSource mappings) Parameters Type Name Description IMappingSource mappings The mappings. See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source Similar(IMapProperty) Checks if the properties are similar to one another Declaration public bool Similar(IMapProperty secondProperty) Parameters Type Name Description IMapProperty secondProperty The second property. Returns Type Description bool True if they are similar, false otherwise See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source ToString() Gets the property as a string Declaration public override string ToString() Returns Type Description string The string representation of the property Overrides object.ToString() See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source WithColumnName(string) Sets the name of the column. Declaration public TReturnType WithColumnName(string columnName) Parameters Type Name Description string columnName Name of the column. Returns Type Description TReturnType This See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> Operators | Improve this Doc View Source operator ==(SingleClassPropertyBase<TClassType, TDataType, TReturnType>, SingleClassPropertyBase<TClassType, TDataType, TReturnType>) The == operator Declaration public static bool operator ==(SingleClassPropertyBase<TClassType, TDataType, TReturnType> first, SingleClassPropertyBase<TClassType, TDataType, TReturnType> second) Parameters Type Name Description SingleClassPropertyBase<TClassType, TDataType, TReturnType> first First item SingleClassPropertyBase<TClassType, TDataType, TReturnType> second Second item Returns Type Description bool true if the first and second item are the same, false otherwise See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source operator >(SingleClassPropertyBase<TClassType, TDataType, TReturnType>, SingleClassPropertyBase<TClassType, TDataType, TReturnType>) The > operator Declaration public static bool operator >(SingleClassPropertyBase<TClassType, TDataType, TReturnType> first, SingleClassPropertyBase<TClassType, TDataType, TReturnType> second) Parameters Type Name Description SingleClassPropertyBase<TClassType, TDataType, TReturnType> first First item SingleClassPropertyBase<TClassType, TDataType, TReturnType> second Second item Returns Type Description bool True if the first item is greater than the second, false otherwise See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source operator !=(SingleClassPropertyBase<TClassType, TDataType, TReturnType>, SingleClassPropertyBase<TClassType, TDataType, TReturnType>) != operator Declaration public static bool operator !=(SingleClassPropertyBase<TClassType, TDataType, TReturnType> first, SingleClassPropertyBase<TClassType, TDataType, TReturnType> second) Parameters Type Name Description SingleClassPropertyBase<TClassType, TDataType, TReturnType> first First item SingleClassPropertyBase<TClassType, TDataType, TReturnType> second Second item Returns Type Description bool returns true if they are not equal, false otherwise See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> | Improve this Doc View Source operator <(SingleClassPropertyBase<TClassType, TDataType, TReturnType>, SingleClassPropertyBase<TClassType, TDataType, TReturnType>) The < operator Declaration public static bool operator <(SingleClassPropertyBase<TClassType, TDataType, TReturnType> first, SingleClassPropertyBase<TClassType, TDataType, TReturnType> second) Parameters Type Name Description SingleClassPropertyBase<TClassType, TDataType, TReturnType> first First item SingleClassPropertyBase<TClassType, TDataType, TReturnType> second Second item Returns Type Description bool True if the first item is less than the second, false otherwise See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType> Implements IMapProperty<TClassType, TDataType, TReturnType> IFluentInterface IMapProperty<TClassType, TDataType> IMapProperty IClassProperty IPropertyColumns See Also IProperty<ClassType, DataType, ReturnType> IProperty<ClassType, DataType>"
  },
  "api/Inflatable.ClassMapper.BaseClasses.html": {
    "href": "api/Inflatable.ClassMapper.BaseClasses.html",
    "title": "Namespace Inflatable.ClassMapper.BaseClasses | Inflatable API Reference",
    "keywords": "Namespace Inflatable.ClassMapper.BaseClasses Classes IDPropertyBase<TClassType, TDataType, TReturnType> ID property base class ManyClassPropertyBase<TClassType, TDataType, TReturnType> Many class property base. ManyToOneManyPropertyBase<TClassType, TDataType, TReturnType> Many to one single property base ManyToOneOnePropertyBase<TClassType, TDataType, TReturnType> Many to one single property base PropertyBase<ClassType, DataType, ReturnType> Property base class SingleClassPropertyBase<TClassType, TDataType, TReturnType> Property base class"
  },
  "api/Inflatable.ClassMapper.Column.ComplexColumnInfo-2.html": {
    "href": "api/Inflatable.ClassMapper.Column.ComplexColumnInfo-2.html",
    "title": "Class ComplexColumnInfo<TClassType, TDataType> | Inflatable API Reference",
    "keywords": "Class ComplexColumnInfo<TClassType, TDataType> Column information Inheritance object ComplexColumnInfo<TClassType, TDataType> Implements IQueryColumnInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.ClassMapper.Column Assembly: Inflatable.dll Syntax public class ComplexColumnInfo<TClassType, TDataType> : IQueryColumnInfo where TClassType : class where TDataType : class Type Parameters Name Description TClassType The type of the class type. TDataType The type of the data type. Constructors | Improve this Doc View Source ComplexColumnInfo(IQueryColumnInfo, string, Func<TClassType, TDataType?>, bool, string, string) Initializes a new instance of the ComplexColumnInfo<TClassType, TDataType> class. Declaration public ComplexColumnInfo(IQueryColumnInfo child, string columnName, Func<TClassType, TDataType?> compiledExpression, bool isForeign, string schemaName, string tableName) Parameters Type Name Description IQueryColumnInfo child The child. string columnName Name of the column. Func<TClassType, TDataType> compiledExpression The compiled expression. bool isForeign if set to true [is foreign]. string schemaName Name of the schema. string tableName Name of the table. See Also IQueryColumnInfo Properties | Improve this Doc View Source Child Gets or sets the child. Declaration public IQueryColumnInfo Child { get; set; } Property Value Type Description IQueryColumnInfo The child. See Also IQueryColumnInfo | Improve this Doc View Source ColumnName Gets the name of the column. Declaration public string ColumnName { get; set; } Property Value Type Description string The name of the column. See Also IQueryColumnInfo | Improve this Doc View Source CompiledExpression The compiled expression Declaration public Func<TClassType, TDataType?> CompiledExpression { get; set; } Property Value Type Description Func<TClassType, TDataType> The compiled expression. See Also IQueryColumnInfo | Improve this Doc View Source IsForeign Gets or sets a value indicating whether this instance is foreign. Declaration public bool IsForeign { get; set; } Property Value Type Description bool true if this instance is foreign; otherwise, false. See Also IQueryColumnInfo | Improve this Doc View Source PropertyName Gets the name. Declaration public string PropertyName { get; } Property Value Type Description string The name. See Also IQueryColumnInfo | Improve this Doc View Source PropertyType Property type Declaration public Type PropertyType { get; } Property Value Type Description Type The type of the property. See Also IQueryColumnInfo | Improve this Doc View Source SchemaName Gets the schema name. Declaration public string SchemaName { get; set; } Property Value Type Description string The schema name. See Also IQueryColumnInfo | Improve this Doc View Source TableName Gets the table name. Declaration public string TableName { get; set; } Property Value Type Description string The table name. See Also IQueryColumnInfo Methods | Improve this Doc View Source CreateCopy() Creates a copy. Declaration public IQueryColumnInfo CreateCopy() Returns Type Description IQueryColumnInfo The resulting copy. See Also IQueryColumnInfo | Improve this Doc View Source GetAsParameter(Dynamo?) Gets the property as an IParameter (for classes, this will return the ID of the property) Declaration public IParameter? GetAsParameter(Dynamo? objectValue) Parameters Type Name Description Dynamo objectValue Returns Type Description IParameter The parameter version of the property See Also IQueryColumnInfo | Improve this Doc View Source GetAsParameter(object?) Gets the property as an IParameter (for classes, this will return the ID of the property) Declaration public IParameter? GetAsParameter(object? objectValue) Parameters Type Name Description object objectValue Returns Type Description IParameter The parameter version of the property See Also IQueryColumnInfo | Improve this Doc View Source GetAsParameter(object?, object?) Gets as parameter. Declaration public IParameter? GetAsParameter(object? objectValue, object? paramValue) Parameters Type Name Description object objectValue The object value. object paramValue The parameter value. Returns Type Description IParameter The object value as a parameter. See Also IQueryColumnInfo | Improve this Doc View Source GetValue(Dynamo?) Gets the value of the item Declaration public object? GetValue(Dynamo? @object) Parameters Type Name Description Dynamo object Object Returns Type Description object The value specified See Also IQueryColumnInfo | Improve this Doc View Source GetValue(object?) Gets the value of the item Declaration public object? GetValue(object? @object) Parameters Type Name Description object object Object Returns Type Description object The value specified See Also IQueryColumnInfo | Improve this Doc View Source GetValue(object?, object?) Gets the value. Declaration public object? GetValue(object? @object, object? paramValue) Parameters Type Name Description object object The object. object paramValue The parameter value. Returns Type Description object The resulting value. See Also IQueryColumnInfo | Improve this Doc View Source IsDefault(object?) Is this a default value? Declaration public bool IsDefault(object? @object) Parameters Type Name Description object object Object Returns Type Description bool True if it is, false otherwise. See Also IQueryColumnInfo | Improve this Doc View Source IsDefault(object, object?) Determines whether the specified object is default. Declaration public bool IsDefault(object @object, object? paramValue) Parameters Type Name Description object object The object. object paramValue The parameter value. Returns Type Description bool true if the specified object is default; otherwise, false. See Also IQueryColumnInfo | Improve this Doc View Source SetValue(object, object) Sets the property's value for the object sent in. Declaration public void SetValue(object objectToSet, object propertyValue) Parameters Type Name Description object objectToSet The object to set. object propertyValue The property value. See Also IQueryColumnInfo | Improve this Doc View Source SetValue(object, object, object) Sets the value. Declaration public void SetValue(object objectToSet, object paramValue, object propertyValue) Parameters Type Name Description object objectToSet The object to set. object paramValue The parameter value. object propertyValue The property value. See Also IQueryColumnInfo Implements IQueryColumnInfo See Also IQueryColumnInfo"
  },
  "api/Inflatable.ClassMapper.Column.ComplexListColumnInfo-2.html": {
    "href": "api/Inflatable.ClassMapper.Column.ComplexListColumnInfo-2.html",
    "title": "Class ComplexListColumnInfo<TClassType, TDataType> | Inflatable API Reference",
    "keywords": "Class ComplexListColumnInfo<TClassType, TDataType> Column information Inheritance object ComplexListColumnInfo<TClassType, TDataType> Implements IQueryColumnInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.ClassMapper.Column Assembly: Inflatable.dll Syntax public class ComplexListColumnInfo<TClassType, TDataType> : IQueryColumnInfo where TClassType : class where TDataType : class Type Parameters Name Description TClassType The type of the class type. TDataType The type of the data type. Constructors | Improve this Doc View Source ComplexListColumnInfo(IQueryColumnInfo, string, Func<TClassType, IList<TDataType>>, bool, string, string) Initializes a new instance of the ComplexListColumnInfo<TClassType, TDataType> class. Declaration public ComplexListColumnInfo(IQueryColumnInfo child, string columnName, Func<TClassType, IList<TDataType>> compiledExpression, bool isForeign, string schemaName, string tableName) Parameters Type Name Description IQueryColumnInfo child The child. string columnName Name of the column. Func<TClassType, IList<TDataType>> compiledExpression The compiled expression. bool isForeign if set to true [is foreign]. string schemaName Name of the schema. string tableName Name of the table. See Also IQueryColumnInfo Properties | Improve this Doc View Source Child Gets or sets the child. Declaration public IQueryColumnInfo Child { get; set; } Property Value Type Description IQueryColumnInfo The child. See Also IQueryColumnInfo | Improve this Doc View Source ColumnName Gets the name of the column. Declaration public string ColumnName { get; set; } Property Value Type Description string The name of the column. See Also IQueryColumnInfo | Improve this Doc View Source CompiledExpression The compiled expression Declaration public Func<TClassType, IList<TDataType>> CompiledExpression { get; set; } Property Value Type Description Func<TClassType, IList<TDataType>> The compiled expression. See Also IQueryColumnInfo | Improve this Doc View Source IsForeign Gets or sets a value indicating whether this instance is foreign. Declaration public bool IsForeign { get; set; } Property Value Type Description bool true if this instance is foreign; otherwise, false. See Also IQueryColumnInfo | Improve this Doc View Source PropertyName Gets the name. Declaration public string PropertyName { get; } Property Value Type Description string The name. See Also IQueryColumnInfo | Improve this Doc View Source PropertyType Property type Declaration public Type PropertyType { get; } Property Value Type Description Type The type of the property. See Also IQueryColumnInfo | Improve this Doc View Source SchemaName Gets the schema name. Declaration public string SchemaName { get; set; } Property Value Type Description string The schema name. See Also IQueryColumnInfo | Improve this Doc View Source TableName Gets the table name. Declaration public string TableName { get; set; } Property Value Type Description string The table name. See Also IQueryColumnInfo Methods | Improve this Doc View Source CreateCopy() Creates a copy. Declaration public IQueryColumnInfo CreateCopy() Returns Type Description IQueryColumnInfo The resulting copy. See Also IQueryColumnInfo | Improve this Doc View Source GetAsParameter(Dynamo?) Gets as parameter. Declaration public IParameter? GetAsParameter(Dynamo? objectValue) Parameters Type Name Description Dynamo objectValue The object value. Returns Type Description IParameter The object value as a parameter. See Also IQueryColumnInfo | Improve this Doc View Source GetAsParameter(object?) Gets the property as an IParameter (for classes, this will return the ID of the property) Declaration public IParameter? GetAsParameter(object? objectValue) Parameters Type Name Description object objectValue Returns Type Description IParameter The parameter version of the property See Also IQueryColumnInfo | Improve this Doc View Source GetAsParameter(object?, object?) Gets as parameter. Declaration public IParameter? GetAsParameter(object? objectValue, object? paramValue) Parameters Type Name Description object objectValue The object value. object paramValue The parameter value. Returns Type Description IParameter The object value as a parameter. See Also IQueryColumnInfo | Improve this Doc View Source GetValue(Dynamo?) Gets the value of the item Declaration public object? GetValue(Dynamo? @object) Parameters Type Name Description Dynamo object Object Returns Type Description object The value specified See Also IQueryColumnInfo | Improve this Doc View Source GetValue(object?) Gets the value of the item Declaration public object? GetValue(object? @object) Parameters Type Name Description object object Object Returns Type Description object The value specified See Also IQueryColumnInfo | Improve this Doc View Source GetValue(object?, object?) Gets the value. Declaration public object? GetValue(object? @object, object? paramValue) Parameters Type Name Description object object The object. object paramValue The parameter value. Returns Type Description object The resulting value. See Also IQueryColumnInfo | Improve this Doc View Source IsDefault(object?) Is this a default value? Declaration public bool IsDefault(object? @object) Parameters Type Name Description object object Object Returns Type Description bool True if it is, false otherwise. See Also IQueryColumnInfo | Improve this Doc View Source IsDefault(object?, object?) Determines whether the specified object is default. Declaration public bool IsDefault(object? @object, object? paramValue) Parameters Type Name Description object object The object. object paramValue The parameter value. Returns Type Description bool true if the specified object is default; otherwise, false. See Also IQueryColumnInfo | Improve this Doc View Source SetValue(object?, object?) Sets the property's value for the object sent in. Declaration public void SetValue(object? objectToSet, object? propertyValue) Parameters Type Name Description object objectToSet The object to set. object propertyValue The property value. See Also IQueryColumnInfo | Improve this Doc View Source SetValue(object, object?, object?) Sets the value. Declaration public void SetValue(object objectToSet, object? paramValue, object? propertyValue) Parameters Type Name Description object objectToSet The object to set. object paramValue The parameter value. object propertyValue The property value. See Also IQueryColumnInfo Implements IQueryColumnInfo See Also IQueryColumnInfo"
  },
  "api/Inflatable.ClassMapper.Column.Interfaces.IQueryColumnInfo.html": {
    "href": "api/Inflatable.ClassMapper.Column.Interfaces.IQueryColumnInfo.html",
    "title": "Interface IQueryColumnInfo | Inflatable API Reference",
    "keywords": "Interface IQueryColumnInfo IQuery column info Namespace: Inflatable.ClassMapper.Column.Interfaces Assembly: Inflatable.dll Syntax public interface IQueryColumnInfo Properties | Improve this Doc View Source ColumnName Gets or sets the name of the column. Declaration string ColumnName { get; set; } Property Value Type Description string The name of the column. | Improve this Doc View Source IsForeign Gets or sets a value indicating whether this instance is foreign. Declaration bool IsForeign { get; set; } Property Value Type Description bool true if this instance is foreign; otherwise, false. | Improve this Doc View Source PropertyName Gets or sets the name of the property. Declaration string PropertyName { get; } Property Value Type Description string The name of the property. | Improve this Doc View Source PropertyType Gets or sets the type of the property. Declaration Type PropertyType { get; } Property Value Type Description Type The type of the property. | Improve this Doc View Source SchemaName Gets or sets the name of the schema. Declaration string SchemaName { get; set; } Property Value Type Description string The name of the schema. | Improve this Doc View Source TableName Gets or sets the name of the table. Declaration string TableName { get; set; } Property Value Type Description string The name of the table. Methods | Improve this Doc View Source CreateCopy() Creates a copy. Declaration IQueryColumnInfo CreateCopy() Returns Type Description IQueryColumnInfo The resulting copy. | Improve this Doc View Source GetAsParameter(Dynamo?) Gets as parameter. Declaration IParameter? GetAsParameter(Dynamo? objectValue) Parameters Type Name Description Dynamo objectValue The object value. Returns Type Description IParameter The object value as a parameter. | Improve this Doc View Source GetAsParameter(object?) Gets as parameter. Declaration IParameter? GetAsParameter(object? objectValue) Parameters Type Name Description object objectValue The object value. Returns Type Description IParameter The object value as a parameter. | Improve this Doc View Source GetAsParameter(object?, object?) Gets as parameter. Declaration IParameter? GetAsParameter(object? objectValue, object? paramValue) Parameters Type Name Description object objectValue The object value. object paramValue The parameter value. Returns Type Description IParameter The object value as a parameter. | Improve this Doc View Source GetValue(Dynamo?) Gets the value. Declaration object? GetValue(Dynamo? @object) Parameters Type Name Description Dynamo object The object. Returns Type Description object | Improve this Doc View Source GetValue(object?) Gets the value. Declaration object? GetValue(object? @object) Parameters Type Name Description object object The object. Returns Type Description object The resulting value. | Improve this Doc View Source GetValue(object?, object?) Gets the value. Declaration object? GetValue(object? @object, object? paramValue) Parameters Type Name Description object object The object. object paramValue The parameter value. Returns Type Description object The resulting value. | Improve this Doc View Source IsDefault(object?) Determines whether the specified object is default. Declaration bool IsDefault(object? @object) Parameters Type Name Description object object The object. Returns Type Description bool true if the specified object is default; otherwise, false. | Improve this Doc View Source IsDefault(object, object) Determines whether the specified object is default. Declaration bool IsDefault(object @object, object paramValue) Parameters Type Name Description object object The object. object paramValue The parameter value. Returns Type Description bool true if the specified object is default; otherwise, false. | Improve this Doc View Source SetValue(object?, object?) Sets the value. Declaration void SetValue(object? objectToSet, object? propertyValue) Parameters Type Name Description object objectToSet The object to set. object propertyValue The property value. | Improve this Doc View Source SetValue(object, object?, object) Sets the value. Declaration void SetValue(object objectToSet, object? paramValue, object propertyValue) Parameters Type Name Description object objectToSet The object to set. object paramValue The parameter value. object propertyValue The property value."
  },
  "api/Inflatable.ClassMapper.Column.Interfaces.html": {
    "href": "api/Inflatable.ClassMapper.Column.Interfaces.html",
    "title": "Namespace Inflatable.ClassMapper.Column.Interfaces | Inflatable API Reference",
    "keywords": "Namespace Inflatable.ClassMapper.Column.Interfaces Interfaces IQueryColumnInfo IQuery column info"
  },
  "api/Inflatable.ClassMapper.Column.SimpleColumnInfo-2.html": {
    "href": "api/Inflatable.ClassMapper.Column.SimpleColumnInfo-2.html",
    "title": "Class SimpleColumnInfo<TClassType, TDataType> | Inflatable API Reference",
    "keywords": "Class SimpleColumnInfo<TClassType, TDataType> Column information Inheritance object SimpleColumnInfo<TClassType, TDataType> Implements IQueryColumnInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.ClassMapper.Column Assembly: Inflatable.dll Syntax public class SimpleColumnInfo<TClassType, TDataType> : IQueryColumnInfo where TClassType : class Type Parameters Name Description TClassType The type of the class type. TDataType The type of the data type. Constructors | Improve this Doc View Source SimpleColumnInfo(string, Func<TClassType, TDataType>, Func<TDataType>, bool, bool, string, Type, string, Action<TClassType, TDataType>, string) Initializes a new instance of the SimpleColumnInfo<TClassType, TDataType> class. Declaration public SimpleColumnInfo(string columnName, Func<TClassType, TDataType> compiledExpression, Func<TDataType> defaultValue, bool isForeign, bool isNullable, string propertyName, Type propertyType, string schemaName, Action<TClassType, TDataType> setAction, string tableName) Parameters Type Name Description string columnName Name of the column. Func<TClassType, TDataType> compiledExpression The compiled expression. Func<TDataType> defaultValue The default value. bool isForeign if set to true [is foreign]. bool isNullable if set to true [is nullable]. string propertyName Name of the property. Type propertyType Type of the property. string schemaName Name of the schema. Action<TClassType, TDataType> setAction The set action. string tableName Name of the table. See Also IQueryColumnInfo Properties | Improve this Doc View Source ColumnName Gets the name of the column. Declaration public string ColumnName { get; set; } Property Value Type Description string The name of the column. See Also IQueryColumnInfo | Improve this Doc View Source CompiledExpression The compiled expression Declaration public Func<TClassType, TDataType> CompiledExpression { get; set; } Property Value Type Description Func<TClassType, TDataType> See Also IQueryColumnInfo | Improve this Doc View Source DefaultValue Gets the default value. Declaration public Func<TDataType> DefaultValue { get; set; } Property Value Type Description Func<TDataType> See Also IQueryColumnInfo | Improve this Doc View Source IsForeign Gets or sets a value indicating whether this instance is foreign. Declaration public bool IsForeign { get; set; } Property Value Type Description bool true if this instance is foreign; otherwise, false. See Also IQueryColumnInfo | Improve this Doc View Source IsNullable Gets or sets a value indicating whether this instance is nullable. Declaration public bool IsNullable { get; set; } Property Value Type Description bool true if this instance is nullable; otherwise, false. See Also IQueryColumnInfo | Improve this Doc View Source PropertyName Gets the name. Declaration public string PropertyName { get; set; } Property Value Type Description string The name. See Also IQueryColumnInfo | Improve this Doc View Source PropertyType Property type Declaration public Type PropertyType { get; set; } Property Value Type Description Type See Also IQueryColumnInfo | Improve this Doc View Source SchemaName Gets the schema name. Declaration public string SchemaName { get; set; } Property Value Type Description string The schema name. See Also IQueryColumnInfo | Improve this Doc View Source SetAction Gets or sets the expression used to set the value. Declaration public Action<TClassType, TDataType> SetAction { get; set; } Property Value Type Description Action<TClassType, TDataType> The set expression. See Also IQueryColumnInfo | Improve this Doc View Source TableName Gets the table name. Declaration public string TableName { get; set; } Property Value Type Description string The table name. See Also IQueryColumnInfo Methods | Improve this Doc View Source CreateCopy() Creates a copy. Declaration public IQueryColumnInfo CreateCopy() Returns Type Description IQueryColumnInfo The resulting copy. See Also IQueryColumnInfo | Improve this Doc View Source GetAsParameter(Dynamo?) Gets as parameter. Declaration public IParameter? GetAsParameter(Dynamo? objectValue) Parameters Type Name Description Dynamo objectValue The object value. Returns Type Description IParameter The value as a parameter See Also IQueryColumnInfo | Improve this Doc View Source GetAsParameter(object?) Gets the property as an IParameter (for classes, this will return the ID of the property) Declaration public IParameter? GetAsParameter(object? objectValue) Parameters Type Name Description object objectValue Returns Type Description IParameter The parameter version of the property See Also IQueryColumnInfo | Improve this Doc View Source GetAsParameter(object?, object?) Gets as parameter. Declaration public IParameter? GetAsParameter(object? objectValue, object? paramValue) Parameters Type Name Description object objectValue The object value. object paramValue The parameter value. Returns Type Description IParameter The object value as a parameter. See Also IQueryColumnInfo | Improve this Doc View Source GetValue(Dynamo?) Gets the value of the item Declaration public object? GetValue(Dynamo? @object) Parameters Type Name Description Dynamo object Object Returns Type Description object The value specified See Also IQueryColumnInfo | Improve this Doc View Source GetValue(object?) Gets the value of the item Declaration public object? GetValue(object? @object) Parameters Type Name Description object object Object Returns Type Description object The value specified See Also IQueryColumnInfo | Improve this Doc View Source GetValue(object?, object?) Gets the value. Declaration public object? GetValue(object? @object, object? paramValue) Parameters Type Name Description object object The object. object paramValue The parameter value. Returns Type Description object The resulting value. See Also IQueryColumnInfo | Improve this Doc View Source IsDefault(object) Is this a default value? Declaration public bool IsDefault(object @object) Parameters Type Name Description object object Object Returns Type Description bool True if it is, false otherwise. See Also IQueryColumnInfo | Improve this Doc View Source IsDefault(object, object) Determines whether the specified object is default. Declaration public bool IsDefault(object @object, object paramValue) Parameters Type Name Description object object The object. object paramValue The parameter value. Returns Type Description bool true if the specified object is default; otherwise, false. See Also IQueryColumnInfo | Improve this Doc View Source SetValue(object, object) Sets the property's value for the object sent in. Declaration public void SetValue(object objectToSet, object propertyValue) Parameters Type Name Description object objectToSet The object to set. object propertyValue The property value. See Also IQueryColumnInfo | Improve this Doc View Source SetValue(object, object, object) Sets the value. Declaration public void SetValue(object objectToSet, object paramValue, object propertyValue) Parameters Type Name Description object objectToSet The object to set. object paramValue The parameter value. object propertyValue The property value. See Also IQueryColumnInfo Implements IQueryColumnInfo See Also IQueryColumnInfo"
  },
  "api/Inflatable.ClassMapper.Column.html": {
    "href": "api/Inflatable.ClassMapper.Column.html",
    "title": "Namespace Inflatable.ClassMapper.Column | Inflatable API Reference",
    "keywords": "Namespace Inflatable.ClassMapper.Column Classes ComplexColumnInfo<TClassType, TDataType> Column information ComplexListColumnInfo<TClassType, TDataType> Column information SimpleColumnInfo<TClassType, TDataType> Column information"
  },
  "api/Inflatable.ClassMapper.Default.AutoID.html": {
    "href": "api/Inflatable.ClassMapper.Default.AutoID.html",
    "title": "Class AutoID | Inflatable API Reference",
    "keywords": "Class AutoID Auto ID Inheritance object AutoID Implements IAutoIDProperty Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Inflatable.ClassMapper.Default Assembly: Inflatable.dll Syntax public class AutoID : IAutoIDProperty Constructors | Improve this Doc View Source AutoID(string, IMapping) Initializes a new instance of the AutoID class. Declaration public AutoID(string columnName, IMapping parentMapping) Parameters Type Name Description string columnName Name of the column. IMapping parentMapping The parent mapping. See Also IAutoIDProperty Properties | Improve this Doc View Source ColumnName Gets the name of the column. Declaration public string ColumnName { get; } Property Value Type Description string The name of the column. See Also IAutoIDProperty | Improve this Doc View Source ParentMapping Gets the parent mapping. Declaration public IMapping ParentMapping { get; } Property Value Type Description IMapping The parent mapping. See Also IAutoIDProperty Methods | Improve this Doc View Source AddToChildTable(ITable) Adds to child table. Declaration public void AddToChildTable(ITable table) Parameters Type Name Description ITable table The table. See Also IAutoIDProperty | Improve this Doc View Source AddToTable(ITable) Adds this instance to the table. Declaration public void AddToTable(ITable table) Parameters Type Name Description ITable table The table. See Also IAutoIDProperty | Improve this Doc View Source Setup() Sets up the property (used internally) Declaration public void Setup() See Also IAutoIDProperty | Improve this Doc View Source ToString() Gets the property as a string Declaration public override string ToString() Returns Type Description string The string representation of the property Overrides object.ToString() See Also IAutoIDProperty Implements IAutoIDProperty See Also IAutoIDProperty"
  },
  "api/Inflatable.ClassMapper.Default.ID-2.html": {
    "href": "api/Inflatable.ClassMapper.Default.ID-2.html",
    "title": "Class ID<ClassType, DataType> | Inflatable API Reference",
    "keywords": "Class ID<ClassType, DataType> ID property Inheritance object IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>> ID<ClassType, DataType> Implements IIDProperty<ClassType, DataType, ID<ClassType, DataType>> IFluentInterface IIDProperty<ClassType, DataType> IIDProperty IPropertyColumns Inherited Members IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.AutoIncrement IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.ColumnName IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.Columns IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.CompiledExpression IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.ComputedColumnSpecification IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.Constraints IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.DefaultValue IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.Expression IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.Index IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.InternalFieldName IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.MaxLength IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.Name IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.Nullable IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.ParentMapping IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.PropertyType IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.ReadOnly IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.TypeName IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.Unique IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.SetAction IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.AddToChildTable(ITable) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.AddToTable(ITable) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.CompareTo(IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.CompareTo(object) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.Convert<TResult>(IMapping) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.Equals(object) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.GetColumnInfo() IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.GetHashCode() IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.IsAutoIncremented() IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.IsIndexed() IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.IsReadOnly() IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.IsUnique() IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.SetColumnInfo(IMappingSource) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.Setup() IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.ToString() IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.WithColumnName(string) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.WithComputedColumnSpecification(string) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.WithConstraint(string) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.WithDefaultValue(Func<DataType>) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.WithMaxLength(int) IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.WithMaxLength() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.ClassMapper.Default Assembly: Inflatable.dll Syntax public class ID<ClassType, DataType> : IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>, IIDProperty<ClassType, DataType, ID<ClassType, DataType>>, IFluentInterface, IIDProperty<ClassType, DataType>, IIDProperty, IPropertyColumns where ClassType : class Type Parameters Name Description ClassType The type of the lass type. DataType The type of the ata type. Constructors | Improve this Doc View Source ID(Expression<Func<ClassType, DataType>>, IMapping) Initializes a new instance of the ID<ClassType, DataType> class. Declaration public ID(Expression<Func<ClassType, DataType>> expression, IMapping mapping) Parameters Type Name Description Expression<Func<ClassType, DataType>> expression Expression used to point to the property IMapping mapping Mapping the StringID is added to See Also IIDProperty Methods | Improve this Doc View Source Convert<TResult>(IMapping) Converts this instance to the class specified Declaration public override IIDProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters Type Name Description IMapping mapping The mapping. Returns Type Description IIDProperty The resulting property Type Parameters Name Description TResult The type of the result. Overrides IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.Convert<TResult>(IMapping) See Also IIDProperty | Improve this Doc View Source SetColumnInfo(IMappingSource?) Sets the column information. Declaration public override void SetColumnInfo(IMappingSource? mappings) Parameters Type Name Description IMappingSource mappings The mappings. Overrides IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.SetColumnInfo(IMappingSource) See Also IIDProperty | Improve this Doc View Source Setup() Sets up the property (used internally) Declaration public override void Setup() Overrides IDPropertyBase<ClassType, DataType, ID<ClassType, DataType>>.Setup() See Also IIDProperty Implements IIDProperty<ClassType, DataType, ReturnType> IFluentInterface IIDProperty<ClassType, DataType> IIDProperty IPropertyColumns See Also IIDProperty"
  },
  "api/Inflatable.ClassMapper.Default.ManyToMany-2.html": {
    "href": "api/Inflatable.ClassMapper.Default.ManyToMany-2.html",
    "title": "Class ManyToMany<TClassType, TDataType> | Inflatable API Reference",
    "keywords": "Class ManyToMany<TClassType, TDataType> Many to many mapping type. Inheritance object ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>> ManyToMany<TClassType, TDataType> Implements IManyToManyProperty<TClassType, IList<TDataType>, ManyToMany<TClassType, TDataType>> IFluentInterface IManyToManyProperty<TClassType, IList<TDataType>> IManyToManyProperty IClassProperty IPropertyColumns Inherited Members ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.Cascade ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.Columns ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.CompiledExpression ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.DatabaseJoinsCascade ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.Expression ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.ForeignMapping ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.InternalFieldName ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.LoadPropertyQuery ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.Name ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.ParentMapping ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.PropertyType ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.TableName ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.TypeName ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.OnDeleteDoNothingValue ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.CascadeChanges() ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.Convert<TResult>(IMapping) ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.Equals(object) ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.GetColumnInfo() ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.GetHashCode() ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.GetValue(object) ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.LoadUsing(string, CommandType) ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.OnDeleteDoNothing() ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.SetColumnInfo(IMappingSource) ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.SetTableName(string) ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.Setup(IMappingSource, ISource) ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.Similar(IManyToManyProperty) ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.ClassMapper.Default Assembly: Inflatable.dll Syntax public class ManyToMany<TClassType, TDataType> : ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>, IManyToManyProperty<TClassType, IList<TDataType>, ManyToMany<TClassType, TDataType>>, IFluentInterface, IManyToManyProperty<TClassType, IList<TDataType>>, IManyToManyProperty, IClassProperty, IPropertyColumns where TClassType : class where TDataType : class Type Parameters Name Description TClassType The class type. TDataType The data type. Constructors | Improve this Doc View Source ManyToMany(Expression<Func<TClassType, IList<TDataType>>>, IMapping) Initializes a new instance of the ManyToMany<TClassType, TDataType> class. Declaration public ManyToMany(Expression<Func<TClassType, IList<TDataType>>> expression, IMapping mapping) Parameters Type Name Description Expression<Func<TClassType, IList<TDataType>>> expression Expression used to point to the property IMapping mapping Mapping the StringID is added to Methods | Improve this Doc View Source Convert<TResult>(IMapping) Converts this instance to the class specified Declaration public override IManyToManyProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters Type Name Description IMapping mapping The mapping. Returns Type Description IManyToManyProperty The resulting property Type Parameters Name Description TResult The type of the result. Overrides ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.Convert<TResult>(IMapping) | Improve this Doc View Source SetColumnInfo(IMappingSource) Sets the column information. Declaration public override void SetColumnInfo(IMappingSource mappings) Parameters Type Name Description IMappingSource mappings The mappings. Overrides ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.SetColumnInfo(IMappingSource) | Improve this Doc View Source Setup(IMappingSource, ISource) Sets up the property (used internally) Declaration public override void Setup(IMappingSource mappings, ISource sourceSpec) Parameters Type Name Description IMappingSource mappings The mappings. ISource sourceSpec The source spec. Overrides ManyClassPropertyBase<TClassType, TDataType, ManyToMany<TClassType, TDataType>>.Setup(IMappingSource, ISource) Exceptions Type Condition ArgumentException Foreign key IDs could not be found for {typeof(ClassType).Name}.{Name} Implements IManyToManyProperty<TClassType, TDataType, TReturnType> IFluentInterface IManyToManyProperty<TClassType, TDataType> IManyToManyProperty IClassProperty IPropertyColumns"
  },
  "api/Inflatable.ClassMapper.Default.ManyToOneMany-2.html": {
    "href": "api/Inflatable.ClassMapper.Default.ManyToOneMany-2.html",
    "title": "Class ManyToOneMany<TClassType, TDataType> | Inflatable API Reference",
    "keywords": "Class ManyToOneMany<TClassType, TDataType> Many to one Many side Inheritance object ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>> ManyToOneMany<TClassType, TDataType> Implements IManyToOneProperty<TClassType, IList<TDataType>, ManyToOneMany<TClassType, TDataType>> IFluentInterface IManyToOneProperty<TClassType, IList<TDataType>> IManyToOneListProperty IManyToOneProperty IClassProperty IPropertyColumns Inherited Members ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.Cascade ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.ColumnName ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.Columns ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.CompiledExpression ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.Expression ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.ForeignMapping ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.InternalFieldName ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.LoadPropertyQuery ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.Name ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.ParentMapping ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.PropertyType ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.TypeName ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.OnDeleteDoNothingValue ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.CascadeChanges() ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.Convert<TResult>(IMapping) ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.Equals(object) ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.GetColumnInfo() ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.GetHashCode() ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.GetValue(object) ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.LoadUsing(string, CommandType) ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.OnDeleteDoNothing() ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.SetColumnInfo(IMappingSource) ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.SetColumnName(string) ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.Setup(IMappingSource, ISource) ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.Similar(IManyToOneProperty) ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.ClassMapper.Default Assembly: Inflatable.dll Syntax public class ManyToOneMany<TClassType, TDataType> : ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>, IManyToOneProperty<TClassType, IList<TDataType>, ManyToOneMany<TClassType, TDataType>>, IFluentInterface, IManyToOneProperty<TClassType, IList<TDataType>>, IManyToOneListProperty, IManyToOneProperty, IClassProperty, IPropertyColumns where TClassType : class where TDataType : class Type Parameters Name Description TClassType The type of the lass type. TDataType The type of the ata type. Constructors | Improve this Doc View Source ManyToOneMany(Expression<Func<TClassType, IList<TDataType>>>, IMapping) Initializes a new instance of the ManyToOneMany<TClassType, TDataType> class. Declaration public ManyToOneMany(Expression<Func<TClassType, IList<TDataType>>> expression, IMapping mapping) Parameters Type Name Description Expression<Func<TClassType, IList<TDataType>>> expression Expression used to point to the property IMapping mapping Mapping the StringID is added to Methods | Improve this Doc View Source Convert<TResult>(IMapping) Converts this instance to the class specified Declaration public override IManyToOneProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters Type Name Description IMapping mapping The mapping. Returns Type Description IManyToOneProperty The resulting property Type Parameters Name Description TResult The type of the result. Overrides ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.Convert<TResult>(IMapping) | Improve this Doc View Source SetColumnInfo(IMappingSource) Sets the column information. Declaration public override void SetColumnInfo(IMappingSource mappings) Parameters Type Name Description IMappingSource mappings The mappings. Overrides ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.SetColumnInfo(IMappingSource) | Improve this Doc View Source Setup(IMappingSource, ISource) Sets up the property (used internally) Declaration public override void Setup(IMappingSource mappings, ISource sourceSpec) Parameters Type Name Description IMappingSource mappings The mappings. ISource sourceSpec The source spec. Overrides ManyToOneManyPropertyBase<TClassType, TDataType, ManyToOneMany<TClassType, TDataType>>.Setup(IMappingSource, ISource) Exceptions Type Condition ArgumentException Foreign key IDs could not be found for {typeof(ClassType).Name}.{Name} Implements IManyToOneProperty<TClassType, TDataType, TReturnType> IFluentInterface IManyToOneProperty<TClassType, TDataType> IManyToOneListProperty IManyToOneProperty IClassProperty IPropertyColumns"
  },
  "api/Inflatable.ClassMapper.Default.ManyToOneSingle-2.html": {
    "href": "api/Inflatable.ClassMapper.Default.ManyToOneSingle-2.html",
    "title": "Class ManyToOneSingle<TClassType, TDataType> | Inflatable API Reference",
    "keywords": "Class ManyToOneSingle<TClassType, TDataType> Many to one single side Inheritance object ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>> ManyToOneSingle<TClassType, TDataType> Implements IManyToOneProperty<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>> IFluentInterface IManyToOneProperty<TClassType, TDataType> IManyToOneProperty IClassProperty IPropertyColumns Inherited Members ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.Cascade ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.ColumnName ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.Columns ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.CompiledExpression ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.Expression ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.ForeignMapping ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.InternalFieldName ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.LoadPropertyQuery ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.Name ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.ParentMapping ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.PropertyType ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.TypeName ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.OnDeleteDoNothingValue ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.CascadeChanges() ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.Convert<TResult>(IMapping) ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.Equals(object) ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.GetColumnInfo() ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.GetHashCode() ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.GetValue(object) ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.LoadUsing(string, CommandType) ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.OnDeleteDoNothing() ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.SetColumnInfo(IMappingSource) ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.SetColumnName(string) ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.Setup(IMappingSource, ISource) ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.Similar(IManyToOneProperty) ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.ClassMapper.Default Assembly: Inflatable.dll Syntax public class ManyToOneSingle<TClassType, TDataType> : ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>, IManyToOneProperty<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>, IFluentInterface, IManyToOneProperty<TClassType, TDataType>, IManyToOneProperty, IClassProperty, IPropertyColumns where TClassType : class where TDataType : class Type Parameters Name Description TClassType The type of the lass type. TDataType The type of the ata type. Constructors | Improve this Doc View Source ManyToOneSingle(Expression<Func<TClassType, TDataType?>>, IMapping) Initializes a new instance of the ManyToOneSingle<TClassType, TDataType> class. Declaration public ManyToOneSingle(Expression<Func<TClassType, TDataType?>> expression, IMapping mapping) Parameters Type Name Description Expression<Func<TClassType, TDataType>> expression Expression used to point to the property IMapping mapping Mapping the StringID is added to Methods | Improve this Doc View Source Convert<TResult>(IMapping) Converts this instance to the class specified Declaration public override IManyToOneProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters Type Name Description IMapping mapping The mapping. Returns Type Description IManyToOneProperty The resulting property Type Parameters Name Description TResult The type of the result. Overrides ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.Convert<TResult>(IMapping) | Improve this Doc View Source SetColumnInfo(IMappingSource) Sets the column information. Declaration public override void SetColumnInfo(IMappingSource mappings) Parameters Type Name Description IMappingSource mappings The mappings. Overrides ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.SetColumnInfo(IMappingSource) | Improve this Doc View Source Setup(IMappingSource, ISource) Sets up the property (used internally) Declaration public override void Setup(IMappingSource mappings, ISource sourceSpec) Parameters Type Name Description IMappingSource mappings The mappings. ISource sourceSpec The source spec. Overrides ManyToOneOnePropertyBase<TClassType, TDataType, ManyToOneSingle<TClassType, TDataType>>.Setup(IMappingSource, ISource) Exceptions Type Condition ArgumentException Foreign key IDs could not be found for {typeof(ClassType).Name}.{Name} Implements IManyToOneProperty<TClassType, TDataType, TReturnType> IFluentInterface IManyToOneProperty<TClassType, TDataType> IManyToOneProperty IClassProperty IPropertyColumns"
  },
  "api/Inflatable.ClassMapper.Default.Map-2.html": {
    "href": "api/Inflatable.ClassMapper.Default.Map-2.html",
    "title": "Class Map<TClassType, TDataType> | Inflatable API Reference",
    "keywords": "Class Map<TClassType, TDataType> Map property Inheritance object SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>> Map<TClassType, TDataType> Implements IMapProperty<TClassType, TDataType, Map<TClassType, TDataType>> IFluentInterface IMapProperty<TClassType, TDataType> IMapProperty IClassProperty IPropertyColumns Inherited Members SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.Cascade SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.ColumnName SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.Columns SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.CompiledExpression SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.Expression SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.ForeignMapping SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.InternalFieldName SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.LoadPropertyQuery SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.Name SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.ParentMapping SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.PropertyType SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.TypeName SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.Unique SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.OnDeleteDoNothingValue SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.SetNullOnDelete SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.AddToTable(ITable) SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.CascadeChanges() SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.Convert<TResult>(IMapping) SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.Equals(object) SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.GetColumnInfo() SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.GetHashCode() SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.GetValue(object) SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.IsUnique() SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.LoadUsing(string, CommandType) SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.OnDeleteDoNothing() SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.SetColumnInfo(IMappingSource) SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.Setup(IMappingSource) SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.Similar(IMapProperty) SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.ToString() SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.WithColumnName(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.ClassMapper.Default Assembly: Inflatable.dll Syntax public class Map<TClassType, TDataType> : SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>, IMapProperty<TClassType, TDataType, Map<TClassType, TDataType>>, IFluentInterface, IMapProperty<TClassType, TDataType>, IMapProperty, IClassProperty, IPropertyColumns where TClassType : class where TDataType : class Type Parameters Name Description TClassType The type of the class type. TDataType The type of the data type. Constructors | Improve this Doc View Source Map(Expression<Func<TClassType, TDataType?>>, IMapping) Initializes a new instance of the Map<TClassType, TDataType> class. Declaration public Map(Expression<Func<TClassType, TDataType?>> expression, IMapping mapping) Parameters Type Name Description Expression<Func<TClassType, TDataType>> expression Expression used to point to the property IMapping mapping Mapping the StringID is added to See Also IMapProperty Methods | Improve this Doc View Source Convert<TResult>(IMapping) Converts this instance to the class specified Declaration public override IMapProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters Type Name Description IMapping mapping The mapping. Returns Type Description IMapProperty The resulting property Type Parameters Name Description TResult The type of the result. Overrides SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.Convert<TResult>(IMapping) See Also IMapProperty | Improve this Doc View Source SetColumnInfo(IMappingSource) Sets the column information. Declaration public override void SetColumnInfo(IMappingSource mappings) Parameters Type Name Description IMappingSource mappings The mappings. Overrides SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.SetColumnInfo(IMappingSource) See Also IMapProperty | Improve this Doc View Source Setup(IMappingSource) Sets up the property (used internally) Declaration public override void Setup(IMappingSource mappings) Parameters Type Name Description IMappingSource mappings Overrides SingleClassPropertyBase<TClassType, TDataType, Map<TClassType, TDataType>>.Setup(IMappingSource) See Also IMapProperty Implements IMapProperty<TClassType, TDataType, TReturnType> IFluentInterface IMapProperty<TClassType, TDataType> IMapProperty IClassProperty IPropertyColumns See Also IMapProperty"
  },
  "api/Inflatable.ClassMapper.Default.Reference-2.html": {
    "href": "api/Inflatable.ClassMapper.Default.Reference-2.html",
    "title": "Class Reference<ClassType, DataType> | Inflatable API Reference",
    "keywords": "Class Reference<ClassType, DataType> Reference property Inheritance object PropertyBase<ClassType, DataType, Reference<ClassType, DataType>> Reference<ClassType, DataType> Implements IProperty<ClassType, DataType, Reference<ClassType, DataType>> IFluentInterface IProperty<ClassType, DataType> IProperty IPropertyColumns Inherited Members PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.ColumnName PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Columns PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.CompiledExpression PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.ComputedColumnSpecification PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Constraints PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.DefaultValue PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Expression PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Index PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.InternalFieldName PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.MaxLength PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Name PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Nullable PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.ParentMapping PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.PropertyType PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.ReadOnly PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.TypeName PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Unique PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.SetAction PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.AddToTable(ITable) PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Convert<TResult>(IMapping) PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Equals(object) PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.GetColumnInfo() PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.GetHashCode() PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.IsIndexed() PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.IsReadOnly() PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.IsUnique() PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.SetColumnInfo(IMappingSource) PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Setup() PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Similar(IProperty) PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.ToString() PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.WithColumnName(string) PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.WithComputedColumnSpecification(string) PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.WithConstraint(string) PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.WithDefaultValue(Func<DataType>) PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.WithMaxLength(int) PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.WithMaxLength() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.ClassMapper.Default Assembly: Inflatable.dll Syntax public class Reference<ClassType, DataType> : PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>, IProperty<ClassType, DataType, Reference<ClassType, DataType>>, IFluentInterface, IProperty<ClassType, DataType>, IProperty, IPropertyColumns where ClassType : class Type Parameters Name Description ClassType The type of the lass type. DataType The type of the ata type. Constructors | Improve this Doc View Source Reference(Expression<Func<ClassType, DataType>>, IMapping) Initializes a new instance of the Reference<ClassType, DataType> class. Declaration public Reference(Expression<Func<ClassType, DataType>> expression, IMapping mapping) Parameters Type Name Description Expression<Func<ClassType, DataType>> expression Expression used to point to the property IMapping mapping Mapping the StringID is added to See Also IProperty Methods | Improve this Doc View Source Convert<TResult>(IMapping) Converts this instance to the class specified Declaration public override IProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters Type Name Description IMapping mapping The mapping. Returns Type Description IProperty The resulting property Type Parameters Name Description TResult The type of the result. Overrides PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Convert<TResult>(IMapping) See Also IProperty | Improve this Doc View Source SetColumnInfo(IMappingSource?) Sets the column information. Declaration public override void SetColumnInfo(IMappingSource? mappings) Parameters Type Name Description IMappingSource mappings The mappings. Overrides PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.SetColumnInfo(IMappingSource) See Also IProperty | Improve this Doc View Source Setup() Sets up the property (used internally) Declaration public override void Setup() Overrides PropertyBase<ClassType, DataType, Reference<ClassType, DataType>>.Setup() See Also IProperty Implements IProperty<ClassType, DataType, ReturnType> IFluentInterface IProperty<ClassType, DataType> IProperty IPropertyColumns See Also IProperty"
  },
  "api/Inflatable.ClassMapper.Default.html": {
    "href": "api/Inflatable.ClassMapper.Default.html",
    "title": "Namespace Inflatable.ClassMapper.Default | Inflatable API Reference",
    "keywords": "Namespace Inflatable.ClassMapper.Default Classes AutoID Auto ID ID<ClassType, DataType> ID property ManyToMany<TClassType, TDataType> Many to many mapping type. ManyToOneMany<TClassType, TDataType> Many to one Many side ManyToOneSingle<TClassType, TDataType> Many to one single side Map<TClassType, TDataType> Map property Reference<ClassType, DataType> Reference property"
  },
  "api/Inflatable.ClassMapper.IMappingSource.html": {
    "href": "api/Inflatable.ClassMapper.IMappingSource.html",
    "title": "Interface IMappingSource | Inflatable API Reference",
    "keywords": "Interface IMappingSource Mapping source interface Namespace: Inflatable.ClassMapper Assembly: Inflatable.dll Syntax public interface IMappingSource Properties | Improve this Doc View Source ApplyAnalysis Gets a value indicating whether [apply analysis]. Declaration bool ApplyAnalysis { get; } Property Value Type Description bool true if [apply analysis]; otherwise, false. | Improve this Doc View Source CanRead Gets a value indicating whether this instance can read. Declaration bool CanRead { get; } Property Value Type Description bool true if this instance can read; otherwise, false. | Improve this Doc View Source CanWrite Gets a value indicating whether this instance can write. Declaration bool CanWrite { get; } Property Value Type Description bool true if this instance can write; otherwise, false. | Improve this Doc View Source ChildTypes Gets the child types. Declaration ListMapping<Type, Type> ChildTypes { get; } Property Value Type Description ListMapping<Type, Type> The child types. | Improve this Doc View Source ConcreteTypes Gets the concrete types. Declaration Type[] ConcreteTypes { get; } Property Value Type Description Type[] The concrete types. | Improve this Doc View Source GenerateAnalysis Gets a value indicating whether [generate analysis]. Declaration bool GenerateAnalysis { get; } Property Value Type Description bool true if [generate analysis]; otherwise, false. | Improve this Doc View Source GenerateSchema Gets a value indicating whether [generate schema]. Declaration bool GenerateSchema { get; } Property Value Type Description bool true if [generate schema]; otherwise, false. | Improve this Doc View Source Logger Gets or sets the logger. Declaration ILogger Logger { get; } Property Value Type Description ILogger The logger. | Improve this Doc View Source Mappings Gets the mappings. Declaration Dictionary<Type, IMapping> Mappings { get; } Property Value Type Description Dictionary<Type, IMapping> The mappings. | Improve this Doc View Source Order Gets the order. Declaration int Order { get; } Property Value Type Description int The order. | Improve this Doc View Source ParentTypes Gets the parent types. Declaration ListMapping<Type, Type> ParentTypes { get; } Property Value Type Description ListMapping<Type, Type> The parent types. | Improve this Doc View Source QueryProvider Gets the query provider. Declaration QueryProviderManager QueryProvider { get; } Property Value Type Description QueryProviderManager The query provider. | Improve this Doc View Source Source Gets the source. Declaration IDatabase Source { get; } Property Value Type Description IDatabase The source. | Improve this Doc View Source TypeGraphs Gets the type graphs. Declaration Dictionary<Type, Tree<Type>?> TypeGraphs { get; } Property Value Type Description Dictionary<Type, Tree<Type>> The type graphs. | Improve this Doc View Source UpdateSchema Gets a value indicating whether [update schema]. Declaration bool UpdateSchema { get; } Property Value Type Description bool true if [update schema]; otherwise, false. Methods | Improve this Doc View Source Equals(object) Determines whether the specified object, is equal to this instance. Declaration bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. | Improve this Doc View Source GetChildMappings(Type) Gets the child mappings. Declaration IEnumerable<IMapping> GetChildMappings(Type objectType) Parameters Type Name Description Type objectType Type of the object. Returns Type Description IEnumerable<IMapping> | Improve this Doc View Source GetChildMappings<TObject>() Gets the child mappings. Declaration IEnumerable<IMapping> GetChildMappings<TObject>() Returns Type Description IEnumerable<IMapping> Type Parameters Name Description TObject The type of the object. | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source GetParentMapping(Type) Gets the parent mapping. Declaration IEnumerable<IMapping> GetParentMapping(Type objectType) Parameters Type Name Description Type objectType Type of the object. Returns Type Description IEnumerable<IMapping> | Improve this Doc View Source GetParentMapping<TObject>() Gets the parent mapping. Declaration IEnumerable<IMapping> GetParentMapping<TObject>() Returns Type Description IEnumerable<IMapping> Type Parameters Name Description TObject The type of the object. | Improve this Doc View Source ToString() Converts to string. Declaration string ToString() Returns Type Description string A string that represents this instance."
  },
  "api/Inflatable.ClassMapper.Interfaces.IAutoIDProperty.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IAutoIDProperty.html",
    "title": "Interface IAutoIDProperty | Inflatable API Reference",
    "keywords": "Interface IAutoIDProperty Auto ID property interface Namespace: Inflatable.ClassMapper.Interfaces Assembly: Inflatable.dll Syntax public interface IAutoIDProperty Properties | Improve this Doc View Source ColumnName Gets the name of the column. Declaration string ColumnName { get; } Property Value Type Description string The name of the column. | Improve this Doc View Source ParentMapping Gets the parent mapping. Declaration IMapping ParentMapping { get; } Property Value Type Description IMapping The parent mapping. Methods | Improve this Doc View Source AddToChildTable(ITable) Adds to child table. Declaration void AddToChildTable(ITable table) Parameters Type Name Description ITable table The table. | Improve this Doc View Source AddToTable(ITable) Adds this instance to the table. Declaration void AddToTable(ITable table) Parameters Type Name Description ITable table The table. | Improve this Doc View Source Setup() Sets up the property (used internally) Declaration void Setup()"
  },
  "api/Inflatable.ClassMapper.Interfaces.IClassProperty.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IClassProperty.html",
    "title": "Interface IClassProperty | Inflatable API Reference",
    "keywords": "Interface IClassProperty Single class property data holder Inherited Members IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) Namespace: Inflatable.ClassMapper.Interfaces Assembly: Inflatable.dll Syntax public interface IClassProperty : IPropertyColumns Properties | Improve this Doc View Source LoadPropertyQuery Gets the load property query. Declaration Query? LoadPropertyQuery { get; } Property Value Type Description Query The load property query. | Improve this Doc View Source Name Gets the name. Declaration string Name { get; } Property Value Type Description string The name. | Improve this Doc View Source ParentMapping Gets the parent mapping. Declaration IMapping ParentMapping { get; } Property Value Type Description IMapping The parent mapping."
  },
  "api/Inflatable.ClassMapper.Interfaces.IIDProperty-2.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IIDProperty-2.html",
    "title": "Interface IIDProperty<ClassType, DataType> | Inflatable API Reference",
    "keywords": "Interface IIDProperty<ClassType, DataType> Property interface Inherited Members IIDProperty.AutoIncrement IIDProperty.ColumnName IIDProperty.Constraints IIDProperty.Index IIDProperty.InternalFieldName IIDProperty.MaxLength IIDProperty.Name IIDProperty.Nullable IIDProperty.ParentMapping IIDProperty.PropertyType IIDProperty.TypeName IIDProperty.AddToChildTable(ITable) IIDProperty.AddToTable(ITable) IIDProperty.Convert<TResult>(IMapping) IIDProperty.Setup() IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) Namespace: Inflatable.ClassMapper.Interfaces Assembly: Inflatable.dll Syntax public interface IIDProperty<ClassType, DataType> : IIDProperty, IPropertyColumns where ClassType : class Type Parameters Name Description ClassType Class type DataType Properties | Improve this Doc View Source CompiledExpression Compiled version of the expression Declaration Func<ClassType, DataType> CompiledExpression { get; } Property Value Type Description Func<ClassType, DataType> | Improve this Doc View Source Expression Expression pointing to the property Declaration Expression<Func<ClassType, DataType>> Expression { get; } Property Value Type Description Expression<Func<ClassType, DataType>>"
  },
  "api/Inflatable.ClassMapper.Interfaces.IIDProperty-3.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IIDProperty-3.html",
    "title": "Interface IIDProperty<ClassType, DataType, ReturnType> | Inflatable API Reference",
    "keywords": "Interface IIDProperty<ClassType, DataType, ReturnType> Property interface Namespace: Inflatable.ClassMapper.Interfaces Assembly: Inflatable.dll Syntax public interface IIDProperty<ClassType, DataType, ReturnType> : IFluentInterface where ClassType : class where ReturnType : IIDProperty<ClassType, DataType, ReturnType> Type Parameters Name Description ClassType Class type DataType Data type ReturnType Return type Methods | Improve this Doc View Source IsAutoIncremented() Determines whether this [is auto incremented]. Declaration ReturnType IsAutoIncremented() Returns Type Description ReturnType this | Improve this Doc View Source WithColumnName(string) Sets the name of the field in the database. Declaration ReturnType WithColumnName(string columnName) Parameters Type Name Description string columnName Name of the field. Returns Type Description ReturnType this | Improve this Doc View Source WithConstraint(string) Sets a constraint on the field if the source allows it. Declaration ReturnType WithConstraint(string constraint) Parameters Type Name Description string constraint The constraint. Returns Type Description ReturnType this | Improve this Doc View Source WithMaxLength() Sets the length for the property to MAX. Declaration ReturnType WithMaxLength() Returns Type Description ReturnType this. | Improve this Doc View Source WithMaxLength(int) Sets the max length for the property (or precision for items like decimal values) Declaration ReturnType WithMaxLength(int maxLength) Parameters Type Name Description int maxLength Max length Returns Type Description ReturnType this"
  },
  "api/Inflatable.ClassMapper.Interfaces.IIDProperty.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IIDProperty.html",
    "title": "Interface IIDProperty | Inflatable API Reference",
    "keywords": "Interface IIDProperty ID property interface Inherited Members IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) Namespace: Inflatable.ClassMapper.Interfaces Assembly: Inflatable.dll Syntax public interface IIDProperty : IPropertyColumns Properties | Improve this Doc View Source AutoIncrement Gets a value indicating whether to [automatic increment]. Declaration bool AutoIncrement { get; } Property Value Type Description bool true if [automatic increment]; otherwise, false. | Improve this Doc View Source ColumnName Gets the name of the column. Declaration string ColumnName { get; } Property Value Type Description string The name of the column. | Improve this Doc View Source Constraints Gets the constraints if the data source supports them. Declaration IList<string> Constraints { get; } Property Value Type Description IList<string> The constraints if the data source supports them. | Improve this Doc View Source Index Gets a value indicating whether this IIDProperty is index. Declaration bool Index { get; } Property Value Type Description bool true if index; otherwise, false. | Improve this Doc View Source InternalFieldName Gets the name of the internal field. Declaration string InternalFieldName { get; } Property Value Type Description string The name of the internal field. | Improve this Doc View Source MaxLength Gets the maximum length. Declaration int MaxLength { get; } Property Value Type Description int The maximum length. | Improve this Doc View Source Name Gets the name. Declaration string Name { get; } Property Value Type Description string The name. | Improve this Doc View Source Nullable Gets a value indicating whether this IIDProperty is nullable. Declaration bool Nullable { get; } Property Value Type Description bool true if nullable; otherwise, false. | Improve this Doc View Source ParentMapping Gets the parent mapping. Declaration IMapping ParentMapping { get; } Property Value Type Description IMapping The parent mapping. | Improve this Doc View Source PropertyType Gets the type of the property. Declaration Type PropertyType { get; } Property Value Type Description Type The type of the property. | Improve this Doc View Source TypeName Gets the name of the type. Declaration string TypeName { get; } Property Value Type Description string The name of the type. Methods | Improve this Doc View Source AddToChildTable(ITable) Adds to a child table. Declaration void AddToChildTable(ITable table) Parameters Type Name Description ITable table The table. | Improve this Doc View Source AddToTable(ITable) Adds this instance to the table. Declaration void AddToTable(ITable table) Parameters Type Name Description ITable table The table. | Improve this Doc View Source Convert<TResult>(IMapping) Converts this instance to the class specified Declaration IIDProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters Type Name Description IMapping mapping The mapping. Returns Type Description IIDProperty The resulting property Type Parameters Name Description TResult The type of the result. | Improve this Doc View Source Setup() Sets up the property (used internally) Declaration void Setup()"
  },
  "api/Inflatable.ClassMapper.Interfaces.IManyToManyProperty-2.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IManyToManyProperty-2.html",
    "title": "Interface IManyToManyProperty<TClassType, TDataType> | Inflatable API Reference",
    "keywords": "Interface IManyToManyProperty<TClassType, TDataType> Many to many property Inherited Members IManyToManyProperty.Cascade IManyToManyProperty.DatabaseJoinsCascade IManyToManyProperty.ForeignMapping IManyToManyProperty.InternalFieldName IManyToManyProperty.PropertyType IManyToManyProperty.TableName IManyToManyProperty.TypeName IManyToManyProperty.Convert<TResult>(IMapping) IManyToManyProperty.GetValue(object) IManyToManyProperty.Setup(IMappingSource, ISource) IManyToManyProperty.Similar(IManyToManyProperty) IClassProperty.LoadPropertyQuery IClassProperty.Name IClassProperty.ParentMapping IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) Namespace: Inflatable.ClassMapper.Interfaces Assembly: Inflatable.dll Syntax public interface IManyToManyProperty<TClassType, TDataType> : IManyToManyProperty, IClassProperty, IPropertyColumns where TClassType : class where TDataType : class Type Parameters Name Description TClassType The class type. TDataType The data type. Properties | Improve this Doc View Source CompiledExpression Compiled version of the expression Declaration Func<TClassType, TDataType> CompiledExpression { get; } Property Value Type Description Func<TClassType, TDataType> The compiled expression. See Also IFluentInterface | Improve this Doc View Source Expression Expression pointing to the property Declaration Expression<Func<TClassType, TDataType>> Expression { get; } Property Value Type Description Expression<Func<TClassType, TDataType>> The expression. See Also IFluentInterface See Also IFluentInterface"
  },
  "api/Inflatable.ClassMapper.Interfaces.IManyToManyProperty-3.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IManyToManyProperty-3.html",
    "title": "Interface IManyToManyProperty<TClassType, TDataType, TReturnType> | Inflatable API Reference",
    "keywords": "Interface IManyToManyProperty<TClassType, TDataType, TReturnType> Many to many property interface Namespace: Inflatable.ClassMapper.Interfaces Assembly: Inflatable.dll Syntax public interface IManyToManyProperty<TClassType, TDataType, TReturnType> : IFluentInterface where TClassType : class where TDataType : class where TReturnType : IManyToManyProperty<TClassType, TDataType, TReturnType> Type Parameters Name Description TClassType The class type. TDataType The data type. TReturnType The return type. Methods | Improve this Doc View Source CascadeChanges() Cascades changes to the mapped instance. Declaration TReturnType CascadeChanges() Returns Type Description TReturnType This See Also IClassProperty IFluentInterface | Improve this Doc View Source LoadUsing(string, CommandType) Loads the property using the query specified. Declaration TReturnType LoadUsing(string queryText, CommandType type) Parameters Type Name Description string queryText The query text. CommandType type The type. Returns Type Description TReturnType This See Also IClassProperty IFluentInterface | Improve this Doc View Source OnDeleteDoNothing() Called when you want to override the default referential integrity and do nothing on delete. Declaration TReturnType OnDeleteDoNothing() Returns Type Description TReturnType This See Also IClassProperty IFluentInterface | Improve this Doc View Source SetTableName(string) Sets the table's name. Declaration TReturnType SetTableName(string tableName) Parameters Type Name Description string tableName Name of the table. Returns Type Description TReturnType This See Also IClassProperty IFluentInterface See Also IClassProperty IFluentInterface"
  },
  "api/Inflatable.ClassMapper.Interfaces.IManyToManyProperty.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IManyToManyProperty.html",
    "title": "Interface IManyToManyProperty | Inflatable API Reference",
    "keywords": "Interface IManyToManyProperty Many to many property Inherited Members IClassProperty.LoadPropertyQuery IClassProperty.Name IClassProperty.ParentMapping IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) Namespace: Inflatable.ClassMapper.Interfaces Assembly: Inflatable.dll Syntax public interface IManyToManyProperty : IClassProperty, IPropertyColumns Properties | Improve this Doc View Source Cascade Gets a value indicating whether this IMapProperty is cascade. Declaration bool Cascade { get; } Property Value Type Description bool true if cascade; otherwise, false. See Also IFluentInterface | Improve this Doc View Source DatabaseJoinsCascade Gets a value indicating whether [database joins cascade]. Declaration bool DatabaseJoinsCascade { get; } Property Value Type Description bool true if [database joins cascade]; otherwise, false. See Also IFluentInterface | Improve this Doc View Source ForeignMapping Gets the foreign mapping. Declaration List<IMapping> ForeignMapping { get; } Property Value Type Description List<IMapping> The foreign mapping. See Also IFluentInterface | Improve this Doc View Source InternalFieldName Gets the name of the internal field. Declaration string InternalFieldName { get; } Property Value Type Description string The name of the internal field. See Also IFluentInterface | Improve this Doc View Source PropertyType Gets the type of the property. Declaration Type PropertyType { get; } Property Value Type Description Type The type of the property. See Also IFluentInterface | Improve this Doc View Source TableName Gets the name of the table. Declaration string? TableName { get; } Property Value Type Description string The name of the table. See Also IFluentInterface | Improve this Doc View Source TypeName Gets the name of the type. Declaration string TypeName { get; } Property Value Type Description string The name of the type. See Also IFluentInterface Methods | Improve this Doc View Source Convert<TResult>(IMapping) Converts this instance to the class specified Declaration IManyToManyProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters Type Name Description IMapping mapping The mapping. Returns Type Description IManyToManyProperty The resulting property Type Parameters Name Description TResult The type of the result. See Also IFluentInterface | Improve this Doc View Source GetValue(object) Gets the property's value from the object sent in Declaration object? GetValue(object ModelObject) Parameters Type Name Description object ModelObject Object to get the value from Returns Type Description object The value of the property See Also IFluentInterface | Improve this Doc View Source Setup(IMappingSource, ISource) Sets up the property (used internally) Declaration void Setup(IMappingSource mappings, ISource sourceSpec) Parameters Type Name Description IMappingSource mappings The mappings. ISource sourceSpec The source spec. See Also IFluentInterface | Improve this Doc View Source Similar(IManyToManyProperty) Similars the specified reference property2. Declaration bool Similar(IManyToManyProperty secondProperty) Parameters Type Name Description IManyToManyProperty secondProperty The second property. Returns Type Description bool True if it is similar, false otherwise. See Also IFluentInterface See Also IFluentInterface"
  },
  "api/Inflatable.ClassMapper.Interfaces.IManyToOneListProperty.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IManyToOneListProperty.html",
    "title": "Interface IManyToOneListProperty | Inflatable API Reference",
    "keywords": "Interface IManyToOneListProperty Many to one list property Inherited Members IManyToOneProperty.Cascade IManyToOneProperty.ColumnName IManyToOneProperty.ForeignMapping IManyToOneProperty.InternalFieldName IManyToOneProperty.PropertyType IManyToOneProperty.TypeName IManyToOneProperty.Convert<TResult>(IMapping) IManyToOneProperty.GetValue(object) IManyToOneProperty.Setup(IMappingSource, ISource) IManyToOneProperty.Similar(IManyToOneProperty) IClassProperty.LoadPropertyQuery IClassProperty.Name IClassProperty.ParentMapping IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) Namespace: Inflatable.ClassMapper.Interfaces Assembly: Inflatable.dll Syntax public interface IManyToOneListProperty : IManyToOneProperty, IClassProperty, IPropertyColumns See Also IManyToOneProperty"
  },
  "api/Inflatable.ClassMapper.Interfaces.IManyToOneProperty-2.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IManyToOneProperty-2.html",
    "title": "Interface IManyToOneProperty<TClassType, TDataType> | Inflatable API Reference",
    "keywords": "Interface IManyToOneProperty<TClassType, TDataType> Many to many property Inherited Members IManyToOneProperty.Cascade IManyToOneProperty.ColumnName IManyToOneProperty.ForeignMapping IManyToOneProperty.InternalFieldName IManyToOneProperty.PropertyType IManyToOneProperty.TypeName IManyToOneProperty.Convert<TResult>(IMapping) IManyToOneProperty.GetValue(object) IManyToOneProperty.Setup(IMappingSource, ISource) IManyToOneProperty.Similar(IManyToOneProperty) IClassProperty.LoadPropertyQuery IClassProperty.Name IClassProperty.ParentMapping IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) Namespace: Inflatable.ClassMapper.Interfaces Assembly: Inflatable.dll Syntax public interface IManyToOneProperty<TClassType, TDataType> : IManyToOneProperty, IClassProperty, IPropertyColumns where TClassType : class where TDataType : class Type Parameters Name Description TClassType The class type. TDataType The data type. Properties | Improve this Doc View Source CompiledExpression Compiled version of the expression Declaration Func<TClassType, TDataType> CompiledExpression { get; } Property Value Type Description Func<TClassType, TDataType> The compiled expression. See Also IFluentInterface | Improve this Doc View Source Expression Expression pointing to the property Declaration Expression<Func<TClassType, TDataType>> Expression { get; } Property Value Type Description Expression<Func<TClassType, TDataType>> The expression. See Also IFluentInterface See Also IFluentInterface"
  },
  "api/Inflatable.ClassMapper.Interfaces.IManyToOneProperty-3.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IManyToOneProperty-3.html",
    "title": "Interface IManyToOneProperty<TClassType, TDataType, TReturnType> | Inflatable API Reference",
    "keywords": "Interface IManyToOneProperty<TClassType, TDataType, TReturnType> Many to one property interface Namespace: Inflatable.ClassMapper.Interfaces Assembly: Inflatable.dll Syntax public interface IManyToOneProperty<TClassType, TDataType, TReturnType> : IFluentInterface where TClassType : class where TDataType : class where TReturnType : IManyToOneProperty<TClassType, TDataType, TReturnType> Type Parameters Name Description TClassType The class type. TDataType The data type. TReturnType The return type. Methods | Improve this Doc View Source CascadeChanges() Cascades changes to the mapped instance. Declaration TReturnType CascadeChanges() Returns Type Description TReturnType This See Also IClassProperty IFluentInterface | Improve this Doc View Source LoadUsing(string, CommandType) Loads the property using the query specified. Declaration TReturnType LoadUsing(string queryText, CommandType type) Parameters Type Name Description string queryText The query text. CommandType type The type. Returns Type Description TReturnType This See Also IClassProperty IFluentInterface | Improve this Doc View Source OnDeleteDoNothing() Called when you want to override the default referential integrity and do nothing on delete. Declaration TReturnType OnDeleteDoNothing() Returns Type Description TReturnType This See Also IClassProperty IFluentInterface | Improve this Doc View Source SetColumnName(string) Sets the name of the column. Declaration TReturnType SetColumnName(string columnName) Parameters Type Name Description string columnName Name of the column. Returns Type Description TReturnType This See Also IClassProperty IFluentInterface See Also IClassProperty IFluentInterface"
  },
  "api/Inflatable.ClassMapper.Interfaces.IManyToOneProperty.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IManyToOneProperty.html",
    "title": "Interface IManyToOneProperty | Inflatable API Reference",
    "keywords": "Interface IManyToOneProperty Many to many property Inherited Members IClassProperty.LoadPropertyQuery IClassProperty.Name IClassProperty.ParentMapping IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) Namespace: Inflatable.ClassMapper.Interfaces Assembly: Inflatable.dll Syntax public interface IManyToOneProperty : IClassProperty, IPropertyColumns Properties | Improve this Doc View Source Cascade Gets a value indicating whether this IMapProperty is cascade. Declaration bool Cascade { get; } Property Value Type Description bool true if cascade; otherwise, false. See Also IFluentInterface | Improve this Doc View Source ColumnName Gets the name of the column. Declaration string ColumnName { get; } Property Value Type Description string The name of the column. See Also IFluentInterface | Improve this Doc View Source ForeignMapping Gets the foreign mapping. Declaration List<IMapping> ForeignMapping { get; } Property Value Type Description List<IMapping> The foreign mapping. See Also IFluentInterface | Improve this Doc View Source InternalFieldName Gets the name of the internal field. Declaration string InternalFieldName { get; } Property Value Type Description string The name of the internal field. See Also IFluentInterface | Improve this Doc View Source PropertyType Gets the type of the property. Declaration Type PropertyType { get; } Property Value Type Description Type The type of the property. See Also IFluentInterface | Improve this Doc View Source TypeName Gets the name of the type. Declaration string TypeName { get; } Property Value Type Description string The name of the type. See Also IFluentInterface Methods | Improve this Doc View Source Convert<TResult>(IMapping) Converts this instance to the class specified Declaration IManyToOneProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters Type Name Description IMapping mapping The mapping. Returns Type Description IManyToOneProperty The resulting property Type Parameters Name Description TResult The type of the result. See Also IFluentInterface | Improve this Doc View Source GetValue(object) Gets the property's value from the object sent in Declaration object? GetValue(object ModelObject) Parameters Type Name Description object ModelObject Object to get the value from Returns Type Description object The value of the property See Also IFluentInterface | Improve this Doc View Source Setup(IMappingSource, ISource) Sets up the property (used internally) Declaration void Setup(IMappingSource mappings, ISource sourceSpec) Parameters Type Name Description IMappingSource mappings The mappings. ISource sourceSpec The source spec. See Also IFluentInterface | Improve this Doc View Source Similar(IManyToOneProperty) Similars the specified reference property2. Declaration bool Similar(IManyToOneProperty secondProperty) Parameters Type Name Description IManyToOneProperty secondProperty The second property. Returns Type Description bool True if it is similar, false otherwise. See Also IFluentInterface See Also IFluentInterface"
  },
  "api/Inflatable.ClassMapper.Interfaces.IMapProperty-2.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IMapProperty-2.html",
    "title": "Interface IMapProperty<TClassType, TDataType> | Inflatable API Reference",
    "keywords": "Interface IMapProperty<TClassType, TDataType> Map property interface Inherited Members IMapProperty.Cascade IMapProperty.ColumnName IMapProperty.ForeignMapping IMapProperty.InternalFieldName IMapProperty.PropertyType IMapProperty.TypeName IMapProperty.Unique IMapProperty.AddToTable(ITable) IMapProperty.Convert<TResult>(IMapping) IMapProperty.GetValue(object) IMapProperty.Setup(IMappingSource) IMapProperty.Similar(IMapProperty) IClassProperty.LoadPropertyQuery IClassProperty.Name IClassProperty.ParentMapping IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) Namespace: Inflatable.ClassMapper.Interfaces Assembly: Inflatable.dll Syntax public interface IMapProperty<TClassType, TDataType> : IMapProperty, IClassProperty, IPropertyColumns where TClassType : class where TDataType : class Type Parameters Name Description TClassType The type of the class type. TDataType The type of the data type. Properties | Improve this Doc View Source CompiledExpression Compiled version of the expression Declaration Func<TClassType, TDataType?> CompiledExpression { get; } Property Value Type Description Func<TClassType, TDataType> The compiled expression. See Also IFluentInterface | Improve this Doc View Source Expression Expression pointing to the property Declaration Expression<Func<TClassType, TDataType?>> Expression { get; } Property Value Type Description Expression<Func<TClassType, TDataType>> The expression. See Also IFluentInterface See Also IFluentInterface"
  },
  "api/Inflatable.ClassMapper.Interfaces.IMapProperty-3.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IMapProperty-3.html",
    "title": "Interface IMapProperty<TClassType, TDataType, TReturnType> | Inflatable API Reference",
    "keywords": "Interface IMapProperty<TClassType, TDataType, TReturnType> Map property interface Namespace: Inflatable.ClassMapper.Interfaces Assembly: Inflatable.dll Syntax public interface IMapProperty<TClassType, TDataType, TReturnType> : IFluentInterface where TClassType : class where TDataType : class where TReturnType : IMapProperty<TClassType, TDataType, TReturnType> Type Parameters Name Description TClassType The type of the class type. TDataType The type of the data type. TReturnType The type of the return type. Methods | Improve this Doc View Source CascadeChanges() Cascades changes to the mapped instance. Declaration TReturnType CascadeChanges() Returns Type Description TReturnType This See Also IFluentInterface | Improve this Doc View Source IsUnique() Determines whether this instance is unique. Declaration TReturnType IsUnique() Returns Type Description TReturnType this See Also IFluentInterface | Improve this Doc View Source LoadUsing(string, CommandType) Loads the property using the query specified. Declaration TReturnType LoadUsing(string queryText, CommandType type) Parameters Type Name Description string queryText The query text. CommandType type The type. Returns Type Description TReturnType This See Also IFluentInterface | Improve this Doc View Source OnDeleteDoNothing() Called when you want to override the default referential integrity and do nothing on delete. Declaration TReturnType OnDeleteDoNothing() Returns Type Description TReturnType This See Also IFluentInterface | Improve this Doc View Source WithColumnName(string) Sets the name of the column. Declaration TReturnType WithColumnName(string columnName) Parameters Type Name Description string columnName Name of the column. Returns Type Description TReturnType This See Also IFluentInterface See Also IFluentInterface"
  },
  "api/Inflatable.ClassMapper.Interfaces.IMapProperty.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IMapProperty.html",
    "title": "Interface IMapProperty | Inflatable API Reference",
    "keywords": "Interface IMapProperty Map property Inherited Members IClassProperty.LoadPropertyQuery IClassProperty.Name IClassProperty.ParentMapping IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) Namespace: Inflatable.ClassMapper.Interfaces Assembly: Inflatable.dll Syntax public interface IMapProperty : IClassProperty, IPropertyColumns Properties | Improve this Doc View Source Cascade Gets a value indicating whether this IMapProperty is cascade. Declaration bool Cascade { get; } Property Value Type Description bool true if cascade; otherwise, false. See Also IFluentInterface | Improve this Doc View Source ColumnName Gets the name of the column. Declaration string ColumnName { get; } Property Value Type Description string The name of the column. See Also IFluentInterface | Improve this Doc View Source ForeignMapping Gets the foreign mapping. Declaration List<IMapping> ForeignMapping { get; } Property Value Type Description List<IMapping> The foreign mapping. See Also IFluentInterface | Improve this Doc View Source InternalFieldName Gets the name of the internal field. Declaration string InternalFieldName { get; } Property Value Type Description string The name of the internal field. See Also IFluentInterface | Improve this Doc View Source PropertyType Gets the type of the property. Declaration Type PropertyType { get; } Property Value Type Description Type The type of the property. See Also IFluentInterface | Improve this Doc View Source TypeName Gets the name of the type. Declaration string TypeName { get; } Property Value Type Description string The name of the type. See Also IFluentInterface | Improve this Doc View Source Unique Gets a value indicating whether this IMapProperty is unique. Declaration bool Unique { get; } Property Value Type Description bool true if unique; otherwise, false. See Also IFluentInterface Methods | Improve this Doc View Source AddToTable(ITable) Adds this property to the table. Declaration void AddToTable(ITable table) Parameters Type Name Description ITable table The table. See Also IFluentInterface | Improve this Doc View Source Convert<TResult>(IMapping) Converts this instance to the class specified Declaration IMapProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters Type Name Description IMapping mapping The mapping. Returns Type Description IMapProperty The resulting property Type Parameters Name Description TResult The type of the result. See Also IFluentInterface | Improve this Doc View Source GetValue(object) Gets the property's value from the object sent in Declaration object? GetValue(object ModelObject) Parameters Type Name Description object ModelObject Object to get the value from Returns Type Description object The value of the property See Also IFluentInterface | Improve this Doc View Source Setup(IMappingSource) Sets up the property (used internally) Declaration void Setup(IMappingSource mappings) Parameters Type Name Description IMappingSource mappings The mappings. See Also IFluentInterface | Improve this Doc View Source Similar(IMapProperty) Similars the specified reference property2. Declaration bool Similar(IMapProperty secondProperty) Parameters Type Name Description IMapProperty secondProperty The second property. Returns Type Description bool True if it is similar, false otherwise. See Also IFluentInterface See Also IFluentInterface"
  },
  "api/Inflatable.ClassMapper.Interfaces.IProperty-2.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IProperty-2.html",
    "title": "Interface IProperty<ClassType, DataType> | Inflatable API Reference",
    "keywords": "Interface IProperty<ClassType, DataType> Property interface Inherited Members IProperty.ColumnName IProperty.ComputedColumnSpecification IProperty.Constraints IProperty.Index IProperty.InternalFieldName IProperty.MaxLength IProperty.Name IProperty.Nullable IProperty.ParentMapping IProperty.PropertyType IProperty.ReadOnly IProperty.TypeName IProperty.Unique IProperty.AddToTable(ITable) IProperty.Convert<TResult>(IMapping) IProperty.Setup() IProperty.Similar(IProperty) IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) Namespace: Inflatable.ClassMapper.Interfaces Assembly: Inflatable.dll Syntax public interface IProperty<ClassType, DataType> : IProperty, IPropertyColumns where ClassType : class Type Parameters Name Description ClassType Class type DataType Properties | Improve this Doc View Source CompiledExpression Compiled version of the expression Declaration Func<ClassType, DataType> CompiledExpression { get; } Property Value Type Description Func<ClassType, DataType> | Improve this Doc View Source DefaultValue Default value for this property Declaration Func<DataType> DefaultValue { get; } Property Value Type Description Func<DataType> | Improve this Doc View Source Expression Expression pointing to the property Declaration Expression<Func<ClassType, DataType>> Expression { get; } Property Value Type Description Expression<Func<ClassType, DataType>>"
  },
  "api/Inflatable.ClassMapper.Interfaces.IProperty-3.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IProperty-3.html",
    "title": "Interface IProperty<ClassType, DataType, ReturnType> | Inflatable API Reference",
    "keywords": "Interface IProperty<ClassType, DataType, ReturnType> Property interface Namespace: Inflatable.ClassMapper.Interfaces Assembly: Inflatable.dll Syntax public interface IProperty<ClassType, DataType, ReturnType> : IFluentInterface where ClassType : class where ReturnType : IProperty<ClassType, DataType, ReturnType> Type Parameters Name Description ClassType Class type DataType Data type ReturnType Return type Methods | Improve this Doc View Source IsIndexed() Determines whether this instance is indexed. Declaration ReturnType IsIndexed() Returns Type Description ReturnType this | Improve this Doc View Source IsReadOnly() Determines whether [is read only]. Declaration ReturnType IsReadOnly() Returns Type Description ReturnType this | Improve this Doc View Source IsUnique() Determines whether this instance is unique. Declaration ReturnType IsUnique() Returns Type Description ReturnType this | Improve this Doc View Source WithColumnName(string) Sets the name of the field in the database. Declaration ReturnType WithColumnName(string columnName) Parameters Type Name Description string columnName Name of the field. Returns Type Description ReturnType this | Improve this Doc View Source WithComputedColumnSpecification(string) Sets the computed column specification if the source allows it. Declaration ReturnType WithComputedColumnSpecification(string computedColumnSpecification) Parameters Type Name Description string computedColumnSpecification The computed column specification. Returns Type Description ReturnType this | Improve this Doc View Source WithConstraint(string) Sets a constraint on the field if the source allows it. Declaration ReturnType WithConstraint(string constraint) Parameters Type Name Description string constraint The constraint. Returns Type Description ReturnType this | Improve this Doc View Source WithDefaultValue(Func<DataType>) Sets the default value of the property. Declaration ReturnType WithDefaultValue(Func<DataType> value) Parameters Type Name Description Func<DataType> value The value. Returns Type Description ReturnType this | Improve this Doc View Source WithMaxLength() Sets the length for the property to MAX. Declaration ReturnType WithMaxLength() Returns Type Description ReturnType this. | Improve this Doc View Source WithMaxLength(int) Sets the max length for the property (or precision for items like decimal values) Declaration ReturnType WithMaxLength(int maxLength) Parameters Type Name Description int maxLength Max length Returns Type Description ReturnType this"
  },
  "api/Inflatable.ClassMapper.Interfaces.IProperty.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IProperty.html",
    "title": "Interface IProperty | Inflatable API Reference",
    "keywords": "Interface IProperty Property data holder interface Inherited Members IPropertyColumns.GetColumnInfo() IPropertyColumns.SetColumnInfo(IMappingSource) Namespace: Inflatable.ClassMapper.Interfaces Assembly: Inflatable.dll Syntax public interface IProperty : IPropertyColumns Properties | Improve this Doc View Source ColumnName Gets the name of the column. Declaration string ColumnName { get; } Property Value Type Description string The name of the column. | Improve this Doc View Source ComputedColumnSpecification Gets the computed column specification. Declaration string ComputedColumnSpecification { get; } Property Value Type Description string The computed column specification. | Improve this Doc View Source Constraints Gets the constraints if the data source supports them. Declaration IList<string> Constraints { get; } Property Value Type Description IList<string> The constraints if the data source supports them. | Improve this Doc View Source Index Gets a value indicating whether this IProperty is indexed. Declaration bool Index { get; } Property Value Type Description bool true if index; otherwise, false. | Improve this Doc View Source InternalFieldName Gets the name of the internal field. Declaration string InternalFieldName { get; } Property Value Type Description string The name of the internal field. | Improve this Doc View Source MaxLength Gets the maximum length. Declaration int MaxLength { get; } Property Value Type Description int The maximum length. | Improve this Doc View Source Name Gets the name. Declaration string Name { get; } Property Value Type Description string The name. | Improve this Doc View Source Nullable Gets a value indicating whether this IProperty is nullable. Declaration bool Nullable { get; } Property Value Type Description bool true if nullable; otherwise, false. | Improve this Doc View Source ParentMapping Gets the parent mapping. Declaration IMapping ParentMapping { get; } Property Value Type Description IMapping The parent mapping. | Improve this Doc View Source PropertyType Gets the type of the property. Declaration Type PropertyType { get; } Property Value Type Description Type The type of the property. | Improve this Doc View Source ReadOnly Gets a value indicating whether [read only]. Declaration bool ReadOnly { get; } Property Value Type Description bool true if [read only]; otherwise, false. | Improve this Doc View Source TypeName Gets the name of the type. Declaration string TypeName { get; } Property Value Type Description string The name of the type. | Improve this Doc View Source Unique Gets a value indicating whether this IProperty is unique. Declaration bool Unique { get; } Property Value Type Description bool true if unique; otherwise, false. Methods | Improve this Doc View Source AddToTable(ITable) Adds this property to the table. Declaration void AddToTable(ITable table) Parameters Type Name Description ITable table The table. | Improve this Doc View Source Convert<TResult>(IMapping) Converts this instance to the class specified Declaration IProperty Convert<TResult>(IMapping mapping) where TResult : class Parameters Type Name Description IMapping mapping The mapping. Returns Type Description IProperty The resulting property Type Parameters Name Description TResult The type of the result. | Improve this Doc View Source Setup() Sets up the property (used internally) Declaration void Setup() | Improve this Doc View Source Similar(IProperty) Similars the specified reference property2. Declaration bool Similar(IProperty secondProperty) Parameters Type Name Description IProperty secondProperty The second property. Returns Type Description bool True if it is similar, false otherwise."
  },
  "api/Inflatable.ClassMapper.Interfaces.IPropertyColumns.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.IPropertyColumns.html",
    "title": "Interface IPropertyColumns | Inflatable API Reference",
    "keywords": "Interface IPropertyColumns Interface holding column information Namespace: Inflatable.ClassMapper.Interfaces Assembly: Inflatable.dll Syntax public interface IPropertyColumns Methods | Improve this Doc View Source GetColumnInfo() Gets the column information. Declaration IQueryColumnInfo[] GetColumnInfo() Returns Type Description IQueryColumnInfo[] The column information. | Improve this Doc View Source SetColumnInfo(IMappingSource) Sets the column information. Declaration void SetColumnInfo(IMappingSource mappings) Parameters Type Name Description IMappingSource mappings The mappings."
  },
  "api/Inflatable.ClassMapper.Interfaces.html": {
    "href": "api/Inflatable.ClassMapper.Interfaces.html",
    "title": "Namespace Inflatable.ClassMapper.Interfaces | Inflatable API Reference",
    "keywords": "Namespace Inflatable.ClassMapper.Interfaces Interfaces IAutoIDProperty Auto ID property interface IClassProperty Single class property data holder IIDProperty ID property interface IIDProperty<ClassType, DataType> Property interface IIDProperty<ClassType, DataType, ReturnType> Property interface IManyToManyProperty Many to many property IManyToManyProperty<TClassType, TDataType> Many to many property IManyToManyProperty<TClassType, TDataType, TReturnType> Many to many property interface IManyToOneListProperty Many to one list property IManyToOneProperty Many to many property IManyToOneProperty<TClassType, TDataType> Many to many property IManyToOneProperty<TClassType, TDataType, TReturnType> Many to one property interface IMapProperty Map property IMapProperty<TClassType, TDataType> Map property interface IMapProperty<TClassType, TDataType, TReturnType> Map property interface IProperty Property data holder interface IPropertyColumns Interface holding column information IProperty<ClassType, DataType> Property interface IProperty<ClassType, DataType, ReturnType> Property interface"
  },
  "api/Inflatable.ClassMapper.MappingManager.html": {
    "href": "api/Inflatable.ClassMapper.MappingManager.html",
    "title": "Class MappingManager | Inflatable API Reference",
    "keywords": "Class MappingManager Mapping manager Inheritance object MappingManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Inflatable.ClassMapper Assembly: Inflatable.dll Syntax public class MappingManager Constructors | Improve this Doc View Source MappingManager(IEnumerable<IMapping>, IEnumerable<IDatabase>, QueryProviderManager, ObjectPool<StringBuilder>, ILogger<MappingManager>?) Initializes a new instance of the MappingManager class. Declaration public MappingManager(IEnumerable<IMapping> mappings, IEnumerable<IDatabase> sources, QueryProviderManager queryProvider, ObjectPool<StringBuilder> objectPool, ILogger<MappingManager>? logger = null) Parameters Type Name Description IEnumerable<IMapping> mappings The mappings. IEnumerable<IDatabase> sources The sources. QueryProviderManager queryProvider The query provider. ObjectPool<StringBuilder> objectPool The object pool. ILogger<MappingManager> logger The logger. Exceptions Type Condition ArgumentNullException logger Properties | Improve this Doc View Source Logger Gets or sets the logger. Declaration public ILogger? Logger { get; set; } Property Value Type Description ILogger The logger. | Improve this Doc View Source ObjectPool Gets or sets the ObjectPool. Declaration public ObjectPool<StringBuilder> ObjectPool { get; } Property Value Type Description ObjectPool<StringBuilder> The ObjectPool. | Improve this Doc View Source ReadSources Gets or sets the read sources. Declaration public IMappingSource[] ReadSources { get; set; } Property Value Type Description IMappingSource[] The read sources. | Improve this Doc View Source Sources Gets or sets the sources. Declaration public IMappingSource[] Sources { get; set; } Property Value Type Description IMappingSource[] The sources. | Improve this Doc View Source WriteSources Gets or sets the write sources. Declaration public IMappingSource[] WriteSources { get; set; } Property Value Type Description IMappingSource[] The write sources. Methods | Improve this Doc View Source ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString()"
  },
  "api/Inflatable.ClassMapper.MappingSource.html": {
    "href": "api/Inflatable.ClassMapper.MappingSource.html",
    "title": "Class MappingSource | Inflatable API Reference",
    "keywords": "Class MappingSource Mapping source Inheritance object MappingSource Implements IMappingSource Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Inflatable.ClassMapper Assembly: Inflatable.dll Syntax public class MappingSource : IMappingSource Constructors | Improve this Doc View Source MappingSource(IEnumerable<IMapping>, IDatabase, QueryProviderManager, ILogger?, ObjectPool<StringBuilder>) Mapping source Declaration public MappingSource(IEnumerable<IMapping> mappings, IDatabase source, QueryProviderManager queryProvider, ILogger? logger, ObjectPool<StringBuilder> objectPool) Parameters Type Name Description IEnumerable<IMapping> mappings Mappings associated with the source IDatabase source Database source QueryProviderManager queryProvider The query provider. ILogger logger Logging object ObjectPool<StringBuilder> objectPool The object pool. Exceptions Type Condition ArgumentNullException queryProvider or source See Also IMappingSource Properties | Improve this Doc View Source ApplyAnalysis Gets a value indicating whether to [apply analysis]. Declaration public bool ApplyAnalysis { get; } Property Value Type Description bool true if you should [apply analysis]; otherwise, false. See Also IMappingSource | Improve this Doc View Source CanRead Gets a value indicating whether this instance can be read. Declaration public bool CanRead { get; } Property Value Type Description bool true if this instance can be read; otherwise, false. See Also IMappingSource | Improve this Doc View Source CanWrite Gets a value indicating whether this instance can be written to. Declaration public bool CanWrite { get; } Property Value Type Description bool true if this instance can be written to; otherwise, false. See Also IMappingSource | Improve this Doc View Source ChildTypes Gets the child types. Declaration public ListMapping<Type, Type> ChildTypes { get; } Property Value Type Description ListMapping<Type, Type> The child types. See Also IMappingSource | Improve this Doc View Source ConcreteTypes Gets the concrete types. Declaration public Type[] ConcreteTypes { get; } Property Value Type Description Type[] The concrete types. See Also IMappingSource | Improve this Doc View Source GenerateAnalysis Gets a value indicating whether to [generate analysis]. Declaration public bool GenerateAnalysis { get; } Property Value Type Description bool true if you should [generate analysis]; otherwise, false. See Also IMappingSource | Improve this Doc View Source GenerateSchema Gets a value indicating whether to [generate schema]. Declaration public bool GenerateSchema { get; } Property Value Type Description bool true if you should [generate schema]; otherwise, false. See Also IMappingSource | Improve this Doc View Source Logger Logger for the system Declaration public ILogger? Logger { get; } Property Value Type Description ILogger See Also IMappingSource | Improve this Doc View Source Mappings Gets or sets the mappings. Declaration public Dictionary<Type, IMapping> Mappings { get; } Property Value Type Description Dictionary<Type, IMapping> The mappings. See Also IMappingSource | Improve this Doc View Source ObjectPool Gets or sets the ObjectPool. Declaration public ObjectPool<StringBuilder> ObjectPool { get; } Property Value Type Description ObjectPool<StringBuilder> The ObjectPool. See Also IMappingSource | Improve this Doc View Source Optimize Gets a value indicating whether to [optimize]. Declaration public bool Optimize { get; } Property Value Type Description bool true if you should [optimize]; otherwise, false. See Also IMappingSource | Improve this Doc View Source Order Order that the source is used Declaration public int Order { get; } Property Value Type Description int See Also IMappingSource | Improve this Doc View Source ParentTypes Gets the parent types. Declaration public ListMapping<Type, Type> ParentTypes { get; } Property Value Type Description ListMapping<Type, Type> The parent types. See Also IMappingSource | Improve this Doc View Source QueryProvider Gets the query provider. Declaration public QueryProviderManager QueryProvider { get; } Property Value Type Description QueryProviderManager The query provider. See Also IMappingSource | Improve this Doc View Source Source Source info Declaration public IDatabase Source { get; } Property Value Type Description IDatabase See Also IMappingSource | Improve this Doc View Source TypeGraphs Gets or sets the type graph. Declaration public Dictionary<Type, Tree<Type>?> TypeGraphs { get; } Property Value Type Description Dictionary<Type, Tree<Type>> The type graph. See Also IMappingSource | Improve this Doc View Source UpdateSchema Gets a value indicating whether to [update schema]. Declaration public bool UpdateSchema { get; } Property Value Type Description bool true if you should [update schema]; otherwise, false. See Also IMappingSource Methods | Improve this Doc View Source Equals(object) Determines whether the specified object, is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides object.Equals(object) See Also IMappingSource | Improve this Doc View Source GetChildMappings(Type) Gets the child mappings. Declaration public IEnumerable<IMapping> GetChildMappings(Type objectType) Parameters Type Name Description Type objectType Type of the object. Returns Type Description IEnumerable<IMapping> The IMapping list associated with the object type. See Also IMappingSource | Improve this Doc View Source GetChildMappings<TObject>() Gets the child mappings. Declaration public IEnumerable<IMapping> GetChildMappings<TObject>() Returns Type Description IEnumerable<IMapping> The IMapping list associated with the object type. Type Parameters Name Description TObject The type of the object. See Also IMappingSource | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides object.GetHashCode() See Also IMappingSource | Improve this Doc View Source GetParentMapping(Type) Gets the parent mappings. Declaration public IEnumerable<IMapping> GetParentMapping(Type objectType) Parameters Type Name Description Type objectType Type of the object. Returns Type Description IEnumerable<IMapping> The IMapping list associated with the object type. See Also IMappingSource | Improve this Doc View Source GetParentMapping<TObject>() Gets the parent mappings. Declaration public IEnumerable<IMapping> GetParentMapping<TObject>() Returns Type Description IEnumerable<IMapping> The IMapping list associated with the object type. Type Parameters Name Description TObject The type of the object. See Also IMappingSource | Improve this Doc View Source ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() See Also IMappingSource Implements IMappingSource See Also IMappingSource"
  },
  "api/Inflatable.ClassMapper.TypeGraph.DiscoverConcreteTypes.html": {
    "href": "api/Inflatable.ClassMapper.TypeGraph.DiscoverConcreteTypes.html",
    "title": "Class DiscoverConcreteTypes | Inflatable API Reference",
    "keywords": "Class DiscoverConcreteTypes Discovers concrete types Inheritance object DiscoverConcreteTypes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.ClassMapper.TypeGraph Assembly: Inflatable.dll Syntax public static class DiscoverConcreteTypes Methods | Improve this Doc View Source FindConcreteTypes(IDictionary<Type, Tree<Type>?>) Find concrete types Declaration public static Type[] FindConcreteTypes(IDictionary<Type, Tree<Type>?> typeTrees) Parameters Type Name Description IDictionary<Type, Tree<Type>> typeTrees Returns Type Description Type[] The concrete types of the mapping tree"
  },
  "api/Inflatable.ClassMapper.TypeGraph.Generator.html": {
    "href": "api/Inflatable.ClassMapper.TypeGraph.Generator.html",
    "title": "Class Generator | Inflatable API Reference",
    "keywords": "Class Generator Type graph generator Inheritance object Generator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.ClassMapper.TypeGraph Assembly: Inflatable.dll Syntax public static class Generator Methods | Improve this Doc View Source Generate(Type, Dictionary<Type, IMapping>) Generates the specified mapping type. Declaration public static Tree<Type>? Generate(Type mappingType, Dictionary<Type, IMapping> mappings) Parameters Type Name Description Type mappingType Type of the mapping. Dictionary<Type, IMapping> mappings The mappings. Returns Type Description Tree<Type> The type graph associated with the type."
  },
  "api/Inflatable.ClassMapper.TypeGraph.MergeMapping.html": {
    "href": "api/Inflatable.ClassMapper.TypeGraph.MergeMapping.html",
    "title": "Class MergeMapping | Inflatable API Reference",
    "keywords": "Class MergeMapping Merge mappings as needed Inheritance object MergeMapping Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.ClassMapper.TypeGraph Assembly: Inflatable.dll Syntax public static class MergeMapping Methods | Improve this Doc View Source Merge(Tree<Type>?, Dictionary<Type, IMapping>, ILogger) Merges this instance. Declaration public static void Merge(Tree<Type>? typeGraph, Dictionary<Type, IMapping> mappings, ILogger logger) Parameters Type Name Description Tree<Type> typeGraph The type graph. Dictionary<Type, IMapping> mappings The mappings. ILogger logger The logger."
  },
  "api/Inflatable.ClassMapper.TypeGraph.ReduceMapping.html": {
    "href": "api/Inflatable.ClassMapper.TypeGraph.ReduceMapping.html",
    "title": "Class ReduceMapping | Inflatable API Reference",
    "keywords": "Class ReduceMapping Reduces mappings and removes redundant items Inheritance object ReduceMapping Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.ClassMapper.TypeGraph Assembly: Inflatable.dll Syntax public static class ReduceMapping Methods | Improve this Doc View Source Reduce(Tree<Type>?, Dictionary<Type, IMapping>, ILogger) Reduces the mapping Declaration public static void Reduce(Tree<Type>? typeGraph, Dictionary<Type, IMapping> mappings, ILogger logger) Parameters Type Name Description Tree<Type> typeGraph The type graph. Dictionary<Type, IMapping> mappings The mappings. ILogger logger The logger."
  },
  "api/Inflatable.ClassMapper.TypeGraph.html": {
    "href": "api/Inflatable.ClassMapper.TypeGraph.html",
    "title": "Namespace Inflatable.ClassMapper.TypeGraph | Inflatable API Reference",
    "keywords": "Namespace Inflatable.ClassMapper.TypeGraph Classes DiscoverConcreteTypes Discovers concrete types Generator Type graph generator MergeMapping Merge mappings as needed ReduceMapping Reduces mappings and removes redundant items"
  },
  "api/Inflatable.ClassMapper.html": {
    "href": "api/Inflatable.ClassMapper.html",
    "title": "Namespace Inflatable.ClassMapper | Inflatable API Reference",
    "keywords": "Namespace Inflatable.ClassMapper Classes MappingManager Mapping manager MappingSource Mapping source Interfaces IMappingSource Mapping source interface"
  },
  "api/Inflatable.DataSource.Options.html": {
    "href": "api/Inflatable.DataSource.Options.html",
    "title": "Class Options | Inflatable API Reference",
    "keywords": "Class Options Data source options Inheritance object Options Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.DataSource Assembly: Inflatable.dll Syntax public class Options Properties | Improve this Doc View Source Access Gets the access level for the source. Declaration public SourceAccess Access { get; set; } Property Value Type Description SourceAccess The access level for the source. | Improve this Doc View Source Analysis The level the system should update/generate analysis for you. Declaration public SchemaAnalysis Analysis { get; set; } Property Value Type Description SchemaAnalysis The level the system should update/generate analysis for you. | Improve this Doc View Source Audit Determines if audit tables are generated Declaration public bool Audit { get; set; } Property Value Type Description bool true if audit; otherwise, false. | Improve this Doc View Source Optimize Gets a value indicating whether this source should be optimized automatically. Declaration public bool Optimize { get; set; } Property Value Type Description bool true if it should be optimized; otherwise, false. | Improve this Doc View Source SchemaUpdate The level the system should update/generate schema changes for you. Declaration public SchemaGeneration SchemaUpdate { get; set; } Property Value Type Description SchemaGeneration The level the system should update/generate schema changes for you."
  },
  "api/Inflatable.DataSource.html": {
    "href": "api/Inflatable.DataSource.html",
    "title": "Namespace Inflatable.DataSource | Inflatable API Reference",
    "keywords": "Namespace Inflatable.DataSource Classes Options Data source options"
  },
  "api/Inflatable.DbContext-1.html": {
    "href": "api/Inflatable.DbContext-1.html",
    "title": "Class DbContext<TObject> | Inflatable API Reference",
    "keywords": "Class DbContext<TObject> Db context Inheritance object QueryProviderBase DbContext<TObject> Implements IQueryProvider Inherited Members QueryProviderBase.CreateQuery<TElement>(Expression) QueryProviderBase.CreateQuery(Expression) QueryProviderBase.Execute<TElement>(Expression) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable Assembly: Inflatable.dll Syntax public class DbContext<TObject> : QueryProviderBase, IQueryProvider where TObject : class Type Parameters Name Description TObject The type of the object. Methods | Improve this Doc View Source CreateQuery() Creates a query. Declaration public static IQueryable<TObject> CreateQuery() Returns Type Description IQueryable<TObject> The resulting query. See Also QueryProviderBase | Improve this Doc View Source Execute(Expression) Executes the query represented by a specified expression tree. Declaration public override object? Execute(Expression expression) Parameters Type Name Description Expression expression An expression tree that represents a LINQ query. Returns Type Description object The value that results from executing the specified query. Overrides QueryProviderBase.Execute(Expression) See Also QueryProviderBase | Improve this Doc View Source ExecuteAsync(string, CommandType, string, params object[]) Executes the query asynchronously. Declaration public static Task<IEnumerable<TObject>> ExecuteAsync(string command, CommandType type, string connection, params object[] parameters) Parameters Type Name Description string command The command. CommandType type The type. string connection The connection. object[] parameters The parameters. Returns Type Description Task<IEnumerable<TObject>> The list of objects returned by the query. See Also QueryProviderBase | Improve this Doc View Source ExecuteScalarAsync(string, CommandType, string, params object[]) Executes the query getting a scalar asynchronously. Declaration public static Task<TObject> ExecuteScalarAsync(string command, CommandType type, string connection, params object[] parameters) Parameters Type Name Description string command The command. CommandType type The type. string connection The connection. object[] parameters The parameters. Returns Type Description Task<TObject> The first object returned by the query. See Also QueryProviderBase | Improve this Doc View Source GetQueryText(Expression) Gets the query text. Declaration public override string GetQueryText(Expression expression) Parameters Type Name Description Expression expression The expression. Returns Type Description string The query as a string Overrides QueryProviderBase.GetQueryText(Expression) See Also QueryProviderBase Implements IQueryProvider See Also QueryProviderBase"
  },
  "api/Inflatable.DbContext.html": {
    "href": "api/Inflatable.DbContext.html",
    "title": "Class DbContext | Inflatable API Reference",
    "keywords": "Class DbContext Db Context Inheritance object DbContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable Assembly: Inflatable.dll Syntax public class DbContext Constructors | Improve this Doc View Source DbContext() Initializes a new instance of the DbContext class. Declaration public DbContext() | Improve this Doc View Source DbContext(ISession?) Initializes a new instance of the DbContext class. Declaration public DbContext(ISession? internalSession) Parameters Type Name Description ISession internalSession The internal session. Methods | Improve this Doc View Source Delete<TObject>(params TObject[]) Adds a delete command. Declaration public DbContext Delete<TObject>(params TObject[] objectsToDelete) where TObject : class Parameters Type Name Description TObject[] objectsToDelete The objects to delete. Returns Type Description DbContext This Type Parameters Name Description TObject The type of the object. | Improve this Doc View Source ExecuteAsync() Executes the various save and delete commands asynchronous. Declaration public Task<int> ExecuteAsync() Returns Type Description Task<int> The number of rows modified or the first ID if inserting new items. | Improve this Doc View Source ExecuteAsync(string, CommandType, string, params object[]) Executes the query asynchronously. Declaration public static Task<IEnumerable<dynamic>> ExecuteAsync(string command, CommandType type, string connection, params object[] parameters) Parameters Type Name Description string command The command. CommandType type The type. string connection The connection. object[] parameters The parameters. Returns Type Description Task<IEnumerable<dynamic>> The list of objects returned by the query | Improve this Doc View Source Save<TObject>(params TObject[]) Adds a save command. Declaration public DbContext Save<TObject>(params TObject[] objectsToSave) where TObject : class Parameters Type Name Description TObject[] objectsToSave The objects to save. Returns Type Description DbContext This Type Parameters Name Description TObject The type of the object."
  },
  "api/Inflatable.Enums.SchemaAnalysis.html": {
    "href": "api/Inflatable.Enums.SchemaAnalysis.html",
    "title": "Enum SchemaAnalysis | Inflatable API Reference",
    "keywords": "Enum SchemaAnalysis Schema analysis enum Namespace: Inflatable.Enums Assembly: Inflatable.dll Syntax public enum SchemaAnalysis Fields Name Description ApplyAnalysis Automatically apply analysis found GenerateAnalysis Generate analysis for the source NoAnalysis Do not analyze"
  },
  "api/Inflatable.Enums.SchemaGeneration.html": {
    "href": "api/Inflatable.Enums.SchemaGeneration.html",
    "title": "Enum SchemaGeneration | Inflatable API Reference",
    "keywords": "Enum SchemaGeneration Schema generation enum Namespace: Inflatable.Enums Assembly: Inflatable.dll Syntax public enum SchemaGeneration Fields Name Description GenerateSchemaChanges Generate schema changes only. NoGeneration Do not update or generate schema changes. UpdateSchema Update the schema of the source"
  },
  "api/Inflatable.Enums.SourceAccess.html": {
    "href": "api/Inflatable.Enums.SourceAccess.html",
    "title": "Enum SourceAccess | Inflatable API Reference",
    "keywords": "Enum SourceAccess Source access Namespace: Inflatable.Enums Assembly: Inflatable.dll Syntax [Flags] public enum SourceAccess Fields Name Description None No access Read Read access Write Write access"
  },
  "api/Inflatable.Enums.html": {
    "href": "api/Inflatable.Enums.html",
    "title": "Namespace Inflatable.Enums | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Enums Enums SchemaAnalysis Schema analysis enum SchemaGeneration Schema generation enum SourceAccess Source access"
  },
  "api/Inflatable.Interfaces.IDatabase.html": {
    "href": "api/Inflatable.Interfaces.IDatabase.html",
    "title": "Interface IDatabase | Inflatable API Reference",
    "keywords": "Interface IDatabase Database configuration interface Namespace: Inflatable.Interfaces Assembly: Inflatable.dll Syntax public interface IDatabase Properties | Improve this Doc View Source Name Name associated with the database/connection string Declaration string Name { get; } Property Value Type Description string The name. | Improve this Doc View Source Order Order that this database should be in (if only one database is being used, it is ignored) Declaration int Order { get; } Property Value Type Description int The order. | Improve this Doc View Source Provider Gets the provider. Declaration DbProviderFactory Provider { get; } Property Value Type Description DbProviderFactory The provider. | Improve this Doc View Source SourceOptions Gets the source options. Declaration Options SourceOptions { get; } Property Value Type Description Options The source options."
  },
  "api/Inflatable.Interfaces.IMapping-1.html": {
    "href": "api/Inflatable.Interfaces.IMapping-1.html",
    "title": "Interface IMapping<TClassType> | Inflatable API Reference",
    "keywords": "Interface IMapping<TClassType> Class mapping interface Inherited Members IMapping.AutoIDProperties IMapping.DatabaseConfigType IMapping.IDProperties IMapping.ManyToManyProperties IMapping.ManyToOneProperties IMapping.MapProperties IMapping.Merge IMapping.ObjectType IMapping.Order IMapping.Prefix IMapping.Queries IMapping.ReferenceProperties IMapping.SchemaName IMapping.Suffix IMapping.TableName IMapping.AddAutoKey() IMapping.ContainsProperty(string) IMapping.Copy(IMapping) IMapping.CopyProperty(IIDProperty) IMapping.CopyProperty(IProperty) IMapping.CopyProperty(IMapProperty) IMapping.CopyProperty(IManyToOneProperty) IMapping.CopyProperty(IManyToManyProperty) IMapping.GetColumnName(string) IMapping.Reduce(ILogger) IMapping.Reduce(IMapping, ILogger) IMapping.SetQuery(QueryType, string, CommandType, params IParameter[]) IMapping.Setup() Namespace: Inflatable.Interfaces Assembly: Inflatable.dll Syntax public interface IMapping<TClassType> : IMapping where TClassType : class Type Parameters Name Description TClassType Class type Methods | Improve this Doc View Source ID<TDataType>(Expression<Func<TClassType, TDataType>>) Declares a property as an ID Declaration ID<TClassType, TDataType> ID<TDataType>(Expression<Func<TClassType, TDataType>> expression) Parameters Type Name Description Expression<Func<TClassType, TDataType>> expression Expression pointing to the property Returns Type Description ID<TClassType, TDataType> the ID object Type Parameters Name Description TDataType Data type See Also IMapping | Improve this Doc View Source ManyToMany<TDataType>(Expression<Func<TClassType, IList<TDataType>>>) Sets a property as a many to many type. Declaration ManyToMany<TClassType, TDataType> ManyToMany<TDataType>(Expression<Func<TClassType, IList<TDataType>>> expression) where TDataType : class Parameters Type Name Description Expression<Func<TClassType, IList<TDataType>>> expression Expression pointing to the property Returns Type Description ManyToMany<TClassType, TDataType> The many to many object Type Parameters Name Description TDataType The type of the ata type. See Also IMapping | Improve this Doc View Source ManyToOne<TDataType>(Expression<Func<TClassType, IList<TDataType>>>) Sets a property as a many to one type. Declaration ManyToOneMany<TClassType, TDataType> ManyToOne<TDataType>(Expression<Func<TClassType, IList<TDataType>>> expression) where TDataType : class Parameters Type Name Description Expression<Func<TClassType, IList<TDataType>>> expression Expression pointing to the property Returns Type Description ManyToOneMany<TClassType, TDataType> The many to many object Type Parameters Name Description TDataType The type of the data type. See Also IMapping | Improve this Doc View Source ManyToOne<TDataType>(Expression<Func<TClassType, TDataType?>>) Sets a property as a many to one type. Declaration ManyToOneSingle<TClassType, TDataType> ManyToOne<TDataType>(Expression<Func<TClassType, TDataType?>> expression) where TDataType : class Parameters Type Name Description Expression<Func<TClassType, TDataType>> expression Expression pointing to the property Returns Type Description ManyToOneSingle<TClassType, TDataType> The many to many object Type Parameters Name Description TDataType The type of the data type. See Also IMapping | Improve this Doc View Source Map<TDataType>(Expression<Func<TClassType, TDataType?>>) Sets a property as a map type. Declaration Map<TClassType, TDataType> Map<TDataType>(Expression<Func<TClassType, TDataType?>> expression) where TDataType : class Parameters Type Name Description Expression<Func<TClassType, TDataType>> expression Expression pointing to the property Returns Type Description Map<TClassType, TDataType> The map object Type Parameters Name Description TDataType The type of the data type. See Also IMapping | Improve this Doc View Source Reference<TDataType>(Expression<Func<TClassType, TDataType>>) Sets a property as a reference type Declaration Reference<TClassType, TDataType> Reference<TDataType>(Expression<Func<TClassType, TDataType>> expression) Parameters Type Name Description Expression<Func<TClassType, TDataType>> expression Expression pointing to the property Returns Type Description Reference<TClassType, TDataType> the reference object Type Parameters Name Description TDataType Data type See Also IMapping See Also IMapping"
  },
  "api/Inflatable.Interfaces.IMapping.html": {
    "href": "api/Inflatable.Interfaces.IMapping.html",
    "title": "Interface IMapping | Inflatable API Reference",
    "keywords": "Interface IMapping Mapping interface Namespace: Inflatable.Interfaces Assembly: Inflatable.dll Syntax public interface IMapping Properties | Improve this Doc View Source AutoIDProperties Gets the automatic identifier properties. Declaration List<IAutoIDProperty> AutoIDProperties { get; } Property Value Type Description List<IAutoIDProperty> The automatic identifier properties. | Improve this Doc View Source DatabaseConfigType Gets the type of the database configuration. Declaration Type DatabaseConfigType { get; } Property Value Type Description Type The type of the database configuration. | Improve this Doc View Source IDProperties ID properties Declaration List<IIDProperty> IDProperties { get; } Property Value Type Description List<IIDProperty> The identifier properties. | Improve this Doc View Source ManyToManyProperties Gets the many to many properties. Declaration List<IManyToManyProperty> ManyToManyProperties { get; } Property Value Type Description List<IManyToManyProperty> The many to many properties. | Improve this Doc View Source ManyToOneProperties Gets the many to many properties. Declaration List<IManyToOneProperty> ManyToOneProperties { get; } Property Value Type Description List<IManyToOneProperty> The many to many properties. | Improve this Doc View Source MapProperties Gets the map properties. Declaration List<IMapProperty> MapProperties { get; } Property Value Type Description List<IMapProperty> The map properties. | Improve this Doc View Source Merge Gets a value indicating whether this IMapping should be merged. Declaration bool Merge { get; } Property Value Type Description bool true if merge this instance; otherwise, false. | Improve this Doc View Source ObjectType The object type associated with the mapping Declaration Type ObjectType { get; } Property Value Type Description Type The type of the object. | Improve this Doc View Source Order Order that the mappings are initialized Declaration int Order { get; } Property Value Type Description int The order. | Improve this Doc View Source Prefix Prefix used for defining properties/table name Declaration string Prefix { get; } Property Value Type Description string The prefix. | Improve this Doc View Source Queries Gets the queries. Declaration IQueries Queries { get; } Property Value Type Description IQueries The queries. | Improve this Doc View Source ReferenceProperties Reference Properties list Declaration List<IProperty> ReferenceProperties { get; } Property Value Type Description List<IProperty> The reference properties. | Improve this Doc View Source SchemaName Gets the name of the schema. Declaration string SchemaName { get; } Property Value Type Description string The name of the schema. | Improve this Doc View Source Suffix Suffix used for defining properties/table name Declaration string Suffix { get; } Property Value Type Description string The suffix. | Improve this Doc View Source TableName Table name Declaration string TableName { get; } Property Value Type Description string The name of the table. Methods | Improve this Doc View Source AddAutoKey() Adds an automatic key. Declaration void AddAutoKey() | Improve this Doc View Source ContainsProperty(string) Determines whether the mapping contains a property. Declaration bool ContainsProperty(string propertyName) Parameters Type Name Description string propertyName Name of the property. Returns Type Description bool true if the mapping contains the specified property; otherwise, false. | Improve this Doc View Source Copy(IMapping) Copies the specified mapping. Declaration void Copy(IMapping mapping) Parameters Type Name Description IMapping mapping The mapping. | Improve this Doc View Source CopyProperty(IIDProperty) Copies the property. Declaration void CopyProperty(IIDProperty prop) Parameters Type Name Description IIDProperty prop The property. | Improve this Doc View Source CopyProperty(IManyToManyProperty) Copies the property. Declaration void CopyProperty(IManyToManyProperty prop) Parameters Type Name Description IManyToManyProperty prop The property. | Improve this Doc View Source CopyProperty(IManyToOneProperty) Copies the property. Declaration void CopyProperty(IManyToOneProperty prop) Parameters Type Name Description IManyToOneProperty prop The property. | Improve this Doc View Source CopyProperty(IMapProperty) Copies the property. Declaration void CopyProperty(IMapProperty prop) Parameters Type Name Description IMapProperty prop The property. | Improve this Doc View Source CopyProperty(IProperty) Copies the property. Declaration void CopyProperty(IProperty prop) Parameters Type Name Description IProperty prop The property. | Improve this Doc View Source GetColumnName(string) Gets the name of the column based on property name. Declaration string GetColumnName(string propertyName) Parameters Type Name Description string propertyName Name of the property. Returns Type Description string The column name. | Improve this Doc View Source Reduce(IMapping, ILogger) Reduces this instance based on parent mapping properties. Declaration void Reduce(IMapping parentMapping, ILogger logger) Parameters Type Name Description IMapping parentMapping The parent mapping. ILogger logger The logger. | Improve this Doc View Source Reduce(ILogger) Reduces this instance and removes duplicate properties Declaration void Reduce(ILogger logger) Parameters Type Name Description ILogger logger The logger. | Improve this Doc View Source SetQuery(QueryType, string, CommandType, params IParameter[]) Sets the default query based on query type Declaration IMapping SetQuery(QueryType queryType, string queryString, CommandType databaseCommandType, params IParameter[] parameters) Parameters Type Name Description QueryType queryType Type of the query. string queryString The query string. CommandType databaseCommandType Type of the database command. IParameter[] parameters The parameters. Returns Type Description IMapping This | Improve this Doc View Source Setup() Sets up the mapping Declaration void Setup()"
  },
  "api/Inflatable.Interfaces.IObject-1.html": {
    "href": "api/Inflatable.Interfaces.IObject-1.html",
    "title": "Interface IObject<IDType> | Inflatable API Reference",
    "keywords": "Interface IObject<IDType> Object interface Namespace: Inflatable.Interfaces Assembly: Inflatable.dll Syntax public interface IObject<IDType> Type Parameters Name Description IDType The type of the d type. Properties | Improve this Doc View Source Active Is this item active? Declaration bool Active { get; set; } Property Value Type Description bool | Improve this Doc View Source DateCreated Date created Declaration [Required] [Between(\"1/1/1900\", \"1/1/2100\", \"Date created is not valid\")] DateTime DateCreated { get; set; } Property Value Type Description DateTime | Improve this Doc View Source DateModified Date last modified Declaration [Required] [Between(\"1/1/1900\", \"1/1/2100\", \"Date modified is not valid\")] DateTime DateModified { get; set; } Property Value Type Description DateTime | Improve this Doc View Source ID ID Declaration IDType ID { get; set; } Property Value Type Description IDType"
  },
  "api/Inflatable.Interfaces.html": {
    "href": "api/Inflatable.Interfaces.html",
    "title": "Namespace Inflatable.Interfaces | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Interfaces Interfaces IDatabase Database configuration interface IMapping Mapping interface IMapping<TClassType> Class mapping interface IObject<IDType> Object interface"
  },
  "api/Inflatable.LinqExpression.HelperClasses.Evaluator.html": {
    "href": "api/Inflatable.LinqExpression.HelperClasses.Evaluator.html",
    "title": "Class Evaluator | Inflatable API Reference",
    "keywords": "Class Evaluator Evaluator static class Inheritance object Evaluator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.LinqExpression.HelperClasses Assembly: Inflatable.dll Syntax public static class Evaluator Methods | Improve this Doc View Source PartialEval(Expression) Partial the eval. Declaration public static Expression PartialEval(Expression expression) Parameters Type Name Description Expression expression The expression. Returns Type Description Expression The resulting expression | Improve this Doc View Source PartialEval(Expression, Func<Expression, bool>) Partial eval. Declaration public static Expression PartialEval(Expression expression, Func<Expression, bool> fnCanBeEvaluated) Parameters Type Name Description Expression expression The expression. Func<Expression, bool> fnCanBeEvaluated The function can be evaluated. Returns Type Description Expression The resulting expression"
  },
  "api/Inflatable.LinqExpression.HelperClasses.Nominator.html": {
    "href": "api/Inflatable.LinqExpression.HelperClasses.Nominator.html",
    "title": "Class Nominator | Inflatable API Reference",
    "keywords": "Class Nominator Nominator expression visitor Inheritance object ExpressionVisitor Nominator Inherited Members ExpressionVisitor.Visit(ReadOnlyCollection<Expression>) ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string) ExpressionVisitor.VisitAndConvert<T>(T, string) ExpressionVisitor.VisitBinary(BinaryExpression) ExpressionVisitor.VisitBlock(BlockExpression) ExpressionVisitor.VisitCatchBlock(CatchBlock) ExpressionVisitor.VisitConditional(ConditionalExpression) ExpressionVisitor.VisitConstant(ConstantExpression) ExpressionVisitor.VisitDebugInfo(DebugInfoExpression) ExpressionVisitor.VisitDefault(DefaultExpression) ExpressionVisitor.VisitDynamic(DynamicExpression) ExpressionVisitor.VisitElementInit(ElementInit) ExpressionVisitor.VisitExtension(Expression) ExpressionVisitor.VisitGoto(GotoExpression) ExpressionVisitor.VisitIndex(IndexExpression) ExpressionVisitor.VisitInvocation(InvocationExpression) ExpressionVisitor.VisitLabel(LabelExpression) ExpressionVisitor.VisitLabelTarget(LabelTarget) ExpressionVisitor.VisitLambda<T>(Expression<T>) ExpressionVisitor.VisitListInit(ListInitExpression) ExpressionVisitor.VisitLoop(LoopExpression) ExpressionVisitor.VisitMember(MemberExpression) ExpressionVisitor.VisitMemberAssignment(MemberAssignment) ExpressionVisitor.VisitMemberBinding(MemberBinding) ExpressionVisitor.VisitMemberInit(MemberInitExpression) ExpressionVisitor.VisitMemberListBinding(MemberListBinding) ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding) ExpressionVisitor.VisitMethodCall(MethodCallExpression) ExpressionVisitor.VisitNew(NewExpression) ExpressionVisitor.VisitNewArray(NewArrayExpression) ExpressionVisitor.VisitParameter(ParameterExpression) ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression) ExpressionVisitor.VisitSwitch(SwitchExpression) ExpressionVisitor.VisitSwitchCase(SwitchCase) ExpressionVisitor.VisitTry(TryExpression) ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression) ExpressionVisitor.VisitUnary(UnaryExpression) ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.LinqExpression.HelperClasses Assembly: Inflatable.dll Syntax public class Nominator : ExpressionVisitor Constructors | Improve this Doc View Source Nominator(Func<Expression, bool>) Initializes a new instance of the Nominator class. Declaration public Nominator(Func<Expression, bool> functionCanBeEvaluated) Parameters Type Name Description Func<Expression, bool> functionCanBeEvaluated The function can be evaluated. See Also ExpressionVisitor Methods | Improve this Doc View Source Nominate(Expression) Nominates the specified expression. Declaration public HashSet<Expression> Nominate(Expression expression) Parameters Type Name Description Expression expression The expression. Returns Type Description HashSet<Expression> The result See Also ExpressionVisitor | Improve this Doc View Source Visit(Expression) Dispatches the expression to one of the more specialized visit methods in this class. Declaration public override Expression Visit(Expression node) Parameters Type Name Description Expression node The expression to visit. Returns Type Description Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. Overrides ExpressionVisitor.Visit(Expression) See Also ExpressionVisitor See Also ExpressionVisitor"
  },
  "api/Inflatable.LinqExpression.HelperClasses.SubtreeEvaluator.html": {
    "href": "api/Inflatable.LinqExpression.HelperClasses.SubtreeEvaluator.html",
    "title": "Class SubtreeEvaluator | Inflatable API Reference",
    "keywords": "Class SubtreeEvaluator Subtree evaluator Inheritance object ExpressionVisitor SubtreeEvaluator Inherited Members ExpressionVisitor.Visit(ReadOnlyCollection<Expression>) ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string) ExpressionVisitor.VisitAndConvert<T>(T, string) ExpressionVisitor.VisitBinary(BinaryExpression) ExpressionVisitor.VisitBlock(BlockExpression) ExpressionVisitor.VisitCatchBlock(CatchBlock) ExpressionVisitor.VisitConditional(ConditionalExpression) ExpressionVisitor.VisitConstant(ConstantExpression) ExpressionVisitor.VisitDebugInfo(DebugInfoExpression) ExpressionVisitor.VisitDefault(DefaultExpression) ExpressionVisitor.VisitDynamic(DynamicExpression) ExpressionVisitor.VisitElementInit(ElementInit) ExpressionVisitor.VisitExtension(Expression) ExpressionVisitor.VisitGoto(GotoExpression) ExpressionVisitor.VisitIndex(IndexExpression) ExpressionVisitor.VisitInvocation(InvocationExpression) ExpressionVisitor.VisitLabel(LabelExpression) ExpressionVisitor.VisitLabelTarget(LabelTarget) ExpressionVisitor.VisitLambda<T>(Expression<T>) ExpressionVisitor.VisitListInit(ListInitExpression) ExpressionVisitor.VisitLoop(LoopExpression) ExpressionVisitor.VisitMember(MemberExpression) ExpressionVisitor.VisitMemberAssignment(MemberAssignment) ExpressionVisitor.VisitMemberBinding(MemberBinding) ExpressionVisitor.VisitMemberInit(MemberInitExpression) ExpressionVisitor.VisitMemberListBinding(MemberListBinding) ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding) ExpressionVisitor.VisitMethodCall(MethodCallExpression) ExpressionVisitor.VisitNew(NewExpression) ExpressionVisitor.VisitNewArray(NewArrayExpression) ExpressionVisitor.VisitParameter(ParameterExpression) ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression) ExpressionVisitor.VisitSwitch(SwitchExpression) ExpressionVisitor.VisitSwitchCase(SwitchCase) ExpressionVisitor.VisitTry(TryExpression) ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression) ExpressionVisitor.VisitUnary(UnaryExpression) ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.LinqExpression.HelperClasses Assembly: Inflatable.dll Syntax public class SubtreeEvaluator : ExpressionVisitor Constructors | Improve this Doc View Source SubtreeEvaluator(HashSet<Expression>) Initializes a new instance of the SubtreeEvaluator class. Declaration public SubtreeEvaluator(HashSet<Expression> candidates) Parameters Type Name Description HashSet<Expression> candidates The candidates. See Also ExpressionVisitor Methods | Improve this Doc View Source Eval(Expression) Evals the specified exp. Declaration public Expression Eval(Expression expression) Parameters Type Name Description Expression expression The exp. Returns Type Description Expression The resulting expression. See Also ExpressionVisitor | Improve this Doc View Source Visit(Expression) Dispatches the expression to one of the more specialized visit methods in this class. Declaration public override Expression Visit(Expression node) Parameters Type Name Description Expression node The expression to visit. Returns Type Description Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. Overrides ExpressionVisitor.Visit(Expression) See Also ExpressionVisitor See Also ExpressionVisitor"
  },
  "api/Inflatable.LinqExpression.HelperClasses.html": {
    "href": "api/Inflatable.LinqExpression.HelperClasses.html",
    "title": "Namespace Inflatable.LinqExpression.HelperClasses | Inflatable API Reference",
    "keywords": "Namespace Inflatable.LinqExpression.HelperClasses Classes Evaluator Evaluator static class Nominator Nominator expression visitor SubtreeEvaluator Subtree evaluator"
  },
  "api/Inflatable.LinqExpression.Interfaces.IQueryData.html": {
    "href": "api/Inflatable.LinqExpression.Interfaces.IQueryData.html",
    "title": "Interface IQueryData | Inflatable API Reference",
    "keywords": "Interface IQueryData Query data interface Namespace: Inflatable.LinqExpression.Interfaces Assembly: Inflatable.dll Syntax public interface IQueryData"
  },
  "api/Inflatable.LinqExpression.Interfaces.html": {
    "href": "api/Inflatable.LinqExpression.Interfaces.html",
    "title": "Namespace Inflatable.LinqExpression.Interfaces | Inflatable API Reference",
    "keywords": "Namespace Inflatable.LinqExpression.Interfaces Interfaces IQueryData Query data interface"
  },
  "api/Inflatable.LinqExpression.OrderBy.Enums.Direction.html": {
    "href": "api/Inflatable.LinqExpression.OrderBy.Enums.Direction.html",
    "title": "Enum Direction | Inflatable API Reference",
    "keywords": "Enum Direction Direction of the ordering Namespace: Inflatable.LinqExpression.OrderBy.Enums Assembly: Inflatable.dll Syntax public enum Direction Fields Name Description Ascending The ascending Descending The descending"
  },
  "api/Inflatable.LinqExpression.OrderBy.Enums.html": {
    "href": "api/Inflatable.LinqExpression.OrderBy.Enums.html",
    "title": "Namespace Inflatable.LinqExpression.OrderBy.Enums | Inflatable API Reference",
    "keywords": "Namespace Inflatable.LinqExpression.OrderBy.Enums Enums Direction Direction of the ordering"
  },
  "api/Inflatable.LinqExpression.OrderBy.OrderByClause.html": {
    "href": "api/Inflatable.LinqExpression.OrderBy.OrderByClause.html",
    "title": "Class OrderByClause | Inflatable API Reference",
    "keywords": "Class OrderByClause Order by clause Inheritance object OrderByClause Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Inflatable.LinqExpression.OrderBy Assembly: Inflatable.dll Syntax public class OrderByClause Constructors | Improve this Doc View Source OrderByClause(int, PropertyInfo, Direction) Initializes a new instance of the OrderByClause class. Declaration public OrderByClause(int order, PropertyInfo property, Direction direction) Parameters Type Name Description int order The order. PropertyInfo property The property. Direction direction The direction. Properties | Improve this Doc View Source Direction Gets the direction. Declaration public Direction Direction { get; } Property Value Type Description Direction The direction. | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. | Improve this Doc View Source Property Gets the property. Declaration public PropertyInfo Property { get; } Property Value Type Description PropertyInfo The property. Methods | Improve this Doc View Source ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString()"
  },
  "api/Inflatable.LinqExpression.OrderBy.html": {
    "href": "api/Inflatable.LinqExpression.OrderBy.html",
    "title": "Namespace Inflatable.LinqExpression.OrderBy | Inflatable API Reference",
    "keywords": "Namespace Inflatable.LinqExpression.OrderBy Classes OrderByClause Order by clause"
  },
  "api/Inflatable.LinqExpression.QueryData-1.html": {
    "href": "api/Inflatable.LinqExpression.QueryData-1.html",
    "title": "Class QueryData<TObject> | Inflatable API Reference",
    "keywords": "Class QueryData<TObject> Query data holder Inheritance object QueryData<TObject> Implements IQueryData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Inflatable.LinqExpression Assembly: Inflatable.dll Syntax public class QueryData<TObject> : IQueryData where TObject : class Type Parameters Name Description TObject The type of the object. Constructors | Improve this Doc View Source QueryData(IMappingSource) Initializes a new instance of the QueryData<TObject> class. Declaration public QueryData(IMappingSource source) Parameters Type Name Description IMappingSource source The source. Exceptions Type Condition ArgumentNullException source Properties | Improve this Doc View Source Count Gets or sets a value indicating whether this QueryData<TObject> is count. Declaration public bool Count { get; set; } Property Value Type Description bool true if count; otherwise, false. | Improve this Doc View Source Distinct Gets or sets a value indicating whether this QueryData<TObject> is distinct. Declaration public bool Distinct { get; set; } Property Value Type Description bool true if distinct; otherwise, false. | Improve this Doc View Source ObjectType Gets the type of the object. Declaration public Type ObjectType { get; } Property Value Type Description Type The type of the object. | Improve this Doc View Source OrderByValues Gets the order by values. Declaration public IList<OrderByClause> OrderByValues { get; } Property Value Type Description IList<OrderByClause> The order by values. | Improve this Doc View Source Parameters Gets the parameters. Declaration public IList<IParameter> Parameters { get; } Property Value Type Description IList<IParameter> The parameters. | Improve this Doc View Source SelectValues Gets the select values. Declaration public IList<PropertyInfo> SelectValues { get; } Property Value Type Description IList<PropertyInfo> The select values. | Improve this Doc View Source Skip Gets or sets the skip. Declaration public int Skip { get; set; } Property Value Type Description int The skip. | Improve this Doc View Source Source Gets the source. Declaration public IMappingSource Source { get; } Property Value Type Description IMappingSource The source. | Improve this Doc View Source Top Gets or sets the top. Declaration public int Top { get; set; } Property Value Type Description int The top. | Improve this Doc View Source WhereClause Gets the where clause. Declaration public WhereClause<TObject> WhereClause { get; } Property Value Type Description WhereClause<TObject> The where clause. Methods | Improve this Doc View Source ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() Implements IQueryData"
  },
  "api/Inflatable.LinqExpression.QueryTranslator-1.html": {
    "href": "api/Inflatable.LinqExpression.QueryTranslator-1.html",
    "title": "Class QueryTranslator<TObject> | Inflatable API Reference",
    "keywords": "Class QueryTranslator<TObject> Query translator Inheritance object ExpressionVisitor QueryTranslator<TObject> Inherited Members ExpressionVisitor.Visit(ReadOnlyCollection<Expression>) ExpressionVisitor.Visit(Expression) ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string) ExpressionVisitor.VisitAndConvert<T>(T, string) ExpressionVisitor.VisitBinary(BinaryExpression) ExpressionVisitor.VisitBlock(BlockExpression) ExpressionVisitor.VisitCatchBlock(CatchBlock) ExpressionVisitor.VisitConditional(ConditionalExpression) ExpressionVisitor.VisitConstant(ConstantExpression) ExpressionVisitor.VisitDebugInfo(DebugInfoExpression) ExpressionVisitor.VisitDefault(DefaultExpression) ExpressionVisitor.VisitDynamic(DynamicExpression) ExpressionVisitor.VisitElementInit(ElementInit) ExpressionVisitor.VisitExtension(Expression) ExpressionVisitor.VisitGoto(GotoExpression) ExpressionVisitor.VisitIndex(IndexExpression) ExpressionVisitor.VisitInvocation(InvocationExpression) ExpressionVisitor.VisitLabel(LabelExpression) ExpressionVisitor.VisitLabelTarget(LabelTarget) ExpressionVisitor.VisitLambda<T>(Expression<T>) ExpressionVisitor.VisitListInit(ListInitExpression) ExpressionVisitor.VisitLoop(LoopExpression) ExpressionVisitor.VisitMember(MemberExpression) ExpressionVisitor.VisitMemberAssignment(MemberAssignment) ExpressionVisitor.VisitMemberBinding(MemberBinding) ExpressionVisitor.VisitMemberInit(MemberInitExpression) ExpressionVisitor.VisitMemberListBinding(MemberListBinding) ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding) ExpressionVisitor.VisitNew(NewExpression) ExpressionVisitor.VisitNewArray(NewArrayExpression) ExpressionVisitor.VisitParameter(ParameterExpression) ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression) ExpressionVisitor.VisitSwitch(SwitchExpression) ExpressionVisitor.VisitSwitchCase(SwitchCase) ExpressionVisitor.VisitTry(TryExpression) ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression) ExpressionVisitor.VisitUnary(UnaryExpression) ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.LinqExpression Assembly: Inflatable.dll Syntax public class QueryTranslator<TObject> : ExpressionVisitor where TObject : class Type Parameters Name Description TObject The type of the object. Constructors | Improve this Doc View Source QueryTranslator(MappingManager, QueryProviderManager) Initializes a new instance of the QueryTranslator<TObject> class. Declaration public QueryTranslator(MappingManager mappingManager, QueryProviderManager queryProviderManager) Parameters Type Name Description MappingManager mappingManager The mapping manager. QueryProviderManager queryProviderManager The query provider manager. Exceptions Type Condition ArgumentNullException mappingManager or queryProviderManager See Also ExpressionVisitor ExpressionVisitor Properties | Improve this Doc View Source MappingManager Gets the mapping manager. Declaration public MappingManager MappingManager { get; } Property Value Type Description MappingManager The mapping manager. See Also ExpressionVisitor ExpressionVisitor | Improve this Doc View Source QueryProviderManager Gets the query provider manager. Declaration public QueryProviderManager QueryProviderManager { get; } Property Value Type Description QueryProviderManager The query provider manager. See Also ExpressionVisitor ExpressionVisitor Methods | Improve this Doc View Source Translate(Expression) Translates the specified expression. Declaration public IDictionary<IMappingSource, QueryData<TObject>> Translate(Expression expression) Parameters Type Name Description Expression expression The expression. Returns Type Description IDictionary<IMappingSource, QueryData<TObject>> The resulting query string. See Also ExpressionVisitor ExpressionVisitor | Improve this Doc View Source VisitMethodCall(MethodCallExpression) Visits the children of the MethodCallExpression. Declaration protected override Expression? VisitMethodCall(MethodCallExpression node) Parameters Type Name Description MethodCallExpression node The expression to visit. Returns Type Description Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. Overrides ExpressionVisitor.VisitMethodCall(MethodCallExpression) Exceptions Type Condition NotSupportedException See Also ExpressionVisitor ExpressionVisitor See Also ExpressionVisitor ExpressionVisitor"
  },
  "api/Inflatable.LinqExpression.Select.ColumnProjector.html": {
    "href": "api/Inflatable.LinqExpression.Select.ColumnProjector.html",
    "title": "Class ColumnProjector | Inflatable API Reference",
    "keywords": "Class ColumnProjector Finds properties from a select statement. Inheritance object ExpressionVisitor ColumnProjector Inherited Members ExpressionVisitor.Visit(ReadOnlyCollection<Expression>) ExpressionVisitor.Visit(Expression) ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string) ExpressionVisitor.VisitAndConvert<T>(T, string) ExpressionVisitor.VisitBinary(BinaryExpression) ExpressionVisitor.VisitBlock(BlockExpression) ExpressionVisitor.VisitCatchBlock(CatchBlock) ExpressionVisitor.VisitConditional(ConditionalExpression) ExpressionVisitor.VisitConstant(ConstantExpression) ExpressionVisitor.VisitDebugInfo(DebugInfoExpression) ExpressionVisitor.VisitDefault(DefaultExpression) ExpressionVisitor.VisitDynamic(DynamicExpression) ExpressionVisitor.VisitElementInit(ElementInit) ExpressionVisitor.VisitExtension(Expression) ExpressionVisitor.VisitGoto(GotoExpression) ExpressionVisitor.VisitIndex(IndexExpression) ExpressionVisitor.VisitInvocation(InvocationExpression) ExpressionVisitor.VisitLabel(LabelExpression) ExpressionVisitor.VisitLabelTarget(LabelTarget) ExpressionVisitor.VisitLambda<T>(Expression<T>) ExpressionVisitor.VisitListInit(ListInitExpression) ExpressionVisitor.VisitLoop(LoopExpression) ExpressionVisitor.VisitMemberAssignment(MemberAssignment) ExpressionVisitor.VisitMemberBinding(MemberBinding) ExpressionVisitor.VisitMemberInit(MemberInitExpression) ExpressionVisitor.VisitMemberListBinding(MemberListBinding) ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding) ExpressionVisitor.VisitMethodCall(MethodCallExpression) ExpressionVisitor.VisitNew(NewExpression) ExpressionVisitor.VisitNewArray(NewArrayExpression) ExpressionVisitor.VisitParameter(ParameterExpression) ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression) ExpressionVisitor.VisitSwitch(SwitchExpression) ExpressionVisitor.VisitSwitchCase(SwitchCase) ExpressionVisitor.VisitTry(TryExpression) ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression) ExpressionVisitor.VisitUnary(UnaryExpression) ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.LinqExpression.Select Assembly: Inflatable.dll Syntax public class ColumnProjector : ExpressionVisitor Constructors | Improve this Doc View Source ColumnProjector() Initializes a new instance of the ColumnProjector class. Declaration public ColumnProjector() See Also ExpressionVisitor Methods | Improve this Doc View Source ProjectColumns(Expression) Projects the columns to the desired properties. Declaration public IEnumerable<PropertyInfo> ProjectColumns(Expression expression) Parameters Type Name Description Expression expression The expression. Returns Type Description IEnumerable<PropertyInfo> The resulting properties See Also ExpressionVisitor | Improve this Doc View Source VisitMember(MemberExpression) Visits the children of the MemberExpression. Declaration protected override Expression VisitMember(MemberExpression node) Parameters Type Name Description MemberExpression node The expression to visit. Returns Type Description Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. Overrides ExpressionVisitor.VisitMember(MemberExpression) See Also ExpressionVisitor See Also ExpressionVisitor"
  },
  "api/Inflatable.LinqExpression.Select.html": {
    "href": "api/Inflatable.LinqExpression.Select.html",
    "title": "Namespace Inflatable.LinqExpression.Select | Inflatable API Reference",
    "keywords": "Namespace Inflatable.LinqExpression.Select Classes ColumnProjector Finds properties from a select statement."
  },
  "api/Inflatable.LinqExpression.WhereClauses.BinaryOperator.html": {
    "href": "api/Inflatable.LinqExpression.WhereClauses.BinaryOperator.html",
    "title": "Class BinaryOperator | Inflatable API Reference",
    "keywords": "Class BinaryOperator Binary operator class Inheritance object BinaryOperator Implements IOperator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Inflatable.LinqExpression.WhereClauses Assembly: Inflatable.dll Syntax public class BinaryOperator : IOperator Constructors | Improve this Doc View Source BinaryOperator(IOperator, IOperator, ExpressionType) Initializes a new instance of the BinaryOperator class. Declaration public BinaryOperator(IOperator left, IOperator right, ExpressionType operatorType) Parameters Type Name Description IOperator left The left. IOperator right The right. ExpressionType operatorType Type of the operator. Exceptions Type Condition ArgumentNullException left or right See Also IOperator Properties | Improve this Doc View Source IsNull Gets a value indicating whether this instance is null. Declaration public bool IsNull { get; } Property Value Type Description bool true if this instance is null; otherwise, false. See Also IOperator | Improve this Doc View Source Left Gets the left. Declaration public IOperator Left { get; } Property Value Type Description IOperator The left. See Also IOperator | Improve this Doc View Source Operator Gets the operator. Declaration public ExpressionType Operator { get; } Property Value Type Description ExpressionType The operator. See Also IOperator | Improve this Doc View Source Parent Gets or sets the parent. Declaration public IOperator? Parent { get; set; } Property Value Type Description IOperator The parent. See Also IOperator | Improve this Doc View Source Right Gets the right. Declaration public IOperator Right { get; } Property Value Type Description IOperator The right. See Also IOperator | Improve this Doc View Source TypeCode Gets the type code. Declaration public Type TypeCode { get; } Property Value Type Description Type The type code. See Also IOperator Methods | Improve this Doc View Source Copy() Copies this instance. Declaration public IOperator Copy() Returns Type Description IOperator A copy of this instance. See Also IOperator | Improve this Doc View Source GetParameters() Gets the parameters associated with the operator. Declaration public List<IParameter> GetParameters() Returns Type Description List<IParameter> A list of parameters associated with the operator. See Also IOperator | Improve this Doc View Source LogicallyNegate() Does a logical negation of the operator. Declaration public IOperator LogicallyNegate() Returns Type Description IOperator The resulting operator. See Also IOperator | Improve this Doc View Source Optimize(IMappingSource) Optimizes the operator based on the mapping source. Declaration public IOperator Optimize(IMappingSource mappingSource) Parameters Type Name Description IMappingSource mappingSource The mapping source. Returns Type Description IOperator See Also IOperator | Improve this Doc View Source SetColumnNames(IMappingSource, IMapping) Sets the column names. Declaration public void SetColumnNames(IMappingSource mappingSource, IMapping mapping) Parameters Type Name Description IMappingSource mappingSource The mapping source. IMapping mapping The mapping. See Also IOperator | Improve this Doc View Source ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() See Also IOperator Implements IOperator See Also IOperator"
  },
  "api/Inflatable.LinqExpression.WhereClauses.Constant.html": {
    "href": "api/Inflatable.LinqExpression.WhereClauses.Constant.html",
    "title": "Class Constant | Inflatable API Reference",
    "keywords": "Class Constant Constant operator Inheritance object Constant Implements IOperator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Inflatable.LinqExpression.WhereClauses Assembly: Inflatable.dll Syntax public class Constant : IOperator Constructors | Improve this Doc View Source Constant(object, int) Initializes a new instance of the Constant class. Declaration public Constant(object value, int count) Parameters Type Name Description object value The value. int count The count. See Also IOperator Properties | Improve this Doc View Source Count Gets the count. Declaration public int Count { get; } Property Value Type Description int The count. See Also IOperator | Improve this Doc View Source IsNull Gets a value indicating whether this instance is null. Declaration public bool IsNull { get; } Property Value Type Description bool true if this instance is null; otherwise, false. See Also IOperator | Improve this Doc View Source Parent Gets or sets the parent. Declaration public IOperator? Parent { get; set; } Property Value Type Description IOperator The parent. See Also IOperator | Improve this Doc View Source TypeCode Gets the type code. Declaration public Type TypeCode { get; } Property Value Type Description Type The type code. See Also IOperator | Improve this Doc View Source Value Gets the value. Declaration public object Value { get; set; } Property Value Type Description object The value. See Also IOperator Methods | Improve this Doc View Source Copy() Copies this instance. Declaration public IOperator Copy() Returns Type Description IOperator A copy of this instance. See Also IOperator | Improve this Doc View Source GetParameters() Gets the parameters associated with the operator. Declaration public List<IParameter> GetParameters() Returns Type Description List<IParameter> A list of parameters associated with the operator. See Also IOperator | Improve this Doc View Source LogicallyNegate() Does a logical negation of the operator. Declaration public IOperator LogicallyNegate() Returns Type Description IOperator The resulting operator. See Also IOperator | Improve this Doc View Source Optimize(IMappingSource) Optimizes the operator based on the mapping source. Declaration public IOperator Optimize(IMappingSource mappingSource) Parameters Type Name Description IMappingSource mappingSource The mapping source. Returns Type Description IOperator The result See Also IOperator | Improve this Doc View Source SetColumnNames(IMappingSource, IMapping) Sets the column names. Declaration public void SetColumnNames(IMappingSource mappingSource, IMapping mapping) Parameters Type Name Description IMappingSource mappingSource The mapping source. IMapping mapping The mapping. See Also IOperator | Improve this Doc View Source ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() See Also IOperator Implements IOperator See Also IOperator"
  },
  "api/Inflatable.LinqExpression.WhereClauses.EmptyClause.html": {
    "href": "api/Inflatable.LinqExpression.WhereClauses.EmptyClause.html",
    "title": "Class EmptyClause | Inflatable API Reference",
    "keywords": "Class EmptyClause Empty clause Inheritance object EmptyClause Implements IOperator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Inflatable.LinqExpression.WhereClauses Assembly: Inflatable.dll Syntax public class EmptyClause : IOperator Constructors | Improve this Doc View Source EmptyClause() Initializes a new instance of the EmptyClause class. Declaration public EmptyClause() See Also IOperator Properties | Improve this Doc View Source IsNull Gets a value indicating whether this instance is null. Declaration public bool IsNull { get; } Property Value Type Description bool true if this instance is null; otherwise, false. See Also IOperator | Improve this Doc View Source Parent Gets or sets the parent. Declaration public IOperator? Parent { get; set; } Property Value Type Description IOperator The parent. See Also IOperator | Improve this Doc View Source TypeCode Gets the type code. Declaration public Type TypeCode { get; } Property Value Type Description Type The type code. See Also IOperator Methods | Improve this Doc View Source Copy() Copies this instance. Declaration public IOperator Copy() Returns Type Description IOperator A copy of this instance. See Also IOperator | Improve this Doc View Source GetParameters() Gets the parameters associated with the operator. Declaration public List<IParameter> GetParameters() Returns Type Description List<IParameter> A list of parameters associated with the operator. See Also IOperator | Improve this Doc View Source LogicallyNegate() Does a logical negation of the operator. Declaration public IOperator LogicallyNegate() Returns Type Description IOperator The resulting operator. See Also IOperator | Improve this Doc View Source Optimize(IMappingSource) Optimizes the operator based on the mapping source. Declaration public IOperator Optimize(IMappingSource mappingSource) Parameters Type Name Description IMappingSource mappingSource The mapping source. Returns Type Description IOperator See Also IOperator | Improve this Doc View Source SetColumnNames(IMappingSource, IMapping) Sets the column names. Declaration public void SetColumnNames(IMappingSource mappingSource, IMapping mapping) Parameters Type Name Description IMappingSource mappingSource The mapping source. IMapping mapping The mapping. See Also IOperator | Improve this Doc View Source ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() See Also IOperator Implements IOperator See Also IOperator"
  },
  "api/Inflatable.LinqExpression.WhereClauses.Interfaces.IOperator.html": {
    "href": "api/Inflatable.LinqExpression.WhereClauses.Interfaces.IOperator.html",
    "title": "Interface IOperator | Inflatable API Reference",
    "keywords": "Interface IOperator Operator interface Namespace: Inflatable.LinqExpression.WhereClauses.Interfaces Assembly: Inflatable.dll Syntax public interface IOperator Properties | Improve this Doc View Source IsNull Gets a value indicating whether this instance is null. Declaration bool IsNull { get; } Property Value Type Description bool true if this instance is null; otherwise, false. | Improve this Doc View Source Parent Gets or sets the parent. Declaration IOperator? Parent { get; set; } Property Value Type Description IOperator The parent. | Improve this Doc View Source TypeCode Gets the type code. Declaration Type TypeCode { get; } Property Value Type Description Type The type code. Methods | Improve this Doc View Source Copy() Copies this instance. Declaration IOperator Copy() Returns Type Description IOperator A copy of this instance. | Improve this Doc View Source GetParameters() Gets the parameters associated with the operator. Declaration List<IParameter> GetParameters() Returns Type Description List<IParameter> A list of parameters associated with the operator. | Improve this Doc View Source LogicallyNegate() Does a logical negation of the operator. Declaration IOperator LogicallyNegate() Returns Type Description IOperator The resulting operator. | Improve this Doc View Source Optimize(IMappingSource) Optimizes the operator based on the mapping source. Declaration IOperator? Optimize(IMappingSource mappingSource) Parameters Type Name Description IMappingSource mappingSource The mapping source. Returns Type Description IOperator | Improve this Doc View Source SetColumnNames(IMappingSource, IMapping) Sets the column names. Declaration void SetColumnNames(IMappingSource mappingSource, IMapping mapping) Parameters Type Name Description IMappingSource mappingSource The mapping source. IMapping mapping The mapping."
  },
  "api/Inflatable.LinqExpression.WhereClauses.Interfaces.html": {
    "href": "api/Inflatable.LinqExpression.WhereClauses.Interfaces.html",
    "title": "Namespace Inflatable.LinqExpression.WhereClauses.Interfaces | Inflatable API Reference",
    "keywords": "Namespace Inflatable.LinqExpression.WhereClauses.Interfaces Interfaces IOperator Operator interface"
  },
  "api/Inflatable.LinqExpression.WhereClauses.LikeOperator.html": {
    "href": "api/Inflatable.LinqExpression.WhereClauses.LikeOperator.html",
    "title": "Class LikeOperator | Inflatable API Reference",
    "keywords": "Class LikeOperator Like operator Inheritance object LikeOperator Implements IOperator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Inflatable.LinqExpression.WhereClauses Assembly: Inflatable.dll Syntax public class LikeOperator : IOperator Constructors | Improve this Doc View Source LikeOperator(IOperator, IOperator, string) Initializes a new instance of the LikeOperator class. Declaration public LikeOperator(IOperator property, IOperator value, string methodType) Parameters Type Name Description IOperator property The property. IOperator value The value. string methodType Type of the method. Exceptions Type Condition ArgumentNullException value or property See Also IOperator Properties | Improve this Doc View Source IsNull Gets a value indicating whether this instance is null. Declaration public bool IsNull { get; } Property Value Type Description bool true if this instance is null; otherwise, false. See Also IOperator | Improve this Doc View Source MethodType Gets the type of the method. Declaration public string MethodType { get; } Property Value Type Description string The type of the method. See Also IOperator | Improve this Doc View Source Parent Gets or sets the parent. Declaration public IOperator? Parent { get; set; } Property Value Type Description IOperator The parent. See Also IOperator | Improve this Doc View Source Property Gets the property. Declaration public IOperator? Property { get; } Property Value Type Description IOperator The property. See Also IOperator | Improve this Doc View Source TypeCode Gets the type code. Declaration public Type TypeCode { get; } Property Value Type Description Type The type code. See Also IOperator | Improve this Doc View Source Value Gets the value. Declaration public IOperator? Value { get; } Property Value Type Description IOperator The value. See Also IOperator Methods | Improve this Doc View Source Copy() Copies this instance. Declaration public IOperator Copy() Returns Type Description IOperator A copy of this instance. See Also IOperator | Improve this Doc View Source GetParameters() Gets the parameters associated with the operator. Declaration public List<IParameter> GetParameters() Returns Type Description List<IParameter> A list of parameters associated with the operator. See Also IOperator | Improve this Doc View Source LogicallyNegate() Does a logical negation of the operator. Declaration public IOperator LogicallyNegate() Returns Type Description IOperator The resulting operator. See Also IOperator | Improve this Doc View Source Optimize(IMappingSource) Optimizes the operator based on the mapping source. Declaration public IOperator? Optimize(IMappingSource mappingSource) Parameters Type Name Description IMappingSource mappingSource The mapping source. Returns Type Description IOperator See Also IOperator | Improve this Doc View Source SetColumnNames(IMappingSource, IMapping) Sets the column names. Declaration public void SetColumnNames(IMappingSource mappingSource, IMapping mapping) Parameters Type Name Description IMappingSource mappingSource The mapping source. IMapping mapping The mapping. See Also IOperator | Improve this Doc View Source ToString() Converts to string. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() See Also IOperator Implements IOperator See Also IOperator"
  },
  "api/Inflatable.LinqExpression.WhereClauses.Property-1.html": {
    "href": "api/Inflatable.LinqExpression.WhereClauses.Property-1.html",
    "title": "Class Property<TObject> | Inflatable API Reference",
    "keywords": "Class Property<TObject> Property operator Inheritance object Property<TObject> Implements IOperator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Inflatable.LinqExpression.WhereClauses Assembly: Inflatable.dll Syntax public class Property<TObject> : IOperator Type Parameters Name Description TObject The type of the object. Constructors | Improve this Doc View Source Property(PropertyInfo, int) Initializes a new instance of the class. Declaration public Property(PropertyInfo property, int count) Parameters Type Name Description PropertyInfo property The property. int count The count. Exceptions Type Condition ArgumentNullException property See Also IOperator IOperator Properties | Improve this Doc View Source Count Gets the count. Declaration public int Count { get; } Property Value Type Description int The count. See Also IOperator IOperator | Improve this Doc View Source InternalProperty Gets the property. Declaration public PropertyInfo InternalProperty { get; } Property Value Type Description PropertyInfo The property. See Also IOperator IOperator | Improve this Doc View Source IsNull Gets a value indicating whether this instance is null. Declaration public bool IsNull { get; } Property Value Type Description bool true if this instance is null; otherwise, false. See Also IOperator IOperator | Improve this Doc View Source Parent Gets or sets the parent. Declaration public IOperator? Parent { get; set; } Property Value Type Description IOperator The parent. See Also IOperator IOperator | Improve this Doc View Source TypeCode Gets the type code. Declaration public Type TypeCode { get; } Property Value Type Description Type The type code. See Also IOperator IOperator Methods | Improve this Doc View Source Copy() Copies this instance. Declaration public IOperator Copy() Returns Type Description IOperator A copy of this instance. See Also IOperator IOperator | Improve this Doc View Source GetParameters() Gets the parameters associated with the operator. Declaration public List<IParameter> GetParameters() Returns Type Description List<IParameter> A list of parameters associated with the operator. See Also IOperator IOperator | Improve this Doc View Source LogicallyNegate() Does a logical negation of the operator. Declaration public IOperator LogicallyNegate() Returns Type Description IOperator The resulting operator. See Also IOperator IOperator | Improve this Doc View Source Optimize(IMappingSource) Optimizes the operator based on the mapping source. Declaration public IOperator Optimize(IMappingSource mappingSource) Parameters Type Name Description IMappingSource mappingSource The mapping source. Returns Type Description IOperator The result See Also IOperator IOperator | Improve this Doc View Source SetColumnNames(IMappingSource, IMapping) Sets the column names. Declaration public void SetColumnNames(IMappingSource mappingSource, IMapping mapping) Parameters Type Name Description IMappingSource mappingSource The mapping source. IMapping mapping The mapping. See Also IOperator IOperator | Improve this Doc View Source ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() See Also IOperator IOperator Implements IOperator See Also IOperator IOperator"
  },
  "api/Inflatable.LinqExpression.WhereClauses.UnaryOperator.html": {
    "href": "api/Inflatable.LinqExpression.WhereClauses.UnaryOperator.html",
    "title": "Class UnaryOperator | Inflatable API Reference",
    "keywords": "Class UnaryOperator Unary operator class Inheritance object UnaryOperator Implements IOperator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Inflatable.LinqExpression.WhereClauses Assembly: Inflatable.dll Syntax public class UnaryOperator : IOperator Constructors | Improve this Doc View Source UnaryOperator(IOperator, ExpressionType, Type) Initializes a new instance of the UnaryOperator class. Declaration public UnaryOperator(IOperator internalOperator, ExpressionType operatorType, Type nodeType) Parameters Type Name Description IOperator internalOperator The iternal operator. ExpressionType operatorType Type of the operator. Type nodeType Type of the node. Exceptions Type Condition ArgumentNullException iternalOperator See Also IOperator Properties | Improve this Doc View Source InternalOperator Gets the iternal operator. Declaration public IOperator InternalOperator { get; } Property Value Type Description IOperator The iternal operator. See Also IOperator | Improve this Doc View Source IsNull Gets a value indicating whether this instance is null. Declaration public bool IsNull { get; } Property Value Type Description bool true if this instance is null; otherwise, false. See Also IOperator | Improve this Doc View Source Operator Gets the operator. Declaration public ExpressionType Operator { get; } Property Value Type Description ExpressionType The operator. See Also IOperator | Improve this Doc View Source Parent Gets or sets the parent. Declaration public IOperator? Parent { get; set; } Property Value Type Description IOperator The parent. See Also IOperator | Improve this Doc View Source TypeCode Gets the type code. Declaration public Type TypeCode { get; } Property Value Type Description Type The type code. See Also IOperator Methods | Improve this Doc View Source Copy() Copies this instance. Declaration public IOperator Copy() Returns Type Description IOperator A copy of this instance. See Also IOperator | Improve this Doc View Source GetParameters() Gets the parameters associated with the operator. Declaration public List<IParameter> GetParameters() Returns Type Description List<IParameter> A list of parameters associated with the operator. See Also IOperator | Improve this Doc View Source LogicallyNegate() Does a logical negation of the operator. Declaration public IOperator LogicallyNegate() Returns Type Description IOperator The resulting operator. See Also IOperator | Improve this Doc View Source Optimize(IMappingSource) Optimizes the operator based on the mapping source. Declaration public IOperator Optimize(IMappingSource mappingSource) Parameters Type Name Description IMappingSource mappingSource The mapping source. Returns Type Description IOperator See Also IOperator | Improve this Doc View Source SetColumnNames(IMappingSource, IMapping) Sets the column names. Declaration public void SetColumnNames(IMappingSource mappingSource, IMapping mapping) Parameters Type Name Description IMappingSource mappingSource The mapping source. IMapping mapping The mapping. See Also IOperator | Improve this Doc View Source ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() See Also IOperator Implements IOperator See Also IOperator"
  },
  "api/Inflatable.LinqExpression.WhereClauses.WhereClause-1.html": {
    "href": "api/Inflatable.LinqExpression.WhereClauses.WhereClause-1.html",
    "title": "Class WhereClause<TObject> | Inflatable API Reference",
    "keywords": "Class WhereClause<TObject> Where operator Inheritance object WhereClause<TObject> Implements IOperator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Inflatable.LinqExpression.WhereClauses Assembly: Inflatable.dll Syntax public class WhereClause<TObject> : IOperator where TObject : class Type Parameters Name Description TObject The type of the object. Constructors | Improve this Doc View Source WhereClause(IOperator?) Initializes a new instance of the WhereClause<TObject> class. Declaration public WhereClause(IOperator? internalOperator) Parameters Type Name Description IOperator internalOperator The internal operator. See Also IOperator Properties | Improve this Doc View Source InternalOperator Gets the internal operator. Declaration public IOperator? InternalOperator { get; } Property Value Type Description IOperator The internal operator. See Also IOperator | Improve this Doc View Source IsNull Gets a value indicating whether this instance is null. Declaration public bool IsNull { get; } Property Value Type Description bool true if this instance is null; otherwise, false. See Also IOperator | Improve this Doc View Source ObjectType Gets the type of the object. Declaration public Type ObjectType { get; } Property Value Type Description Type The type of the object. See Also IOperator | Improve this Doc View Source Parent Gets or sets the parent. Declaration public IOperator? Parent { get; set; } Property Value Type Description IOperator The parent. See Also IOperator | Improve this Doc View Source TypeCode Gets the type code. Declaration public Type TypeCode { get; } Property Value Type Description Type The type code. See Also IOperator Methods | Improve this Doc View Source Combine(IOperator) Combines the specified clauses. Declaration public WhereClause<TObject> Combine(IOperator clause) Parameters Type Name Description IOperator clause The clause to combine with this one. Returns Type Description WhereClause<TObject> The resulting where clause. See Also IOperator | Improve this Doc View Source Copy() Copies this instance. Declaration public IOperator Copy() Returns Type Description IOperator A copy of this instance. See Also IOperator | Improve this Doc View Source GetParameters() Gets the parameters associated with the operator. Declaration public List<IParameter> GetParameters() Returns Type Description List<IParameter> A list of parameters associated with the operator. See Also IOperator | Improve this Doc View Source LogicallyNegate() Does a logical negation of the operator. Declaration public IOperator LogicallyNegate() Returns Type Description IOperator The resulting operator. See Also IOperator | Improve this Doc View Source Optimize(IMappingSource) Optimizes the operator based on the mapping source. Declaration public IOperator Optimize(IMappingSource mappingSource) Parameters Type Name Description IMappingSource mappingSource The mapping source. Returns Type Description IOperator See Also IOperator | Improve this Doc View Source SetColumnNames(IMappingSource, IMapping) Sets the column names. Declaration public void SetColumnNames(IMappingSource mappingSource, IMapping mapping) Parameters Type Name Description IMappingSource mappingSource The mapping source. IMapping mapping The mapping. See Also IOperator | Improve this Doc View Source ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() See Also IOperator Implements IOperator See Also IOperator"
  },
  "api/Inflatable.LinqExpression.WhereClauses.WhereVisitor-1.html": {
    "href": "api/Inflatable.LinqExpression.WhereClauses.WhereVisitor-1.html",
    "title": "Class WhereVisitor<TObject> | Inflatable API Reference",
    "keywords": "Class WhereVisitor<TObject> Where visitor Inheritance object ExpressionVisitor WhereVisitor<TObject> Inherited Members ExpressionVisitor.Visit(ReadOnlyCollection<Expression>) ExpressionVisitor.Visit(Expression) ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string) ExpressionVisitor.VisitAndConvert<T>(T, string) ExpressionVisitor.VisitBlock(BlockExpression) ExpressionVisitor.VisitCatchBlock(CatchBlock) ExpressionVisitor.VisitConditional(ConditionalExpression) ExpressionVisitor.VisitDebugInfo(DebugInfoExpression) ExpressionVisitor.VisitDefault(DefaultExpression) ExpressionVisitor.VisitDynamic(DynamicExpression) ExpressionVisitor.VisitElementInit(ElementInit) ExpressionVisitor.VisitExtension(Expression) ExpressionVisitor.VisitGoto(GotoExpression) ExpressionVisitor.VisitIndex(IndexExpression) ExpressionVisitor.VisitInvocation(InvocationExpression) ExpressionVisitor.VisitLabel(LabelExpression) ExpressionVisitor.VisitLabelTarget(LabelTarget) ExpressionVisitor.VisitLambda<T>(Expression<T>) ExpressionVisitor.VisitListInit(ListInitExpression) ExpressionVisitor.VisitLoop(LoopExpression) ExpressionVisitor.VisitMemberAssignment(MemberAssignment) ExpressionVisitor.VisitMemberBinding(MemberBinding) ExpressionVisitor.VisitMemberInit(MemberInitExpression) ExpressionVisitor.VisitMemberListBinding(MemberListBinding) ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding) ExpressionVisitor.VisitNew(NewExpression) ExpressionVisitor.VisitNewArray(NewArrayExpression) ExpressionVisitor.VisitParameter(ParameterExpression) ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression) ExpressionVisitor.VisitSwitch(SwitchExpression) ExpressionVisitor.VisitSwitchCase(SwitchCase) ExpressionVisitor.VisitTry(TryExpression) ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression) ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.LinqExpression.WhereClauses Assembly: Inflatable.dll Syntax public class WhereVisitor<TObject> : ExpressionVisitor Type Parameters Name Description TObject The type of the object. Constructors | Improve this Doc View Source WhereVisitor(int) Initializes a new instance of the class. Declaration public WhereVisitor(int count) Parameters Type Name Description int count The count. See Also ExpressionVisitor Properties | Improve this Doc View Source Count Gets the count. Declaration public int Count { get; } Property Value Type Description int The count. See Also ExpressionVisitor Methods | Improve this Doc View Source VisitBinary(BinaryExpression) Visits the children of the BinaryExpression. Declaration protected override Expression? VisitBinary(BinaryExpression node) Parameters Type Name Description BinaryExpression node The expression to visit. Returns Type Description Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. Overrides ExpressionVisitor.VisitBinary(BinaryExpression) Exceptions Type Condition NotSupportedException See Also ExpressionVisitor | Improve this Doc View Source VisitConstant(ConstantExpression) Visits the constant. Declaration protected override Expression? VisitConstant(ConstantExpression node) Parameters Type Name Description ConstantExpression node The node. Returns Type Description Expression The expression Overrides ExpressionVisitor.VisitConstant(ConstantExpression) See Also ExpressionVisitor | Improve this Doc View Source VisitMember(MemberExpression) Visits the member. Declaration protected override Expression? VisitMember(MemberExpression node) Parameters Type Name Description MemberExpression node The node. Returns Type Description Expression The node Overrides ExpressionVisitor.VisitMember(MemberExpression) See Also ExpressionVisitor | Improve this Doc View Source VisitMethodCall(MethodCallExpression) Visits the children of the MethodCallExpression. Declaration protected override Expression? VisitMethodCall(MethodCallExpression node) Parameters Type Name Description MethodCallExpression node The expression to visit. Returns Type Description Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. Overrides ExpressionVisitor.VisitMethodCall(MethodCallExpression) See Also ExpressionVisitor | Improve this Doc View Source VisitUnary(UnaryExpression) Visits the children of the UnaryExpression. Declaration protected override Expression? VisitUnary(UnaryExpression node) Parameters Type Name Description UnaryExpression node The expression to visit. Returns Type Description Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. Overrides ExpressionVisitor.VisitUnary(UnaryExpression) Exceptions Type Condition NotSupportedException See Also ExpressionVisitor | Improve this Doc View Source WhereProjection(Expression) Wheres the projection. Declaration public IOperator WhereProjection(Expression expression) Parameters Type Name Description Expression expression The expression. Returns Type Description IOperator The current clause See Also ExpressionVisitor See Also ExpressionVisitor"
  },
  "api/Inflatable.LinqExpression.WhereClauses.html": {
    "href": "api/Inflatable.LinqExpression.WhereClauses.html",
    "title": "Namespace Inflatable.LinqExpression.WhereClauses | Inflatable API Reference",
    "keywords": "Namespace Inflatable.LinqExpression.WhereClauses Classes BinaryOperator Binary operator class Constant Constant operator EmptyClause Empty clause LikeOperator Like operator Property<TObject> Property operator UnaryOperator Unary operator class WhereClause<TObject> Where operator WhereVisitor<TObject> Where visitor"
  },
  "api/Inflatable.LinqExpression.html": {
    "href": "api/Inflatable.LinqExpression.html",
    "title": "Namespace Inflatable.LinqExpression | Inflatable API Reference",
    "keywords": "Namespace Inflatable.LinqExpression Classes QueryData<TObject> Query data holder QueryTranslator<TObject> Query translator"
  },
  "api/Inflatable.Modules.AOPModule.html": {
    "href": "api/Inflatable.Modules.AOPModule.html",
    "title": "Class AOPModule | Inflatable API Reference",
    "keywords": "Class AOPModule AOP Module Inheritance object AOPModule Implements IAOPModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Modules Assembly: Inflatable.dll Syntax public class AOPModule : IAOPModule Constructors | Improve this Doc View Source AOPModule(MappingManager) Initializes a new instance of the AOPModule class. Declaration public AOPModule(MappingManager classManager) Parameters Type Name Description MappingManager classManager The class manager. Exceptions Type Condition ArgumentNullException classManager See Also IAOPModule Properties | Improve this Doc View Source ClassManager Gets the class manager. Declaration public MappingManager ClassManager { get; } Property Value Type Description MappingManager The class manager. See Also IAOPModule Methods | Improve this Doc View Source Setup(Aspectus) Used to add a class to the AOP system Declaration public void Setup(Aspectus manager) Parameters Type Name Description Aspectus manager AOP manager See Also IAOPModule Implements IAOPModule See Also IAOPModule"
  },
  "api/Inflatable.Modules.InflatableModule.html": {
    "href": "api/Inflatable.Modules.InflatableModule.html",
    "title": "Class InflatableModule | Inflatable API Reference",
    "keywords": "Class InflatableModule Inflatable module Inheritance object InflatableModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Modules Assembly: Inflatable.dll Syntax public class InflatableModule : IModule Properties | Improve this Doc View Source Order Order to run this in Declaration public int Order { get; } Property Value Type Description int See Also IModule Methods | Improve this Doc View Source Load(IServiceCollection) Loads the module using the bootstrapper Declaration public void Load(IServiceCollection bootstrapper) Parameters Type Name Description IServiceCollection bootstrapper The bootstrapper. See Also IModule Implements IModule See Also IModule"
  },
  "api/Inflatable.Modules.html": {
    "href": "api/Inflatable.Modules.html",
    "title": "Namespace Inflatable.Modules | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Modules Classes AOPModule AOP Module InflatableModule Inflatable module"
  },
  "api/Inflatable.QueryProvider.BaseClasses.GeneratorBaseClass-1.html": {
    "href": "api/Inflatable.QueryProvider.BaseClasses.GeneratorBaseClass-1.html",
    "title": "Class GeneratorBaseClass<TMappedClass> | Inflatable API Reference",
    "keywords": "Class GeneratorBaseClass<TMappedClass> Generator base class Inheritance object GeneratorBaseClass<TMappedClass> SQLServerGenerator<TMappedClass> Implements IGenerator<TMappedClass> IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.QueryProvider.BaseClasses Assembly: Inflatable.dll Syntax public abstract class GeneratorBaseClass<TMappedClass> : IGenerator<TMappedClass>, IGenerator where TMappedClass : class Type Parameters Name Description TMappedClass The type of the mapped class. Constructors | Improve this Doc View Source GeneratorBaseClass(IMappingSource, IEnumerable<IQueryGenerator<TMappedClass>>) Initializes a new instance of the GeneratorBaseClass<TMappedClass> class. Declaration protected GeneratorBaseClass(IMappingSource mappingInformation, IEnumerable<IQueryGenerator<TMappedClass>> queryGenerators) Parameters Type Name Description IMappingSource mappingInformation The mapping information. IEnumerable<IQueryGenerator<TMappedClass>> queryGenerators The query generators. Exceptions Type Condition ArgumentNullException linqQueryGenerator or mappingInformation or queryGenerators ArgumentException Mapping not found for type: AssociatedType See Also IGenerator<TMappedClass> Properties | Improve this Doc View Source AssociatedType Gets the type of the associated. Declaration public Type AssociatedType { get; } Property Value Type Description Type The type of the associated. See Also IGenerator<TMappedClass> | Improve this Doc View Source MappingInformation Gets the mapping information. Declaration public IMappingSource MappingInformation { get; } Property Value Type Description IMappingSource The mapping information. See Also IGenerator<TMappedClass> | Improve this Doc View Source QueryGenerators Gets the query generators. Declaration public IDictionary<QueryType, IQueryGenerator<TMappedClass>> QueryGenerators { get; } Property Value Type Description IDictionary<QueryType, IQueryGenerator<TMappedClass>> The query generators. See Also IGenerator<TMappedClass> Methods | Improve this Doc View Source GenerateDeclarations(QueryType) Generates the declarations needed for the query. Declaration public IQuery[] GenerateDeclarations(QueryType type) Parameters Type Name Description QueryType type The type. Returns Type Description IQuery[] The resulting declarations. See Also IGenerator<TMappedClass> | Improve this Doc View Source GenerateQueries(IQueryData) Generates the query. Declaration public IQuery[] GenerateQueries(IQueryData data) Parameters Type Name Description IQueryData data The data. Returns Type Description IQuery[] The resulting query See Also IGenerator<TMappedClass> | Improve this Doc View Source GenerateQueries(QueryType, Dynamo[]) Generates the queries. Declaration public IQuery[] GenerateQueries(QueryType type, Dynamo[] ids) Parameters Type Name Description QueryType type The type. Dynamo[] ids The ids. Returns Type Description IQuery[] The resulting query See Also IGenerator<TMappedClass> | Improve this Doc View Source GenerateQueries(QueryType, object) Generates the query. Declaration public IQuery[] GenerateQueries(QueryType type, object queryObject) Parameters Type Name Description QueryType type The type. object queryObject The query object. Returns Type Description IQuery[] The resulting queries. See Also IGenerator<TMappedClass> | Improve this Doc View Source GenerateQueries(QueryType, object, IClassProperty) Generates the query. Declaration public IQuery[] GenerateQueries(QueryType type, object queryObject, IClassProperty property) Parameters Type Name Description QueryType type The type. object queryObject The query object. IClassProperty property The property. Returns Type Description IQuery[] The resulting query See Also IGenerator<TMappedClass> Implements IGenerator<TMappedClass> IGenerator See Also IGenerator<TMappedClass>"
  },
  "api/Inflatable.QueryProvider.BaseClasses.LinqQueryGeneratorBaseClass-1.html": {
    "href": "api/Inflatable.QueryProvider.BaseClasses.LinqQueryGeneratorBaseClass-1.html",
    "title": "Class LinqQueryGeneratorBaseClass<TObject> | Inflatable API Reference",
    "keywords": "Class LinqQueryGeneratorBaseClass<TObject> Linq query generator base class Inheritance object QueryGeneratorBaseClass<TObject> LinqQueryGeneratorBaseClass<TObject> LinqQueryGenerator<TMappedClass> Implements ILinqQueryGenerator<TObject> IQueryGenerator<TObject> Inherited Members QueryGeneratorBaseClass<TObject>.AssociatedType QueryGeneratorBaseClass<TObject>.MappingInformation QueryGeneratorBaseClass<TObject>.ObjectPool QueryGeneratorBaseClass<TObject>.QueryType QueryGeneratorBaseClass<TObject>.GenerateDeclarations() QueryGeneratorBaseClass<TObject>.GetColumnName(IIDProperty, string) QueryGeneratorBaseClass<TObject>.GetColumnName(IAutoIDProperty, string) QueryGeneratorBaseClass<TObject>.GetColumnName(IProperty, string) QueryGeneratorBaseClass<TObject>.GetColumnName(IMapProperty, IMapping, string) QueryGeneratorBaseClass<TObject>.GetForeignColumnName(IMapping) QueryGeneratorBaseClass<TObject>.GetForeignParameterName(IMapping) QueryGeneratorBaseClass<TObject>.GetParameterName(IIDProperty) QueryGeneratorBaseClass<TObject>.GetParameterName(IMapProperty, IMapping) QueryGeneratorBaseClass<TObject>.GetParameterName(IProperty) QueryGeneratorBaseClass<TObject>.GetParameterType(IAutoIDProperty) QueryGeneratorBaseClass<TObject>.GetParameterType(IIDProperty) QueryGeneratorBaseClass<TObject>.GetParentColumnName(IMapping, IAutoIDProperty, string) QueryGeneratorBaseClass<TObject>.GetParentColumnName(IMapping, IIDProperty, string) QueryGeneratorBaseClass<TObject>.GetParentParameterName(IAutoIDProperty) QueryGeneratorBaseClass<TObject>.GetParentParameterName(IIDProperty) QueryGeneratorBaseClass<TObject>.GetTableName(IMapping, string) QueryGeneratorBaseClass<TObject>.GetTableName(IManyToManyProperty) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.QueryProvider.BaseClasses Assembly: Inflatable.dll Syntax public abstract class LinqQueryGeneratorBaseClass<TObject> : QueryGeneratorBaseClass<TObject>, ILinqQueryGenerator<TObject>, IQueryGenerator<TObject> where TObject : class Type Parameters Name Description TObject The type of the object. Constructors | Improve this Doc View Source LinqQueryGeneratorBaseClass(IMappingSource, ObjectPool<StringBuilder>) Initializes a new instance of the LinqQueryGeneratorBaseClass<TObject> class. Declaration protected LinqQueryGeneratorBaseClass(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters Type Name Description IMappingSource mappingInformation Mapping information ObjectPool<StringBuilder> objectPool The object pool. See Also QueryGeneratorBaseClass<TMappedClass> ILinqQueryGenerator<TObject> Methods | Improve this Doc View Source GenerateQueries(QueryData<TObject>) Generates the query. Declaration public abstract IQuery[] GenerateQueries(QueryData<TObject> data) Parameters Type Name Description QueryData<TObject> data The data. Returns Type Description IQuery[] The resulting query See Also QueryGeneratorBaseClass<TMappedClass> ILinqQueryGenerator<TObject> | Improve this Doc View Source GenerateQueries(TObject) Generates the query. Declaration public override IQuery[] GenerateQueries(TObject queryObject) Parameters Type Name Description TObject queryObject The object to generate the queries from. Returns Type Description IQuery[] The resulting query Overrides QueryGeneratorBaseClass<TObject>.GenerateQueries(TObject) See Also QueryGeneratorBaseClass<TMappedClass> ILinqQueryGenerator<TObject> Implements ILinqQueryGenerator<TObject> IQueryGenerator<TObject> See Also QueryGeneratorBaseClass<TMappedClass> ILinqQueryGenerator<TObject>"
  },
  "api/Inflatable.QueryProvider.BaseClasses.PropertyQueryGeneratorBaseClass-1.html": {
    "href": "api/Inflatable.QueryProvider.BaseClasses.PropertyQueryGeneratorBaseClass-1.html",
    "title": "Class PropertyQueryGeneratorBaseClass<TObject> | Inflatable API Reference",
    "keywords": "Class PropertyQueryGeneratorBaseClass<TObject> Property query generator base class Inheritance object QueryGeneratorBaseClass<TObject> PropertyQueryGeneratorBaseClass<TObject> DeletePropertiesQuery<TMappedClass> LoadPropertiesQuery<TMappedClass> SavePropertiesQuery<TMappedClass> Implements IPropertyQueryGenerator<TObject> IQueryGenerator<TObject> Inherited Members QueryGeneratorBaseClass<TObject>.AssociatedType QueryGeneratorBaseClass<TObject>.MappingInformation QueryGeneratorBaseClass<TObject>.ObjectPool QueryGeneratorBaseClass<TObject>.QueryType QueryGeneratorBaseClass<TObject>.GenerateDeclarations() QueryGeneratorBaseClass<TObject>.GetColumnName(IIDProperty, string) QueryGeneratorBaseClass<TObject>.GetColumnName(IAutoIDProperty, string) QueryGeneratorBaseClass<TObject>.GetColumnName(IProperty, string) QueryGeneratorBaseClass<TObject>.GetColumnName(IMapProperty, IMapping, string) QueryGeneratorBaseClass<TObject>.GetForeignColumnName(IMapping) QueryGeneratorBaseClass<TObject>.GetForeignParameterName(IMapping) QueryGeneratorBaseClass<TObject>.GetParameterName(IIDProperty) QueryGeneratorBaseClass<TObject>.GetParameterName(IMapProperty, IMapping) QueryGeneratorBaseClass<TObject>.GetParameterName(IProperty) QueryGeneratorBaseClass<TObject>.GetParameterType(IAutoIDProperty) QueryGeneratorBaseClass<TObject>.GetParameterType(IIDProperty) QueryGeneratorBaseClass<TObject>.GetParentColumnName(IMapping, IAutoIDProperty, string) QueryGeneratorBaseClass<TObject>.GetParentColumnName(IMapping, IIDProperty, string) QueryGeneratorBaseClass<TObject>.GetParentParameterName(IAutoIDProperty) QueryGeneratorBaseClass<TObject>.GetParentParameterName(IIDProperty) QueryGeneratorBaseClass<TObject>.GetTableName(IMapping, string) QueryGeneratorBaseClass<TObject>.GetTableName(IManyToManyProperty) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.QueryProvider.BaseClasses Assembly: Inflatable.dll Syntax public abstract class PropertyQueryGeneratorBaseClass<TObject> : QueryGeneratorBaseClass<TObject>, IPropertyQueryGenerator<TObject>, IQueryGenerator<TObject> where TObject : class Type Parameters Name Description TObject The type of the object. Constructors | Improve this Doc View Source PropertyQueryGeneratorBaseClass(IMappingSource, ObjectPool<StringBuilder>) Initializes a new instance of the PropertyQueryGeneratorBaseClass<TObject> class. Declaration protected PropertyQueryGeneratorBaseClass(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters Type Name Description IMappingSource mappingInformation Mapping information ObjectPool<StringBuilder> objectPool The object pool. See Also QueryGeneratorBaseClass<TMappedClass> ILinqQueryGenerator<TObject> Methods | Improve this Doc View Source GenerateQueries(TObject) Generates the query. Declaration public override IQuery[] GenerateQueries(TObject queryObject) Parameters Type Name Description TObject queryObject The object to generate the queries from. Returns Type Description IQuery[] The resulting query Overrides QueryGeneratorBaseClass<TObject>.GenerateQueries(TObject) See Also QueryGeneratorBaseClass<TMappedClass> ILinqQueryGenerator<TObject> | Improve this Doc View Source GenerateQueries(TObject, IClassProperty) Generates the query. Declaration public abstract IQuery[] GenerateQueries(TObject queryObject, IClassProperty property) Parameters Type Name Description TObject queryObject The object to generate the queries from. IClassProperty property The property. Returns Type Description IQuery[] The resulting query See Also QueryGeneratorBaseClass<TMappedClass> ILinqQueryGenerator<TObject> Implements IPropertyQueryGenerator<TObject> IQueryGenerator<TObject> See Also QueryGeneratorBaseClass<TMappedClass> ILinqQueryGenerator<TObject>"
  },
  "api/Inflatable.QueryProvider.BaseClasses.QueryGeneratorBaseClass-1.html": {
    "href": "api/Inflatable.QueryProvider.BaseClasses.QueryGeneratorBaseClass-1.html",
    "title": "Class QueryGeneratorBaseClass<TMappedClass> | Inflatable API Reference",
    "keywords": "Class QueryGeneratorBaseClass<TMappedClass> Generator base class Inheritance object QueryGeneratorBaseClass<TMappedClass> LinqQueryGeneratorBaseClass<TObject> PropertyQueryGeneratorBaseClass<TObject> DataLoadQuery<TMappedClass> DeleteQuery<TMappedClass> InsertQuery<TMappedClass> UpdateQuery<TMappedClass> Implements IQueryGenerator<TMappedClass> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.QueryProvider.BaseClasses Assembly: Inflatable.dll Syntax public abstract class QueryGeneratorBaseClass<TMappedClass> : IQueryGenerator<TMappedClass> where TMappedClass : class Type Parameters Name Description TMappedClass The type of the mapped class. Constructors | Improve this Doc View Source QueryGeneratorBaseClass(IMappingSource, ObjectPool<StringBuilder>) Constructor Declaration protected QueryGeneratorBaseClass(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters Type Name Description IMappingSource mappingInformation Mapping information ObjectPool<StringBuilder> objectPool The object pool. Exceptions Type Condition ArgumentNullException mappingInformation See Also IQueryGenerator<TObject> Properties | Improve this Doc View Source AssociatedType Gets the type of the associated. Declaration public Type AssociatedType { get; } Property Value Type Description Type The type of the associated. See Also IQueryGenerator<TObject> | Improve this Doc View Source MappingInformation Gets the mapping information. Declaration public IMappingSource MappingInformation { get; } Property Value Type Description IMappingSource The mapping information. See Also IQueryGenerator<TObject> | Improve this Doc View Source ObjectPool Gets the object pool. Declaration public ObjectPool<StringBuilder> ObjectPool { get; } Property Value Type Description ObjectPool<StringBuilder> The object pool. See Also IQueryGenerator<TObject> | Improve this Doc View Source QueryType Gets the type of the query. Declaration public abstract QueryType QueryType { get; } Property Value Type Description QueryType The type of the query. See Also IQueryGenerator<TObject> Methods | Improve this Doc View Source GenerateDeclarations() Generates the declarations needed for the query. Declaration public abstract IQuery[] GenerateDeclarations() Returns Type Description IQuery[] The resulting declarations. See Also IQueryGenerator<TObject> | Improve this Doc View Source GenerateQueries(TMappedClass) Generates the query. Declaration public abstract IQuery[] GenerateQueries(TMappedClass queryObject) Parameters Type Name Description TMappedClass queryObject The object to generate the queries from. Returns Type Description IQuery[] The resulting query See Also IQueryGenerator<TObject> | Improve this Doc View Source GetColumnName(IAutoIDProperty, string) Gets the name of the column. Declaration protected string GetColumnName(IAutoIDProperty idProperty, string suffix = \"\") Parameters Type Name Description IAutoIDProperty idProperty The identifier property. string suffix The suffix. Returns Type Description string The column name See Also IQueryGenerator<TObject> | Improve this Doc View Source GetColumnName(IIDProperty?, string) Gets the name of the column. Declaration protected string GetColumnName(IIDProperty? idProperty, string suffix = \"\") Parameters Type Name Description IIDProperty idProperty The identifier property. string suffix The suffix. Returns Type Description string The column name See Also IQueryGenerator<TObject> | Improve this Doc View Source GetColumnName(IMapProperty, IMapping, string) Gets the name of the column. Declaration protected string? GetColumnName(IMapProperty mapProperty, IMapping foreignMapping, string suffix = \"\") Parameters Type Name Description IMapProperty mapProperty The map property. IMapping foreignMapping The foreign mapping. string suffix The suffix. Returns Type Description string The column name See Also IQueryGenerator<TObject> | Improve this Doc View Source GetColumnName(IProperty, string) Gets the name of the column. Declaration protected string GetColumnName(IProperty referenceProperty, string suffix = \"\") Parameters Type Name Description IProperty referenceProperty The reference property. string suffix The suffix. Returns Type Description string The column name See Also IQueryGenerator<TObject> | Improve this Doc View Source GetForeignColumnName(IMapping) Gets the name of the parent column. Declaration protected string GetForeignColumnName(IMapping foreignMapping) Parameters Type Name Description IMapping foreignMapping The foreign mapping. Returns Type Description string The parent column name See Also IQueryGenerator<TObject> | Improve this Doc View Source GetForeignParameterName(IMapping) Gets the name of the parent parameter. Declaration protected string GetForeignParameterName(IMapping foreignMapping) Parameters Type Name Description IMapping foreignMapping The foreign mapping. Returns Type Description string The parent parameter name See Also IQueryGenerator<TObject> | Improve this Doc View Source GetParameterName(IIDProperty?) Gets the name of the parameter. Declaration protected string GetParameterName(IIDProperty? idProperty) Parameters Type Name Description IIDProperty idProperty The identifier property. Returns Type Description string The parameter name See Also IQueryGenerator<TObject> | Improve this Doc View Source GetParameterName(IMapProperty, IMapping) Gets the name of the parameter. Declaration protected string? GetParameterName(IMapProperty mapProperty, IMapping foreignMapping) Parameters Type Name Description IMapProperty mapProperty The map property. IMapping foreignMapping The foreign mapping. Returns Type Description string The parameter name See Also IQueryGenerator<TObject> | Improve this Doc View Source GetParameterName(IProperty) Gets the name of the parameter. Declaration protected string GetParameterName(IProperty referenceProperty) Parameters Type Name Description IProperty referenceProperty The reference property. Returns Type Description string The parameter name See Also IQueryGenerator<TObject> | Improve this Doc View Source GetParameterType(IAutoIDProperty) Gets the type of the parameter. Declaration protected string GetParameterType(IAutoIDProperty autoIDProperty) Parameters Type Name Description IAutoIDProperty autoIDProperty The automatic identifier property. Returns Type Description string The parameter type name See Also IQueryGenerator<TObject> | Improve this Doc View Source GetParameterType(IIDProperty) Gets the type of the parameter. Declaration protected string GetParameterType(IIDProperty iDProperty) Parameters Type Name Description IIDProperty iDProperty The i d property. Returns Type Description string The parameter type name See Also IQueryGenerator<TObject> | Improve this Doc View Source GetParentColumnName(IMapping, IAutoIDProperty, string) Gets the name of the parent column. Declaration protected string GetParentColumnName(IMapping childMapping, IAutoIDProperty autoIDProperty, string suffix = \"\") Parameters Type Name Description IMapping childMapping The child mapping. IAutoIDProperty autoIDProperty The automatic identifier property. string suffix The suffix. Returns Type Description string The parent column name See Also IQueryGenerator<TObject> | Improve this Doc View Source GetParentColumnName(IMapping, IIDProperty, string) Gets the name of the parent column. Declaration protected string GetParentColumnName(IMapping childMapping, IIDProperty iDProperty, string suffix = \"\") Parameters Type Name Description IMapping childMapping The child mapping. IIDProperty iDProperty The i d property. string suffix The suffix. Returns Type Description string The parent column name See Also IQueryGenerator<TObject> | Improve this Doc View Source GetParentParameterName(IAutoIDProperty) Gets the name of the parent parameter. Declaration protected string GetParentParameterName(IAutoIDProperty autoIDProperty) Parameters Type Name Description IAutoIDProperty autoIDProperty The automatic identifier property. Returns Type Description string The parent parameter name See Also IQueryGenerator<TObject> | Improve this Doc View Source GetParentParameterName(IIDProperty) Gets the name of the parent parameter. Declaration protected string GetParentParameterName(IIDProperty iDProperty) Parameters Type Name Description IIDProperty iDProperty The i d property. Returns Type Description string The parent parameter name See Also IQueryGenerator<TObject> | Improve this Doc View Source GetTableName(IManyToManyProperty) Gets the name of the table. Declaration protected string GetTableName(IManyToManyProperty property) Parameters Type Name Description IManyToManyProperty property The property. Returns Type Description string The name of the table. See Also IQueryGenerator<TObject> | Improve this Doc View Source GetTableName(IMapping?, string) Gets the name of the table. Declaration protected string GetTableName(IMapping? parentMapping, string suffix = \"\") Parameters Type Name Description IMapping parentMapping The parent mapping. string suffix The suffix. Returns Type Description string The name of the table See Also IQueryGenerator<TObject> Implements IQueryGenerator<TObject> See Also IQueryGenerator<TObject>"
  },
  "api/Inflatable.QueryProvider.BaseClasses.html": {
    "href": "api/Inflatable.QueryProvider.BaseClasses.html",
    "title": "Namespace Inflatable.QueryProvider.BaseClasses | Inflatable API Reference",
    "keywords": "Namespace Inflatable.QueryProvider.BaseClasses Classes GeneratorBaseClass<TMappedClass> Generator base class LinqQueryGeneratorBaseClass<TObject> Linq query generator base class PropertyQueryGeneratorBaseClass<TObject> Property query generator base class QueryGeneratorBaseClass<TMappedClass> Generator base class"
  },
  "api/Inflatable.QueryProvider.CachedResult.html": {
    "href": "api/Inflatable.QueryProvider.CachedResult.html",
    "title": "Class CachedResult | Inflatable API Reference",
    "keywords": "Class CachedResult Cached result Inheritance object CachedResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.QueryProvider Assembly: Inflatable.dll Syntax public class CachedResult Constructors | Improve this Doc View Source CachedResult(Dynamo, Type) Initializes a new instance of the QueryResults class. Declaration public CachedResult(Dynamo value, Type objectType) Parameters Type Name Description Dynamo value The value. Type objectType Type of the object. Exceptions Type Condition ArgumentNullException query Properties | Improve this Doc View Source ObjectType Gets the type of the object. Declaration public Type ObjectType { get; } Property Value Type Description Type The type of the object. | Improve this Doc View Source Value Gets the value. Declaration public Dynamo Value { get; } Property Value Type Description Dynamo The value."
  },
  "api/Inflatable.QueryProvider.Enums.QueryType.html": {
    "href": "api/Inflatable.QueryProvider.Enums.QueryType.html",
    "title": "Enum QueryType | Inflatable API Reference",
    "keywords": "Enum QueryType Query type enum Namespace: Inflatable.QueryProvider.Enums Assembly: Inflatable.dll Syntax public enum QueryType Fields Name Description Delete The delete Insert The insert JoinsDelete The joins delete JoinsSave The joins save LinqQuery The linq query LoadData The load data LoadProperty The load property Update The update"
  },
  "api/Inflatable.QueryProvider.Enums.html": {
    "href": "api/Inflatable.QueryProvider.Enums.html",
    "title": "Namespace Inflatable.QueryProvider.Enums | Inflatable API Reference",
    "keywords": "Namespace Inflatable.QueryProvider.Enums Enums QueryType Query type enum"
  },
  "api/Inflatable.QueryProvider.Interfaces.IDataQueryGenerator-1.html": {
    "href": "api/Inflatable.QueryProvider.Interfaces.IDataQueryGenerator-1.html",
    "title": "Interface IDataQueryGenerator<TObject> | Inflatable API Reference",
    "keywords": "Interface IDataQueryGenerator<TObject> Data query generator interface Inherited Members IQueryGenerator<TObject>.QueryType IQueryGenerator<TObject>.GenerateDeclarations() IQueryGenerator<TObject>.GenerateQueries(TObject) Namespace: Inflatable.QueryProvider.Interfaces Assembly: Inflatable.dll Syntax public interface IDataQueryGenerator<TObject> : IQueryGenerator<TObject> where TObject : class Type Parameters Name Description TObject The type of the object. Methods | Improve this Doc View Source GenerateQueries(Dynamo[]) Generates the query. Declaration IQuery[] GenerateQueries(Dynamo[] ids) Parameters Type Name Description Dynamo[] ids The ids. Returns Type Description IQuery[] The resulting query See Also IQueryGenerator<TObject> See Also IQueryGenerator<TObject>"
  },
  "api/Inflatable.QueryProvider.Interfaces.IGenerator-1.html": {
    "href": "api/Inflatable.QueryProvider.Interfaces.IGenerator-1.html",
    "title": "Interface IGenerator<TMappedClass> | Inflatable API Reference",
    "keywords": "Interface IGenerator<TMappedClass> Generator interface Inherited Members IGenerator.AssociatedType IGenerator.GenerateDeclarations(QueryType) IGenerator.GenerateQueries(QueryType, object) IGenerator.GenerateQueries(QueryType, object, IClassProperty) IGenerator.GenerateQueries(QueryType, Dynamo[]) Namespace: Inflatable.QueryProvider.Interfaces Assembly: Inflatable.dll Syntax public interface IGenerator<TMappedClass> : IGenerator where TMappedClass : class Type Parameters Name Description TMappedClass The type of the mapped class. Properties | Improve this Doc View Source QueryGenerators Gets the query generators. Declaration IDictionary<QueryType, IQueryGenerator<TMappedClass>> QueryGenerators { get; } Property Value Type Description IDictionary<QueryType, IQueryGenerator<TMappedClass>> The query generators. Methods | Improve this Doc View Source GenerateQueries(IQueryData) Generates the query. Declaration IQuery[] GenerateQueries(IQueryData data) Parameters Type Name Description IQueryData data The data. Returns Type Description IQuery[] The resulting query"
  },
  "api/Inflatable.QueryProvider.Interfaces.IGenerator.html": {
    "href": "api/Inflatable.QueryProvider.Interfaces.IGenerator.html",
    "title": "Interface IGenerator | Inflatable API Reference",
    "keywords": "Interface IGenerator Generator interface Namespace: Inflatable.QueryProvider.Interfaces Assembly: Inflatable.dll Syntax public interface IGenerator Properties | Improve this Doc View Source AssociatedType Gets the type of the associated. Declaration Type AssociatedType { get; } Property Value Type Description Type The type of the associated. Methods | Improve this Doc View Source GenerateDeclarations(QueryType) Generates the declarations needed for the query. Declaration IQuery[] GenerateDeclarations(QueryType type) Parameters Type Name Description QueryType type The type. Returns Type Description IQuery[] The resulting declarations. | Improve this Doc View Source GenerateQueries(QueryType, Dynamo[]) Generates the queries. Declaration IQuery[] GenerateQueries(QueryType type, Dynamo[] ids) Parameters Type Name Description QueryType type The type. Dynamo[] ids The ids. Returns Type Description IQuery[] The resulting query | Improve this Doc View Source GenerateQueries(QueryType, object) Generates the query. Declaration IQuery[] GenerateQueries(QueryType type, object queryObject) Parameters Type Name Description QueryType type The type. object queryObject The query object. Returns Type Description IQuery[] The resulting queries. | Improve this Doc View Source GenerateQueries(QueryType, object, IClassProperty) Generates the query. Declaration IQuery[] GenerateQueries(QueryType type, object queryObject, IClassProperty property) Parameters Type Name Description QueryType type The type. object queryObject The query object. IClassProperty property The property. Returns Type Description IQuery[] The resulting query"
  },
  "api/Inflatable.QueryProvider.Interfaces.ILinqQueryGenerator-1.html": {
    "href": "api/Inflatable.QueryProvider.Interfaces.ILinqQueryGenerator-1.html",
    "title": "Interface ILinqQueryGenerator<TObject> | Inflatable API Reference",
    "keywords": "Interface ILinqQueryGenerator<TObject> Linq query generator Inherited Members IQueryGenerator<TObject>.QueryType IQueryGenerator<TObject>.GenerateDeclarations() IQueryGenerator<TObject>.GenerateQueries(TObject) Namespace: Inflatable.QueryProvider.Interfaces Assembly: Inflatable.dll Syntax public interface ILinqQueryGenerator<TObject> : IQueryGenerator<TObject> where TObject : class Type Parameters Name Description TObject The type of the object. Methods | Improve this Doc View Source GenerateQueries(QueryData<TObject>) Generates the query. Declaration IQuery[] GenerateQueries(QueryData<TObject> data) Parameters Type Name Description QueryData<TObject> data The data. Returns Type Description IQuery[] The resulting query"
  },
  "api/Inflatable.QueryProvider.Interfaces.IPropertyQueryGenerator-1.html": {
    "href": "api/Inflatable.QueryProvider.Interfaces.IPropertyQueryGenerator-1.html",
    "title": "Interface IPropertyQueryGenerator<TObject> | Inflatable API Reference",
    "keywords": "Interface IPropertyQueryGenerator<TObject> Property query generator Inherited Members IQueryGenerator<TObject>.QueryType IQueryGenerator<TObject>.GenerateDeclarations() IQueryGenerator<TObject>.GenerateQueries(TObject) Namespace: Inflatable.QueryProvider.Interfaces Assembly: Inflatable.dll Syntax public interface IPropertyQueryGenerator<TObject> : IQueryGenerator<TObject> where TObject : class Type Parameters Name Description TObject The type of the object. Methods | Improve this Doc View Source GenerateQueries(TObject, IClassProperty) Generates the query. Declaration IQuery[] GenerateQueries(TObject queryObject, IClassProperty property) Parameters Type Name Description TObject queryObject The object to generate the queries from. IClassProperty property The property. Returns Type Description IQuery[] The resulting query"
  },
  "api/Inflatable.QueryProvider.Interfaces.IQueries.html": {
    "href": "api/Inflatable.QueryProvider.Interfaces.IQueries.html",
    "title": "Interface IQueries | Inflatable API Reference",
    "keywords": "Interface IQueries Holds the default commands for an individual mapping Inherited Members IDictionary<QueryType, IQuery>.Add(QueryType, IQuery) IDictionary<QueryType, IQuery>.ContainsKey(QueryType) IDictionary<QueryType, IQuery>.Remove(QueryType) IDictionary<QueryType, IQuery>.TryGetValue(QueryType, out IQuery) IDictionary<QueryType, IQuery>.this[QueryType] IDictionary<QueryType, IQuery>.Keys IDictionary<QueryType, IQuery>.Values ICollection<KeyValuePair<QueryType, IQuery>>.Add(KeyValuePair<QueryType, IQuery>) ICollection<KeyValuePair<QueryType, IQuery>>.Clear() ICollection<KeyValuePair<QueryType, IQuery>>.Contains(KeyValuePair<QueryType, IQuery>) ICollection<KeyValuePair<QueryType, IQuery>>.CopyTo(KeyValuePair<QueryType, IQuery>[], int) ICollection<KeyValuePair<QueryType, IQuery>>.Remove(KeyValuePair<QueryType, IQuery>) ICollection<KeyValuePair<QueryType, IQuery>>.Count ICollection<KeyValuePair<QueryType, IQuery>>.IsReadOnly IEnumerable<KeyValuePair<QueryType, IQuery>>.GetEnumerator() IEnumerable.GetEnumerator() Namespace: Inflatable.QueryProvider.Interfaces Assembly: Inflatable.dll Syntax public interface IQueries : IDictionary<QueryType, IQuery?>, ICollection<KeyValuePair<QueryType, IQuery?>>, IEnumerable<KeyValuePair<QueryType, IQuery?>>, IEnumerable"
  },
  "api/Inflatable.QueryProvider.Interfaces.IQuery.html": {
    "href": "api/Inflatable.QueryProvider.Interfaces.IQuery.html",
    "title": "Interface IQuery | Inflatable API Reference",
    "keywords": "Interface IQuery Holds an individual query's information. Namespace: Inflatable.QueryProvider.Interfaces Assembly: Inflatable.dll Syntax public interface IQuery Properties | Improve this Doc View Source DatabaseCommandType Gets the type of the database command. Declaration CommandType DatabaseCommandType { get; } Property Value Type Description CommandType The type of the database command. | Improve this Doc View Source Parameters Gets the parameters. Declaration IParameter?[] Parameters { get; } Property Value Type Description IParameter[] The parameters. | Improve this Doc View Source QueryString Gets the query string. Declaration string QueryString { get; } Property Value Type Description string The query string. | Improve this Doc View Source QueryType Gets the type of the query. Declaration QueryType QueryType { get; } Property Value Type Description QueryType The type of the query. | Improve this Doc View Source ReturnType Gets the type of the return value. Declaration Type ReturnType { get; } Property Value Type Description Type The type of the return value."
  },
  "api/Inflatable.QueryProvider.Interfaces.IQueryGenerator-1.html": {
    "href": "api/Inflatable.QueryProvider.Interfaces.IQueryGenerator-1.html",
    "title": "Interface IQueryGenerator<TObject> | Inflatable API Reference",
    "keywords": "Interface IQueryGenerator<TObject> Query generator Namespace: Inflatable.QueryProvider.Interfaces Assembly: Inflatable.dll Syntax public interface IQueryGenerator<TObject> where TObject : class Type Parameters Name Description TObject The type of the object. Properties | Improve this Doc View Source QueryType Gets the type of the query. Declaration QueryType QueryType { get; } Property Value Type Description QueryType The type of the query. Methods | Improve this Doc View Source GenerateDeclarations() Generates the declarations needed for the query. Declaration IQuery[] GenerateDeclarations() Returns Type Description IQuery[] The resulting declarations. | Improve this Doc View Source GenerateQueries(TObject) Generates the query. Declaration IQuery[] GenerateQueries(TObject queryObject) Parameters Type Name Description TObject queryObject The object to generate the queries from. Returns Type Description IQuery[] The resulting query"
  },
  "api/Inflatable.QueryProvider.Interfaces.IQueryProvider.html": {
    "href": "api/Inflatable.QueryProvider.Interfaces.IQueryProvider.html",
    "title": "Interface IQueryProvider | Inflatable API Reference",
    "keywords": "Interface IQueryProvider Query provider interface Namespace: Inflatable.QueryProvider.Interfaces Assembly: Inflatable.dll Syntax public interface IQueryProvider Properties | Improve this Doc View Source Providers Provider name associated with the query provider Declaration DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] Methods | Improve this Doc View Source Batch(IDatabase) Creates a batch for running commands Declaration SQLHelper Batch(IDatabase source) Parameters Type Name Description IDatabase source The source. Returns Type Description SQLHelper A batch object | Improve this Doc View Source CreateGenerator<TMappedClass>(IMappingSource) Creates a generator object Declaration IGenerator<TMappedClass> CreateGenerator<TMappedClass>(IMappingSource mappingInformation) where TMappedClass : class Parameters Type Name Description IMappingSource mappingInformation The mapping information. Returns Type Description IGenerator<TMappedClass> Generator object Type Parameters Name Description TMappedClass Class type to create the generator for"
  },
  "api/Inflatable.QueryProvider.Interfaces.html": {
    "href": "api/Inflatable.QueryProvider.Interfaces.html",
    "title": "Namespace Inflatable.QueryProvider.Interfaces | Inflatable API Reference",
    "keywords": "Namespace Inflatable.QueryProvider.Interfaces Interfaces IDataQueryGenerator<TObject> Data query generator interface IGenerator Generator interface IGenerator<TMappedClass> Generator interface ILinqQueryGenerator<TObject> Linq query generator IPropertyQueryGenerator<TObject> Property query generator IQueries Holds the default commands for an individual mapping IQuery Holds an individual query's information. IQueryGenerator<TObject> Query generator IQueryProvider Query provider interface"
  },
  "api/Inflatable.QueryProvider.MappingData.IQueryMapping.html": {
    "href": "api/Inflatable.QueryProvider.MappingData.IQueryMapping.html",
    "title": "Interface IQueryMapping | Inflatable API Reference",
    "keywords": "Interface IQueryMapping Query mapping interface Namespace: Inflatable.QueryProvider.MappingData Assembly: Inflatable.dll Syntax public interface IQueryMapping Properties | Improve this Doc View Source IDProperties Gets the identifier properties. Declaration List<IIDProperty> IDProperties { get; } Property Value Type Description List<IIDProperty> The identifier properties. | Improve this Doc View Source ParentMappings Gets the parent mappings. Declaration List<IMapping> ParentMappings { get; } Property Value Type Description List<IMapping> The parent mappings. | Improve this Doc View Source PrimaryParentMapping Gets the primary parent mapping (with primary ID). Declaration IMapping PrimaryParentMapping { get; } Property Value Type Description IMapping The primary parent mapping (with primary ID). | Improve this Doc View Source Schema Gets the schema. Declaration string Schema { get; } Property Value Type Description string The schema."
  },
  "api/Inflatable.QueryProvider.MappingData.IQueryPropertyMapping.html": {
    "href": "api/Inflatable.QueryProvider.MappingData.IQueryPropertyMapping.html",
    "title": "Interface IQueryPropertyMapping | Inflatable API Reference",
    "keywords": "Interface IQueryPropertyMapping Query property mapping information Namespace: Inflatable.QueryProvider.MappingData Assembly: Inflatable.dll Syntax public interface IQueryPropertyMapping Properties | Improve this Doc View Source ForeignIDs Gets the foreign ids. Declaration List<IIDProperty> ForeignIDs { get; } Property Value Type Description List<IIDProperty> The foreign ids."
  },
  "api/Inflatable.QueryProvider.MappingData.html": {
    "href": "api/Inflatable.QueryProvider.MappingData.html",
    "title": "Namespace Inflatable.QueryProvider.MappingData | Inflatable API Reference",
    "keywords": "Namespace Inflatable.QueryProvider.MappingData Interfaces IQueryMapping Query mapping interface IQueryPropertyMapping Query property mapping information"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.DataLoadQuery-1.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.DataLoadQuery-1.html",
    "title": "Class DataLoadQuery<TMappedClass> | Inflatable API Reference",
    "keywords": "Class DataLoadQuery<TMappedClass> Data load query Inheritance object QueryGeneratorBaseClass<TMappedClass> DataLoadQuery<TMappedClass> Implements IDataQueryGenerator<TMappedClass> IQueryGenerator<TMappedClass> Inherited Members QueryGeneratorBaseClass<TMappedClass>.AssociatedType QueryGeneratorBaseClass<TMappedClass>.MappingInformation QueryGeneratorBaseClass<TMappedClass>.ObjectPool QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IMapProperty, IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetForeignColumnName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetForeignParameterName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IMapProperty, IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IManyToManyProperty) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators Assembly: Inflatable.dll Syntax public class DataLoadQuery<TMappedClass> : QueryGeneratorBaseClass<TMappedClass>, IDataQueryGenerator<TMappedClass>, IQueryGenerator<TMappedClass> where TMappedClass : class Type Parameters Name Description TMappedClass The type of the mapped class. Constructors | Improve this Doc View Source DataLoadQuery(IMappingSource, ObjectPool<StringBuilder>) Initializes a new instance of the DataLoadQuery<TMappedClass> class. Declaration public DataLoadQuery(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters Type Name Description IMappingSource mappingInformation Mapping information ObjectPool<StringBuilder> objectPool The object pool. See Also QueryGeneratorBaseClass<TMappedClass> Properties | Improve this Doc View Source IDColumnInfo Gets the identifier column information. Declaration public IQueryColumnInfo[] IDColumnInfo { get; } Property Value Type Description IQueryColumnInfo[] The identifier column information. See Also QueryGeneratorBaseClass<TMappedClass> | Improve this Doc View Source QueryType Gets the type of the query. Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType The type of the query. Overrides QueryGeneratorBaseClass<TMappedClass>.QueryType See Also QueryGeneratorBaseClass<TMappedClass> Methods | Improve this Doc View Source GenerateDeclarations() Generates the declarations needed for the query. Declaration public override IQuery[] GenerateDeclarations() Returns Type Description IQuery[] The resulting declarations. Overrides QueryGeneratorBaseClass<TMappedClass>.GenerateDeclarations() See Also QueryGeneratorBaseClass<TMappedClass> | Improve this Doc View Source GenerateQueries(Dynamo[]) Generates the query. Declaration public IQuery[] GenerateQueries(Dynamo[] ids) Parameters Type Name Description Dynamo[] ids Returns Type Description IQuery[] The resulting query See Also QueryGeneratorBaseClass<TMappedClass> | Improve this Doc View Source GenerateQueries(TMappedClass) Generates the query. Declaration public override IQuery[] GenerateQueries(TMappedClass queryObject) Parameters Type Name Description TMappedClass queryObject The object to generate the queries from. Returns Type Description IQuery[] The resulting query Overrides QueryGeneratorBaseClass<TMappedClass>.GenerateQueries(TMappedClass) See Also QueryGeneratorBaseClass<TMappedClass> Implements IDataQueryGenerator<TObject> IQueryGenerator<TObject> See Also QueryGeneratorBaseClass<TMappedClass>"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.DeletePropertiesQuery-1.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.DeletePropertiesQuery-1.html",
    "title": "Class DeletePropertiesQuery<TMappedClass> | Inflatable API Reference",
    "keywords": "Class DeletePropertiesQuery<TMappedClass> Delete properties query Inheritance object QueryGeneratorBaseClass<TMappedClass> PropertyQueryGeneratorBaseClass<TMappedClass> DeletePropertiesQuery<TMappedClass> Implements IPropertyQueryGenerator<TMappedClass> IQueryGenerator<TMappedClass> Inherited Members PropertyQueryGeneratorBaseClass<TMappedClass>.GenerateQueries(TMappedClass) QueryGeneratorBaseClass<TMappedClass>.AssociatedType QueryGeneratorBaseClass<TMappedClass>.MappingInformation QueryGeneratorBaseClass<TMappedClass>.ObjectPool QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IMapProperty, IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetForeignColumnName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetForeignParameterName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IMapProperty, IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IManyToManyProperty) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators Assembly: Inflatable.dll Syntax public class DeletePropertiesQuery<TMappedClass> : PropertyQueryGeneratorBaseClass<TMappedClass>, IPropertyQueryGenerator<TMappedClass>, IQueryGenerator<TMappedClass> where TMappedClass : class Type Parameters Name Description TMappedClass The type of the mapped class. Constructors | Improve this Doc View Source DeletePropertiesQuery(IMappingSource, ObjectPool<StringBuilder>) Initializes a new instance of the SavePropertiesQuery<TMappedClass> class. Declaration public DeletePropertiesQuery(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters Type Name Description IMappingSource mappingInformation Mapping information ObjectPool<StringBuilder> objectPool The object pool. See Also PropertyQueryGeneratorBaseClass<TObject> Properties | Improve this Doc View Source QueryType Gets the type of the query. Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType The type of the query. Overrides QueryGeneratorBaseClass<TMappedClass>.QueryType See Also PropertyQueryGeneratorBaseClass<TObject> Methods | Improve this Doc View Source GenerateDeclarations() Generates the declarations needed for the query. Declaration public override IQuery[] GenerateDeclarations() Returns Type Description IQuery[] The resulting declarations. Overrides QueryGeneratorBaseClass<TMappedClass>.GenerateDeclarations() See Also PropertyQueryGeneratorBaseClass<TObject> | Improve this Doc View Source GenerateQueries(TMappedClass, IClassProperty) Generates the query. Declaration public override IQuery[] GenerateQueries(TMappedClass queryObject, IClassProperty property) Parameters Type Name Description TMappedClass queryObject The object to generate the queries from. IClassProperty property The property. Returns Type Description IQuery[] The resulting query Overrides PropertyQueryGeneratorBaseClass<TMappedClass>.GenerateQueries(TMappedClass, IClassProperty) See Also PropertyQueryGeneratorBaseClass<TObject> Implements IPropertyQueryGenerator<TObject> IQueryGenerator<TObject> See Also PropertyQueryGeneratorBaseClass<TObject>"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.DeleteQuery-1.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.DeleteQuery-1.html",
    "title": "Class DeleteQuery<TMappedClass> | Inflatable API Reference",
    "keywords": "Class DeleteQuery<TMappedClass> Delete query generator Inheritance object QueryGeneratorBaseClass<TMappedClass> DeleteQuery<TMappedClass> Implements IQueryGenerator<TMappedClass> Inherited Members QueryGeneratorBaseClass<TMappedClass>.AssociatedType QueryGeneratorBaseClass<TMappedClass>.MappingInformation QueryGeneratorBaseClass<TMappedClass>.ObjectPool QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IMapProperty, IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetForeignColumnName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetForeignParameterName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IMapProperty, IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IManyToManyProperty) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators Assembly: Inflatable.dll Syntax public class DeleteQuery<TMappedClass> : QueryGeneratorBaseClass<TMappedClass>, IQueryGenerator<TMappedClass> where TMappedClass : class Type Parameters Name Description TMappedClass The type of the mapped class. Constructors | Improve this Doc View Source DeleteQuery(IMappingSource, ObjectPool<StringBuilder>) Initializes a new instance of the DeleteQuery<TMappedClass> class. Declaration public DeleteQuery(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters Type Name Description IMappingSource mappingInformation The mapping information. ObjectPool<StringBuilder> objectPool The object pool. See Also QueryGeneratorBaseClass<TMappedClass> Properties | Improve this Doc View Source QueryType Gets the type of the query. Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType The type of the query. Overrides QueryGeneratorBaseClass<TMappedClass>.QueryType See Also QueryGeneratorBaseClass<TMappedClass> Methods | Improve this Doc View Source GenerateDeclarations() Generates the declarations needed for the query. Declaration public override IQuery[] GenerateDeclarations() Returns Type Description IQuery[] The resulting declarations. Overrides QueryGeneratorBaseClass<TMappedClass>.GenerateDeclarations() See Also QueryGeneratorBaseClass<TMappedClass> | Improve this Doc View Source GenerateQueries(TMappedClass) Generates a delete query. Declaration public override IQuery[] GenerateQueries(TMappedClass queryObject) Parameters Type Name Description TMappedClass queryObject The object to generate the queries from. Returns Type Description IQuery[] The resulting query Overrides QueryGeneratorBaseClass<TMappedClass>.GenerateQueries(TMappedClass) See Also QueryGeneratorBaseClass<TMappedClass> Implements IQueryGenerator<TObject> See Also QueryGeneratorBaseClass<TMappedClass>"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.HelperClasses.QueryGeneratorData.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.HelperClasses.QueryGeneratorData.html",
    "title": "Class QueryGeneratorData | Inflatable API Reference",
    "keywords": "Class QueryGeneratorData Generator query data Inheritance object QueryGeneratorData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.HelperClasses Assembly: Inflatable.dll Syntax public class QueryGeneratorData Constructors | Improve this Doc View Source QueryGeneratorData(IMapping, IEnumerable<IIDProperty>, string) Initializes a new instance of the QueryGeneratorData class. Declaration public QueryGeneratorData(IMapping associatedMapping, IEnumerable<IIDProperty> iDProperties, string queryText) Parameters Type Name Description IMapping associatedMapping The associated mapping. IEnumerable<IIDProperty> iDProperties The i d properties. string queryText The query text. Properties | Improve this Doc View Source AssociatedMapping Gets or sets the associated mapping. Declaration public IMapping AssociatedMapping { get; set; } Property Value Type Description IMapping The associated mapping. | Improve this Doc View Source IDProperties Gets or sets the identifier properties. Declaration public IEnumerable<IIDProperty> IDProperties { get; set; } Property Value Type Description IEnumerable<IIDProperty> The identifier properties. | Improve this Doc View Source QueryText Gets or sets the query text. Declaration public string QueryText { get; set; } Property Value Type Description string The query text."
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.HelperClasses.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.HelperClasses.html",
    "title": "Namespace Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.HelperClasses | Inflatable API Reference",
    "keywords": "Namespace Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.HelperClasses Classes QueryGeneratorData Generator query data"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.InsertQuery-1.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.InsertQuery-1.html",
    "title": "Class InsertQuery<TMappedClass> | Inflatable API Reference",
    "keywords": "Class InsertQuery<TMappedClass> Insert query generator Inheritance object QueryGeneratorBaseClass<TMappedClass> InsertQuery<TMappedClass> Implements IQueryGenerator<TMappedClass> Inherited Members QueryGeneratorBaseClass<TMappedClass>.AssociatedType QueryGeneratorBaseClass<TMappedClass>.MappingInformation QueryGeneratorBaseClass<TMappedClass>.ObjectPool QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IMapProperty, IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetForeignColumnName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetForeignParameterName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IMapProperty, IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IManyToManyProperty) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators Assembly: Inflatable.dll Syntax public class InsertQuery<TMappedClass> : QueryGeneratorBaseClass<TMappedClass>, IQueryGenerator<TMappedClass> where TMappedClass : class Type Parameters Name Description TMappedClass The type of the mapped class. Constructors | Improve this Doc View Source InsertQuery(IMappingSource, ObjectPool<StringBuilder>) Initializes a new instance of the InsertQuery<TMappedClass> class. Declaration public InsertQuery(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters Type Name Description IMappingSource mappingInformation The mapping information. ObjectPool<StringBuilder> objectPool The object pool. See Also QueryGeneratorBaseClass<TMappedClass> Properties | Improve this Doc View Source QueryType Gets the type of the query. Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType The type of the query. Overrides QueryGeneratorBaseClass<TMappedClass>.QueryType See Also QueryGeneratorBaseClass<TMappedClass> Methods | Improve this Doc View Source GenerateDeclarations() Generates the declarations needed for the query. Declaration public override IQuery[] GenerateDeclarations() Returns Type Description IQuery[] The resulting declarations. Overrides QueryGeneratorBaseClass<TMappedClass>.GenerateDeclarations() See Also QueryGeneratorBaseClass<TMappedClass> | Improve this Doc View Source GenerateQueries(TMappedClass) Generates the insert query. Declaration public override IQuery[] GenerateQueries(TMappedClass queryObject) Parameters Type Name Description TMappedClass queryObject The object to generate the queries from. Returns Type Description IQuery[] The resulting query Overrides QueryGeneratorBaseClass<TMappedClass>.GenerateQueries(TMappedClass) See Also QueryGeneratorBaseClass<TMappedClass> Implements IQueryGenerator<TObject> See Also QueryGeneratorBaseClass<TMappedClass>"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.LinqQueryGenerator-1.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.LinqQueryGenerator-1.html",
    "title": "Class LinqQueryGenerator<TMappedClass> | Inflatable API Reference",
    "keywords": "Class LinqQueryGenerator<TMappedClass> SQL Server Linq query generator Inheritance object QueryGeneratorBaseClass<TMappedClass> LinqQueryGeneratorBaseClass<TMappedClass> LinqQueryGenerator<TMappedClass> Implements ILinqQueryGenerator<TMappedClass> IQueryGenerator<TMappedClass> Inherited Members LinqQueryGeneratorBaseClass<TMappedClass>.GenerateQueries(TMappedClass) QueryGeneratorBaseClass<TMappedClass>.AssociatedType QueryGeneratorBaseClass<TMappedClass>.MappingInformation QueryGeneratorBaseClass<TMappedClass>.ObjectPool QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IMapProperty, IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetForeignColumnName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetForeignParameterName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IMapProperty, IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IManyToManyProperty) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators Assembly: Inflatable.dll Syntax public class LinqQueryGenerator<TMappedClass> : LinqQueryGeneratorBaseClass<TMappedClass>, ILinqQueryGenerator<TMappedClass>, IQueryGenerator<TMappedClass> where TMappedClass : class Type Parameters Name Description TMappedClass The type of the mapped class. Constructors | Improve this Doc View Source LinqQueryGenerator(IMappingSource, ObjectPool<StringBuilder>) Initializes a new instance of the LinqQueryGenerator<TMappedClass> class. Declaration public LinqQueryGenerator(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters Type Name Description IMappingSource mappingInformation The mapping information. ObjectPool<StringBuilder> objectPool Exceptions Type Condition ArgumentNullException mappingInformation See Also ILinqQueryGenerator<TObject> Properties | Improve this Doc View Source QueryType Gets the type of the query. Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType The type of the query. Overrides QueryGeneratorBaseClass<TMappedClass>.QueryType See Also ILinqQueryGenerator<TObject> Methods | Improve this Doc View Source GenerateDeclarations() Generates the declarations needed for the query. Declaration public override IQuery[] GenerateDeclarations() Returns Type Description IQuery[] The resulting declarations. Overrides QueryGeneratorBaseClass<TMappedClass>.GenerateDeclarations() See Also ILinqQueryGenerator<TObject> | Improve this Doc View Source GenerateQueries(QueryData<TMappedClass>) Generates the query. Declaration public override IQuery[] GenerateQueries(QueryData<TMappedClass> data) Parameters Type Name Description QueryData<TMappedClass> data The data. Returns Type Description IQuery[] The resulting query Overrides LinqQueryGeneratorBaseClass<TMappedClass>.GenerateQueries(QueryData<TMappedClass>) See Also ILinqQueryGenerator<TObject> Implements ILinqQueryGenerator<TObject> IQueryGenerator<TObject> See Also ILinqQueryGenerator<TObject>"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.LoadPropertiesQuery-1.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.LoadPropertiesQuery-1.html",
    "title": "Class LoadPropertiesQuery<TMappedClass> | Inflatable API Reference",
    "keywords": "Class LoadPropertiesQuery<TMappedClass> Load properties query Inheritance object QueryGeneratorBaseClass<TMappedClass> PropertyQueryGeneratorBaseClass<TMappedClass> LoadPropertiesQuery<TMappedClass> Implements IPropertyQueryGenerator<TMappedClass> IQueryGenerator<TMappedClass> Inherited Members PropertyQueryGeneratorBaseClass<TMappedClass>.GenerateQueries(TMappedClass) QueryGeneratorBaseClass<TMappedClass>.AssociatedType QueryGeneratorBaseClass<TMappedClass>.MappingInformation QueryGeneratorBaseClass<TMappedClass>.ObjectPool QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IMapProperty, IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetForeignColumnName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetForeignParameterName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IMapProperty, IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IManyToManyProperty) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators Assembly: Inflatable.dll Syntax public class LoadPropertiesQuery<TMappedClass> : PropertyQueryGeneratorBaseClass<TMappedClass>, IPropertyQueryGenerator<TMappedClass>, IQueryGenerator<TMappedClass> where TMappedClass : class Type Parameters Name Description TMappedClass The type of the mapped class. Constructors | Improve this Doc View Source LoadPropertiesQuery(IMappingSource, ObjectPool<StringBuilder>) Initializes a new instance of the LoadPropertiesQuery<TMappedClass> class. Declaration public LoadPropertiesQuery(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters Type Name Description IMappingSource mappingInformation Mapping information ObjectPool<StringBuilder> objectPool The object pool. See Also PropertyQueryGeneratorBaseClass<TObject> Properties | Improve this Doc View Source QueryType Gets the type of the query. Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType The type of the query. Overrides QueryGeneratorBaseClass<TMappedClass>.QueryType See Also PropertyQueryGeneratorBaseClass<TObject> Methods | Improve this Doc View Source GenerateDeclarations() Generates the declarations needed for the query. Declaration public override IQuery[] GenerateDeclarations() Returns Type Description IQuery[] The resulting declarations. Overrides QueryGeneratorBaseClass<TMappedClass>.GenerateDeclarations() See Also PropertyQueryGeneratorBaseClass<TObject> | Improve this Doc View Source GenerateQueries(TMappedClass, IClassProperty) Generates the query. Declaration public override IQuery[] GenerateQueries(TMappedClass queryObject, IClassProperty property) Parameters Type Name Description TMappedClass queryObject The object to generate the queries from. IClassProperty property The property. Returns Type Description IQuery[] The resulting query Overrides PropertyQueryGeneratorBaseClass<TMappedClass>.GenerateQueries(TMappedClass, IClassProperty) See Also PropertyQueryGeneratorBaseClass<TObject> Implements IPropertyQueryGenerator<TObject> IQueryGenerator<TObject> See Also PropertyQueryGeneratorBaseClass<TObject>"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.SavePropertiesQuery-1.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.SavePropertiesQuery-1.html",
    "title": "Class SavePropertiesQuery<TMappedClass> | Inflatable API Reference",
    "keywords": "Class SavePropertiesQuery<TMappedClass> Save properties query generator Inheritance object QueryGeneratorBaseClass<TMappedClass> PropertyQueryGeneratorBaseClass<TMappedClass> SavePropertiesQuery<TMappedClass> Implements IPropertyQueryGenerator<TMappedClass> IQueryGenerator<TMappedClass> Inherited Members PropertyQueryGeneratorBaseClass<TMappedClass>.GenerateQueries(TMappedClass) QueryGeneratorBaseClass<TMappedClass>.AssociatedType QueryGeneratorBaseClass<TMappedClass>.MappingInformation QueryGeneratorBaseClass<TMappedClass>.ObjectPool QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IMapProperty, IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetForeignColumnName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetForeignParameterName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IMapProperty, IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IManyToManyProperty) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators Assembly: Inflatable.dll Syntax public class SavePropertiesQuery<TMappedClass> : PropertyQueryGeneratorBaseClass<TMappedClass>, IPropertyQueryGenerator<TMappedClass>, IQueryGenerator<TMappedClass> where TMappedClass : class Type Parameters Name Description TMappedClass The type of the mapped class. Constructors | Improve this Doc View Source SavePropertiesQuery(IMappingSource, ObjectPool<StringBuilder>) Initializes a new instance of the SavePropertiesQuery<TMappedClass> class. Declaration public SavePropertiesQuery(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters Type Name Description IMappingSource mappingInformation Mapping information ObjectPool<StringBuilder> objectPool The object pool. See Also PropertyQueryGeneratorBaseClass<TObject> Properties | Improve this Doc View Source QueryType Gets the type of the query. Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType The type of the query. Overrides QueryGeneratorBaseClass<TMappedClass>.QueryType See Also PropertyQueryGeneratorBaseClass<TObject> Methods | Improve this Doc View Source GenerateDeclarations() Generates the declarations needed for the query. Declaration public override IQuery[] GenerateDeclarations() Returns Type Description IQuery[] The resulting declarations. Overrides QueryGeneratorBaseClass<TMappedClass>.GenerateDeclarations() See Also PropertyQueryGeneratorBaseClass<TObject> | Improve this Doc View Source GenerateQueries(TMappedClass, IClassProperty) Generates the query. Declaration public override IQuery[] GenerateQueries(TMappedClass queryObject, IClassProperty property) Parameters Type Name Description TMappedClass queryObject The object to generate the queries from. IClassProperty property The property. Returns Type Description IQuery[] The resulting query Overrides PropertyQueryGeneratorBaseClass<TMappedClass>.GenerateQueries(TMappedClass, IClassProperty) See Also PropertyQueryGeneratorBaseClass<TObject> Implements IPropertyQueryGenerator<TObject> IQueryGenerator<TObject> See Also PropertyQueryGeneratorBaseClass<TObject>"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.UpdateQuery-1.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.UpdateQuery-1.html",
    "title": "Class UpdateQuery<TMappedClass> | Inflatable API Reference",
    "keywords": "Class UpdateQuery<TMappedClass> Update query generator Inheritance object QueryGeneratorBaseClass<TMappedClass> UpdateQuery<TMappedClass> Implements IQueryGenerator<TMappedClass> Inherited Members QueryGeneratorBaseClass<TMappedClass>.AssociatedType QueryGeneratorBaseClass<TMappedClass>.MappingInformation QueryGeneratorBaseClass<TMappedClass>.ObjectPool QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetColumnName(IMapProperty, IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetForeignColumnName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetForeignParameterName(IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IMapProperty, IMapping) QueryGeneratorBaseClass<TMappedClass>.GetParameterName(IProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParameterType(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IAutoIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentColumnName(IMapping, IIDProperty, string) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IAutoIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetParentParameterName(IIDProperty) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IMapping, string) QueryGeneratorBaseClass<TMappedClass>.GetTableName(IManyToManyProperty) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators Assembly: Inflatable.dll Syntax public class UpdateQuery<TMappedClass> : QueryGeneratorBaseClass<TMappedClass>, IQueryGenerator<TMappedClass> where TMappedClass : class Type Parameters Name Description TMappedClass The type of the mapped class. Constructors | Improve this Doc View Source UpdateQuery(IMappingSource, ObjectPool<StringBuilder>) Initializes a new instance of the UpdateQuery<TMappedClass> class. Declaration public UpdateQuery(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters Type Name Description IMappingSource mappingInformation The mapping information. ObjectPool<StringBuilder> objectPool The object pool. See Also QueryGeneratorBaseClass<TMappedClass> Properties | Improve this Doc View Source QueryType Gets the type of the query. Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType The type of the query. Overrides QueryGeneratorBaseClass<TMappedClass>.QueryType See Also QueryGeneratorBaseClass<TMappedClass> Methods | Improve this Doc View Source GenerateDeclarations() Generates the declarations needed for the query. Declaration public override IQuery[] GenerateDeclarations() Returns Type Description IQuery[] The resulting declarations. Overrides QueryGeneratorBaseClass<TMappedClass>.GenerateDeclarations() See Also QueryGeneratorBaseClass<TMappedClass> | Improve this Doc View Source GenerateQueries(TMappedClass) Generates the query. Declaration public override IQuery[] GenerateQueries(TMappedClass queryObject) Parameters Type Name Description TMappedClass queryObject The object to generate the queries from. Returns Type Description IQuery[] The resulting query Overrides QueryGeneratorBaseClass<TMappedClass>.GenerateQueries(TMappedClass) See Also QueryGeneratorBaseClass<TMappedClass> Implements IQueryGenerator<TObject> See Also QueryGeneratorBaseClass<TMappedClass>"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators.html",
    "title": "Namespace Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators | Inflatable API Reference",
    "keywords": "Namespace Inflatable.QueryProvider.Providers.SQLServer.QueryGenerators Classes DataLoadQuery<TMappedClass> Data load query DeletePropertiesQuery<TMappedClass> Delete properties query DeleteQuery<TMappedClass> Delete query generator InsertQuery<TMappedClass> Insert query generator LinqQueryGenerator<TMappedClass> SQL Server Linq query generator LoadPropertiesQuery<TMappedClass> Load properties query SavePropertiesQuery<TMappedClass> Save properties query generator UpdateQuery<TMappedClass> Update query generator"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.SQLServerGenerator-1.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.SQLServerGenerator-1.html",
    "title": "Class SQLServerGenerator<TMappedClass> | Inflatable API Reference",
    "keywords": "Class SQLServerGenerator<TMappedClass> SQL Server query generator Inheritance object GeneratorBaseClass<TMappedClass> SQLServerGenerator<TMappedClass> Implements IGenerator<TMappedClass> IGenerator Inherited Members GeneratorBaseClass<TMappedClass>.AssociatedType GeneratorBaseClass<TMappedClass>.MappingInformation GeneratorBaseClass<TMappedClass>.QueryGenerators GeneratorBaseClass<TMappedClass>.GenerateDeclarations(QueryType) GeneratorBaseClass<TMappedClass>.GenerateQueries(IQueryData) GeneratorBaseClass<TMappedClass>.GenerateQueries(QueryType, object) GeneratorBaseClass<TMappedClass>.GenerateQueries(QueryType, object, IClassProperty) GeneratorBaseClass<TMappedClass>.GenerateQueries(QueryType, Dynamo[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.QueryProvider.Providers.SQLServer Assembly: Inflatable.dll Syntax public class SQLServerGenerator<TMappedClass> : GeneratorBaseClass<TMappedClass>, IGenerator<TMappedClass>, IGenerator where TMappedClass : class Type Parameters Name Description TMappedClass The type of the mapped class. Constructors | Improve this Doc View Source SQLServerGenerator(IMappingSource, ObjectPool<StringBuilder>) Initializes a new instance of the SQLServerGenerator<TMappedClass> class. Declaration public SQLServerGenerator(IMappingSource mappingInformation, ObjectPool<StringBuilder> objectPool) Parameters Type Name Description IMappingSource mappingInformation The mapping information. ObjectPool<StringBuilder> objectPool The object pool. Exceptions Type Condition ArgumentNullException mappingInformation See Also IGenerator<TMappedClass> Implements IGenerator<TMappedClass> IGenerator See Also IGenerator<TMappedClass>"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.SQLServerQueryProvider.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.SQLServerQueryProvider.html",
    "title": "Class SQLServerQueryProvider | Inflatable API Reference",
    "keywords": "Class SQLServerQueryProvider SQL Server query provider Inheritance object SQLServerQueryProvider Implements IQueryProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.QueryProvider.Providers.SQLServer Assembly: Inflatable.dll Syntax public class SQLServerQueryProvider : IQueryProvider Constructors | Improve this Doc View Source SQLServerQueryProvider(IConfiguration, ObjectPool<StringBuilder>?, ILogger<SQLHelper>) Initializes a new instance of the SQLServerQueryProvider class. Declaration public SQLServerQueryProvider(IConfiguration configuration, ObjectPool<StringBuilder>? stringBuilderPool, ILogger<SQLHelper> logger = null) Parameters Type Name Description IConfiguration configuration The configuration. ObjectPool<StringBuilder> stringBuilderPool The string builder pool. ILogger<SQLHelper> logger The logger. Exceptions Type Condition ArgumentNullException configuration See Also IQueryProvider Properties | Improve this Doc View Source Configuration Gets the configuration. Declaration public IConfiguration Configuration { get; } Property Value Type Description IConfiguration The configuration. See Also IQueryProvider | Improve this Doc View Source Providers Provider name associated with the query provider Declaration public DbProviderFactory[] Providers { get; } Property Value Type Description DbProviderFactory[] See Also IQueryProvider Methods | Improve this Doc View Source Batch(IDatabase) Creates a batch for running commands Declaration public SQLHelper Batch(IDatabase source) Parameters Type Name Description IDatabase source The source. Returns Type Description SQLHelper A batch object See Also IQueryProvider | Improve this Doc View Source CreateGenerator<TMappedClass>(IMappingSource) Creates a generator object Declaration public IGenerator<TMappedClass> CreateGenerator<TMappedClass>(IMappingSource mappingInformation) where TMappedClass : class Parameters Type Name Description IMappingSource mappingInformation The mapping information. Returns Type Description IGenerator<TMappedClass> Generator object Type Parameters Name Description TMappedClass Class type to create the generator for See Also IQueryProvider Implements IQueryProvider See Also IQueryProvider"
  },
  "api/Inflatable.QueryProvider.Providers.SQLServer.html": {
    "href": "api/Inflatable.QueryProvider.Providers.SQLServer.html",
    "title": "Namespace Inflatable.QueryProvider.Providers.SQLServer | Inflatable API Reference",
    "keywords": "Namespace Inflatable.QueryProvider.Providers.SQLServer Classes SQLServerGenerator<TMappedClass> SQL Server query generator SQLServerQueryProvider SQL Server query provider"
  },
  "api/Inflatable.QueryProvider.Queries.html": {
    "href": "api/Inflatable.QueryProvider.Queries.html",
    "title": "Class Queries | Inflatable API Reference",
    "keywords": "Class Queries Query holder Inheritance object Queries Implements IQueries IDictionary<QueryType, IQuery> ICollection<KeyValuePair<QueryType, IQuery>> IEnumerable<KeyValuePair<QueryType, IQuery>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.QueryProvider Assembly: Inflatable.dll Syntax public class Queries : IQueries, IDictionary<QueryType, IQuery?>, ICollection<KeyValuePair<QueryType, IQuery?>>, IEnumerable<KeyValuePair<QueryType, IQuery?>>, IEnumerable Properties | Improve this Doc View Source Count Gets the count. Declaration public int Count { get; } Property Value Type Description int The count. See Also IQueries | Improve this Doc View Source IsReadOnly Gets a value indicating whether this instance is read only. Declaration public bool IsReadOnly { get; } Property Value Type Description bool true if this instance is read only; otherwise, false. See Also IQueries | Improve this Doc View Source this[QueryType] Gets or sets the IQuery with the specified key. Declaration public IQuery? this[QueryType key] { get; set; } Parameters Type Name Description QueryType key The key. Property Value Type Description IQuery The IQuery. See Also IQueries | Improve this Doc View Source Keys Gets the keys. Declaration public ICollection<QueryType> Keys { get; } Property Value Type Description ICollection<QueryType> The keys. See Also IQueries | Improve this Doc View Source Values Gets the values. Declaration public ICollection<IQuery?> Values { get; } Property Value Type Description ICollection<IQuery> The values. See Also IQueries Methods | Improve this Doc View Source Add(QueryType, IQuery?) Adds the specified key. Declaration public void Add(QueryType key, IQuery? value) Parameters Type Name Description QueryType key The key. IQuery value The value. See Also IQueries | Improve this Doc View Source Add(KeyValuePair<QueryType, IQuery?>) Adds the specified item. Declaration public void Add(KeyValuePair<QueryType, IQuery?> item) Parameters Type Name Description KeyValuePair<QueryType, IQuery> item The item. See Also IQueries | Improve this Doc View Source Clear() Clears this instance. Declaration public void Clear() See Also IQueries | Improve this Doc View Source Contains(KeyValuePair<QueryType, IQuery?>) Determines whether [contains] [the specified item]. Declaration public bool Contains(KeyValuePair<QueryType, IQuery?> item) Parameters Type Name Description KeyValuePair<QueryType, IQuery> item The item. Returns Type Description bool true if [contains] [the specified item]; otherwise, false. See Also IQueries | Improve this Doc View Source ContainsKey(QueryType) Determines whether the specified key contains key. Declaration public bool ContainsKey(QueryType key) Parameters Type Name Description QueryType key The key. Returns Type Description bool true if the specified key contains key; otherwise, false. See Also IQueries | Improve this Doc View Source CopyTo(KeyValuePair<QueryType, IQuery?>[], int) Copies to. Declaration public void CopyTo(KeyValuePair<QueryType, IQuery?>[] array, int arrayIndex) Parameters Type Name Description KeyValuePair<QueryType, IQuery>[] array The array. int arrayIndex Index of the array. See Also IQueries | Improve this Doc View Source GetEnumerator() Gets the enumerator. Declaration public IEnumerator<KeyValuePair<QueryType, IQuery?>>? GetEnumerator() Returns Type Description IEnumerator<KeyValuePair<QueryType, IQuery>> The enumerator See Also IQueries | Improve this Doc View Source Remove(QueryType) Removes the specified key. Declaration public bool Remove(QueryType key) Parameters Type Name Description QueryType key The key. Returns Type Description bool True if it is removed, false otherwise. See Also IQueries | Improve this Doc View Source Remove(KeyValuePair<QueryType, IQuery?>) Removes the specified item. Declaration public bool Remove(KeyValuePair<QueryType, IQuery?> item) Parameters Type Name Description KeyValuePair<QueryType, IQuery> item The item. Returns Type Description bool True if it is removed, false otherwise. See Also IQueries | Improve this Doc View Source TryGetValue(QueryType, out IQuery?) Tries the get value. Declaration public bool TryGetValue(QueryType key, out IQuery? value) Parameters Type Name Description QueryType key The key. IQuery value The value. Returns Type Description bool True if it is found, false otherwise. See Also IQueries Implements IQueries IDictionary<TKey, TValue> ICollection<T> IEnumerable<T> IEnumerable See Also IQueries"
  },
  "api/Inflatable.QueryProvider.Query.html": {
    "href": "api/Inflatable.QueryProvider.Query.html",
    "title": "Class Query | Inflatable API Reference",
    "keywords": "Class Query Query holder Inheritance object Query Implements IQuery Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.QueryProvider Assembly: Inflatable.dll Syntax public class Query : IQuery Constructors | Improve this Doc View Source Query(Type, CommandType, string, QueryType, params IParameter?[]) Initializes a new instance of the Query class. Declaration public Query(Type returnType, CommandType databaseCommandType, string queryString, QueryType queryType, params IParameter?[] parameters) Parameters Type Name Description Type returnType Type of the return. CommandType databaseCommandType Type of the database command. string queryString The query string. QueryType queryType Type of the query. IParameter[] parameters The parameters. See Also IQuery Properties | Improve this Doc View Source DatabaseCommandType Gets the type of the database command. Declaration public CommandType DatabaseCommandType { get; set; } Property Value Type Description CommandType The type of the database command. See Also IQuery | Improve this Doc View Source Parameters Gets or sets the parameters. Declaration public IParameter?[] Parameters { get; set; } Property Value Type Description IParameter[] The parameters. See Also IQuery | Improve this Doc View Source QueryString Gets the query string. Declaration public string QueryString { get; set; } Property Value Type Description string The query string. See Also IQuery | Improve this Doc View Source QueryType Gets the type of the query. Declaration public QueryType QueryType { get; set; } Property Value Type Description QueryType The type of the query. See Also IQuery | Improve this Doc View Source ReturnType Gets the type of the return value. Declaration public Type ReturnType { get; set; } Property Value Type Description Type The type of the return value. See Also IQuery Implements IQuery See Also IQuery"
  },
  "api/Inflatable.QueryProvider.QueryProviderManager.html": {
    "href": "api/Inflatable.QueryProvider.QueryProviderManager.html",
    "title": "Class QueryProviderManager | Inflatable API Reference",
    "keywords": "Class QueryProviderManager Query provider manager Inheritance object QueryProviderManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.QueryProvider Assembly: Inflatable.dll Syntax public class QueryProviderManager Constructors | Improve this Doc View Source QueryProviderManager(IEnumerable<IQueryProvider>, ILogger<QueryProviderManager>) Initializes a new instance of the QueryProviderManager class. Declaration public QueryProviderManager(IEnumerable<IQueryProvider> providers, ILogger<QueryProviderManager> logger = null) Parameters Type Name Description IEnumerable<IQueryProvider> providers The providers. ILogger<QueryProviderManager> logger The logger. Exceptions Type Condition ArgumentNullException providers Properties | Improve this Doc View Source Logger Gets the logger. Declaration public ILogger Logger { get; } Property Value Type Description ILogger The logger. | Improve this Doc View Source Providers Gets the providers. Declaration public Dictionary<DbProviderFactory, IQueryProvider> Providers { get; } Property Value Type Description Dictionary<DbProviderFactory, IQueryProvider> The providers. Methods | Improve this Doc View Source CreateBatch(IDatabase) Creates a batch. Declaration public SQLHelper CreateBatch(IDatabase source) Parameters Type Name Description IDatabase source The source. Returns Type Description SQLHelper Creates a batch Exceptions Type Condition ArgumentNullException source ArgumentException Provider not found | Improve this Doc View Source CreateGenerator(Type, IMappingSource) Creates a query generator. Declaration public IGenerator? CreateGenerator(Type type, IMappingSource mappingInfo) Parameters Type Name Description Type type The type of the mapped class.. IMappingSource mappingInfo The mapping information. Returns Type Description IGenerator The requested query generator. | Improve this Doc View Source CreateGenerator<TMappedClass>(IMappingSource) Creates a query generator. Declaration public IGenerator<TMappedClass>? CreateGenerator<TMappedClass>(IMappingSource mappingInfo) where TMappedClass : class Parameters Type Name Description IMappingSource mappingInfo The mapping information. Returns Type Description IGenerator<TMappedClass> The requested query generator Type Parameters Name Description TMappedClass The type of the mapped class. Exceptions Type Condition ArgumentNullException mappingInfo ArgumentException Provider not found"
  },
  "api/Inflatable.QueryProvider.QueryResults.html": {
    "href": "api/Inflatable.QueryProvider.QueryResults.html",
    "title": "Class QueryResults | Inflatable API Reference",
    "keywords": "Class QueryResults Query results Inheritance object QueryResults Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.QueryProvider Assembly: Inflatable.dll Syntax public class QueryResults Constructors | Improve this Doc View Source QueryResults(IQuery, IEnumerable<Dynamo>, ISession, Aspectus) Initializes a new instance of the QueryResults class. Declaration public QueryResults(IQuery query, IEnumerable<Dynamo> values, ISession session, Aspectus aspectus) Parameters Type Name Description IQuery query The query. IEnumerable<Dynamo> values The values. ISession session The session. Aspectus aspectus The aspectus. Exceptions Type Condition ArgumentNullException session or query ArgumentNullException query Properties | Improve this Doc View Source Aspectus Declaration public Aspectus Aspectus { get; } Property Value Type Description Aspectus | Improve this Doc View Source Query Gets the query. Declaration public IQuery Query { get; } Property Value Type Description IQuery The query. | Improve this Doc View Source Session Gets the session. Declaration public ISession Session { get; } Property Value Type Description ISession The session. | Improve this Doc View Source Values Gets the values. Declaration public List<Dynamo> Values { get; } Property Value Type Description List<Dynamo> The values. Methods | Improve this Doc View Source CacheValues(string, List<QueryResults>, ICache?, InflatableOptions) Gets the cached items as a list. Declaration public static void CacheValues(string keyName, List<QueryResults> results, ICache? cache, InflatableOptions inflatableOptions) Parameters Type Name Description string keyName Name of the key. List<QueryResults> results The results. ICache cache The cache. InflatableOptions inflatableOptions The inflatable options. | Improve this Doc View Source CanCopy(QueryResults, IEnumerable<IIDProperty>) Determines whether this instance can copy the specified results. Declaration public bool CanCopy(QueryResults results, IEnumerable<IIDProperty> idProperties) Parameters Type Name Description QueryResults results The results. IEnumerable<IIDProperty> idProperties The identifier properties. Returns Type Description bool true if this instance can copy the specified results; otherwise, false. | Improve this Doc View Source ConvertValues<TObject>() Converts the values. Declaration public IList<TObject> ConvertValues<TObject>() where TObject : class Returns Type Description IList<TObject> The resulting list of objects. Type Parameters Name Description TObject The type of the object. | Improve this Doc View Source Copy(QueryResults, IEnumerable<IIDProperty>) Copies the specified return value. Declaration public void Copy(QueryResults results, IEnumerable<IIDProperty> idProperties) Parameters Type Name Description QueryResults results The results. IEnumerable<IIDProperty> idProperties The identifier properties. | Improve this Doc View Source CopyOrAdd(QueryResults, IEnumerable<IIDProperty>) Copies the specified return value. Declaration public void CopyOrAdd(QueryResults results, IEnumerable<IIDProperty> idProperties) Parameters Type Name Description QueryResults results The results. IEnumerable<IIDProperty> idProperties The identifier properties. | Improve this Doc View Source RemoveCacheTag(string, ICache?) Removes the cache tag. Declaration public static void RemoveCacheTag(string name, ICache? cache) Parameters Type Name Description string name The name. ICache cache The cache. | Improve this Doc View Source TryGetCached(string, ICache?, out List<QueryResults>) Gets the cached value. Declaration public static bool TryGetCached(string keyName, ICache? cache, out List<QueryResults> results) Parameters Type Name Description string keyName Name of the key. ICache cache The cache. List<QueryResults> results The results. Returns Type Description bool The cached value"
  },
  "api/Inflatable.QueryProvider.html": {
    "href": "api/Inflatable.QueryProvider.html",
    "title": "Namespace Inflatable.QueryProvider | Inflatable API Reference",
    "keywords": "Namespace Inflatable.QueryProvider Classes CachedResult Cached result Queries Query holder Query Query holder QueryProviderManager Query provider manager QueryResults Query results"
  },
  "api/Inflatable.Registration.InflatableOptions.html": {
    "href": "api/Inflatable.Registration.InflatableOptions.html",
    "title": "Class InflatableOptions | Inflatable API Reference",
    "keywords": "Class InflatableOptions Inflatable options Inheritance object InflatableOptions Implements IOptions<InflatableOptions> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Registration Assembly: Inflatable.dll Syntax public class InflatableOptions : IOptions<InflatableOptions> Properties | Improve this Doc View Source AbsoluteExpirationQueriesKeptInCache Gets or sets the absolute expiration queries kept in cache. Declaration public TimeSpan AbsoluteExpirationQueriesKeptInCache { get; set; } Property Value Type Description TimeSpan The absolute expiration queries kept in cache. See Also IOptions<TOptions> | Improve this Doc View Source Default Gets the default. Declaration public static InflatableOptions Default { get; } Property Value Type Description InflatableOptions The default. See Also IOptions<TOptions> | Improve this Doc View Source MaxCacheSize Gets or sets the maximum size. Declaration public long? MaxCacheSize { get; set; } Property Value Type Description long? The maximum size. See Also IOptions<TOptions> | Improve this Doc View Source ScanFrequency Gets or sets the scan frequency. Declaration public TimeSpan ScanFrequency { get; set; } Property Value Type Description TimeSpan The scan frequency. See Also IOptions<TOptions> | Improve this Doc View Source SlidingExpirationQueriesKeptInCache Gets or sets the sliding expiration queries kept in cache. Declaration public TimeSpan SlidingExpirationQueriesKeptInCache { get; set; } Property Value Type Description TimeSpan The sliding expiration queries kept in cache. See Also IOptions<TOptions> | Improve this Doc View Source Value Gets the default configured Options instance. Declaration public InflatableOptions Value { get; } Property Value Type Description InflatableOptions See Also IOptions<TOptions> Implements IOptions<TOptions> See Also IOptions<TOptions>"
  },
  "api/Inflatable.Registration.html": {
    "href": "api/Inflatable.Registration.html",
    "title": "Namespace Inflatable.Registration | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Registration Classes InflatableOptions Inflatable options"
  },
  "api/Inflatable.Schema.DataModel.html": {
    "href": "api/Inflatable.Schema.DataModel.html",
    "title": "Class DataModel | Inflatable API Reference",
    "keywords": "Class DataModel Data model class Inheritance object DataModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Schema Assembly: Inflatable.dll Syntax public class DataModel Constructors | Improve this Doc View Source DataModel(IMappingSource, IConfiguration, DataModeler, Sherlock, SQLHelper, ILogger?) Initializes a new instance of the DataModel class. Declaration public DataModel(IMappingSource source, IConfiguration config, DataModeler dataModeler, Sherlock sherlock, SQLHelper batch, ILogger? logger = null) Parameters Type Name Description IMappingSource source The source. IConfiguration config The configuration. DataModeler dataModeler The data modeler. Sherlock sherlock The sherlock. SQLHelper batch The batch. ILogger logger The logger. Exceptions Type Condition ArgumentNullException source or config or logger Properties | Improve this Doc View Source GeneratedSchemaChanges Gets the generated schema changes. Declaration public string[] GeneratedSchemaChanges { get; } Property Value Type Description string[] The generated schema changes. | Improve this Doc View Source SourceSpec Gets the source spec. Declaration public ISource SourceSpec { get; } Property Value Type Description ISource The source spec."
  },
  "api/Inflatable.Schema.SchemaManager.html": {
    "href": "api/Inflatable.Schema.SchemaManager.html",
    "title": "Class SchemaManager | Inflatable API Reference",
    "keywords": "Class SchemaManager Model manager Inheritance object SchemaManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Schema Assembly: Inflatable.dll Syntax public class SchemaManager Constructors | Improve this Doc View Source SchemaManager(MappingManager, IConfiguration, DataModeler, Sherlock, SQLHelper, ILogger<SchemaManager>) Initializes a new instance of the SchemaManager class. Declaration public SchemaManager(MappingManager mappings, IConfiguration config, DataModeler dataModeler, Sherlock sherlock, SQLHelper sQLHelper, ILogger<SchemaManager> logger = null) Parameters Type Name Description MappingManager mappings The mappings. IConfiguration config The configuration. DataModeler dataModeler The data modeler. Sherlock sherlock The sherlock analyzer. SQLHelper sQLHelper The s ql helper. ILogger<SchemaManager> logger The logger. Exceptions Type Condition ArgumentNullException logger Properties | Improve this Doc View Source Models Gets the models. Declaration public IEnumerable<DataModel> Models { get; } Property Value Type Description IEnumerable<DataModel> The models."
  },
  "api/Inflatable.Schema.html": {
    "href": "api/Inflatable.Schema.html",
    "title": "Namespace Inflatable.Schema | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Schema Classes DataModel Data model class SchemaManager Model manager"
  },
  "api/Inflatable.Sessions.Commands.BaseClasses.CommandBaseClass.html": {
    "href": "api/Inflatable.Sessions.Commands.BaseClasses.CommandBaseClass.html",
    "title": "Class CommandBaseClass | Inflatable API Reference",
    "keywords": "Class CommandBaseClass Command base class Inheritance object CommandBaseClass DeleteCommand SaveCommand Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Sessions.Commands.BaseClasses Assembly: Inflatable.dll Syntax public abstract class CommandBaseClass : ICommand Constructors | Improve this Doc View Source CommandBaseClass(MappingManager, QueryProviderManager, ICache, object[]) Initializes a new instance of the CommandBaseClass class. Declaration protected CommandBaseClass(MappingManager mappingManager, QueryProviderManager queryProviderManager, ICache cache, object[] objects) Parameters Type Name Description MappingManager mappingManager The mapping manager. QueryProviderManager queryProviderManager The query provider manager. ICache cache The cache. object[] objects The objects. See Also ICommand Properties | Improve this Doc View Source Cache Gets the cache. Declaration public ICache Cache { get; } Property Value Type Description ICache The cache. See Also ICommand | Improve this Doc View Source CommandType Gets the type of the command. Declaration public abstract CommandType CommandType { get; } Property Value Type Description CommandType The type of the command. See Also ICommand | Improve this Doc View Source MappingManager Gets the mapping manager. Declaration protected MappingManager MappingManager { get; } Property Value Type Description MappingManager The mapping manager. See Also ICommand | Improve this Doc View Source Objects Gets the objects. Declaration public object[] Objects { get; } Property Value Type Description object[] The objects. See Also ICommand | Improve this Doc View Source QueryProviderManager Gets the query provider manager. Declaration protected QueryProviderManager QueryProviderManager { get; } Property Value Type Description QueryProviderManager The query provider manager. See Also ICommand Methods | Improve this Doc View Source CanExecute(object, IMappingSource) Determines whether this instance can execute the specified object. Declaration protected static bool CanExecute(object @object, IMappingSource source) Parameters Type Name Description object object The object. IMappingSource source The source. Returns Type Description bool true if this instance can execute the specified object; otherwise, false. See Also ICommand | Improve this Doc View Source CompareObjects(object, object, IMappingSource) Compares the objects. Declaration protected static bool CompareObjects(object obj1, object obj2, IMappingSource source) Parameters Type Name Description object obj1 The obj1. object obj2 The obj2. IMappingSource source The source. Returns Type Description bool True if they're the same, false otherwise. See Also ICommand | Improve this Doc View Source Execute(IMappingSource) Executes this instance. Declaration public abstract int Execute(IMappingSource source) Parameters Type Name Description IMappingSource source The source. Returns Type Description int The number of rows that are modified. See Also ICommand | Improve this Doc View Source ExecuteAsync(IMappingSource) Executes this instance. Declaration public abstract Task<int> ExecuteAsync(IMappingSource source) Parameters Type Name Description IMappingSource source The source. Returns Type Description Task<int> The number of rows that are modified. See Also ICommand | Improve this Doc View Source Merge(ICommand) Merges the specified command. Declaration public bool Merge(ICommand command) Parameters Type Name Description ICommand command The command. Returns Type Description bool True if the items are merged, false otherwise. See Also ICommand | Improve this Doc View Source RemoveItemsFromCache(object) Removes the items from cache. Declaration protected void RemoveItemsFromCache(object @object) Parameters Type Name Description object object The object. See Also ICommand | Improve this Doc View Source WasObjectSeen(object, IList<object>, IMappingSource) Determines if the object was seen before. Declaration protected static bool WasObjectSeen(object @object, IList<object> objectsSeen, IMappingSource source) Parameters Type Name Description object object The object. IList<object> objectsSeen The objects seen already. IMappingSource source The source. Returns Type Description bool True if it was seen, otherwise false. See Also ICommand Implements ICommand See Also ICommand"
  },
  "api/Inflatable.Sessions.Commands.BaseClasses.html": {
    "href": "api/Inflatable.Sessions.Commands.BaseClasses.html",
    "title": "Namespace Inflatable.Sessions.Commands.BaseClasses | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Sessions.Commands.BaseClasses Classes CommandBaseClass Command base class"
  },
  "api/Inflatable.Sessions.Commands.DeleteCommand.html": {
    "href": "api/Inflatable.Sessions.Commands.DeleteCommand.html",
    "title": "Class DeleteCommand | Inflatable API Reference",
    "keywords": "Class DeleteCommand Delete command Inheritance object CommandBaseClass DeleteCommand Implements ICommand Inherited Members CommandBaseClass.Cache CommandBaseClass.Objects CommandBaseClass.MappingManager CommandBaseClass.QueryProviderManager CommandBaseClass.Merge(ICommand) CommandBaseClass.CanExecute(object, IMappingSource) CommandBaseClass.CompareObjects(object, object, IMappingSource) CommandBaseClass.WasObjectSeen(object, IList<object>, IMappingSource) CommandBaseClass.RemoveItemsFromCache(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Sessions.Commands Assembly: Inflatable.dll Syntax public class DeleteCommand : CommandBaseClass, ICommand Constructors | Improve this Doc View Source DeleteCommand(MappingManager, QueryProviderManager, ICache, params object[]) Initializes a new instance of the DeleteCommand class. Declaration public DeleteCommand(MappingManager mappingManager, QueryProviderManager queryProviderManager, ICache cache, params object[] objectsToDelete) Parameters Type Name Description MappingManager mappingManager The mapping manager. QueryProviderManager queryProviderManager The query provider manager. ICache cache The cache. object[] objectsToDelete The objects to delete. See Also CommandBaseClass Properties | Improve this Doc View Source CommandType Gets the type of the command. Declaration public override CommandType CommandType { get; } Property Value Type Description CommandType The type of the command. Overrides CommandBaseClass.CommandType See Also CommandBaseClass Methods | Improve this Doc View Source Execute(IMappingSource) Executes this instance. Declaration public override int Execute(IMappingSource source) Parameters Type Name Description IMappingSource source The source. Returns Type Description int The number of rows that are modified. Overrides CommandBaseClass.Execute(IMappingSource) See Also CommandBaseClass | Improve this Doc View Source ExecuteAsync(IMappingSource) Executes this instance. Declaration public override Task<int> ExecuteAsync(IMappingSource source) Parameters Type Name Description IMappingSource source Mapping source. Returns Type Description Task<int> The number of rows that are modified. Overrides CommandBaseClass.ExecuteAsync(IMappingSource) See Also CommandBaseClass Implements ICommand See Also CommandBaseClass"
  },
  "api/Inflatable.Sessions.Commands.Enums.CommandType.html": {
    "href": "api/Inflatable.Sessions.Commands.Enums.CommandType.html",
    "title": "Enum CommandType | Inflatable API Reference",
    "keywords": "Enum CommandType Command types Namespace: Inflatable.Sessions.Commands.Enums Assembly: Inflatable.dll Syntax public enum CommandType Fields Name Description Delete The delete type Save The save type"
  },
  "api/Inflatable.Sessions.Commands.Enums.html": {
    "href": "api/Inflatable.Sessions.Commands.Enums.html",
    "title": "Namespace Inflatable.Sessions.Commands.Enums | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Sessions.Commands.Enums Enums CommandType Command types"
  },
  "api/Inflatable.Sessions.Commands.Interfaces.ICommand.html": {
    "href": "api/Inflatable.Sessions.Commands.Interfaces.ICommand.html",
    "title": "Interface ICommand | Inflatable API Reference",
    "keywords": "Interface ICommand Command interface Namespace: Inflatable.Sessions.Commands.Interfaces Assembly: Inflatable.dll Syntax public interface ICommand Properties | Improve this Doc View Source CommandType Gets the type of the command. Declaration CommandType CommandType { get; } Property Value Type Description CommandType The type of the command. Methods | Improve this Doc View Source Execute(IMappingSource) Executes this instance. Declaration int Execute(IMappingSource source) Parameters Type Name Description IMappingSource source The source. Returns Type Description int The number of rows that are modified. | Improve this Doc View Source ExecuteAsync(IMappingSource) Executes this instance. Declaration Task<int> ExecuteAsync(IMappingSource source) Parameters Type Name Description IMappingSource source The source. Returns Type Description Task<int> The number of rows that are modified. | Improve this Doc View Source Merge(ICommand) Merges the specified command. Declaration bool Merge(ICommand command) Parameters Type Name Description ICommand command The command. Returns Type Description bool True if the items are merged, false otherwise."
  },
  "api/Inflatable.Sessions.Commands.Interfaces.html": {
    "href": "api/Inflatable.Sessions.Commands.Interfaces.html",
    "title": "Namespace Inflatable.Sessions.Commands.Interfaces | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Sessions.Commands.Interfaces Interfaces ICommand Command interface"
  },
  "api/Inflatable.Sessions.Commands.SaveCommand.html": {
    "href": "api/Inflatable.Sessions.Commands.SaveCommand.html",
    "title": "Class SaveCommand | Inflatable API Reference",
    "keywords": "Class SaveCommand Save command Inheritance object CommandBaseClass SaveCommand Implements ICommand Inherited Members CommandBaseClass.Cache CommandBaseClass.Objects CommandBaseClass.MappingManager CommandBaseClass.QueryProviderManager CommandBaseClass.Merge(ICommand) CommandBaseClass.CanExecute(object, IMappingSource) CommandBaseClass.CompareObjects(object, object, IMappingSource) CommandBaseClass.WasObjectSeen(object, IList<object>, IMappingSource) CommandBaseClass.RemoveItemsFromCache(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Sessions.Commands Assembly: Inflatable.dll Syntax public class SaveCommand : CommandBaseClass, ICommand Constructors | Improve this Doc View Source SaveCommand(MappingManager, QueryProviderManager, ICache, object[]) Initializes a new instance of the SaveCommand class. Declaration public SaveCommand(MappingManager mappingManager, QueryProviderManager queryProviderManager, ICache cache, object[] objects) Parameters Type Name Description MappingManager mappingManager The mapping manager. QueryProviderManager queryProviderManager The query provider manager. ICache cache The cache. object[] objects The objects. See Also CommandBaseClass Properties | Improve this Doc View Source CommandType Gets the type of the command. Declaration public override CommandType CommandType { get; } Property Value Type Description CommandType The type of the command. Overrides CommandBaseClass.CommandType See Also CommandBaseClass Methods | Improve this Doc View Source Execute(IMappingSource) Executes this instance. Declaration public override int Execute(IMappingSource source) Parameters Type Name Description IMappingSource source The source. Returns Type Description int The number of rows that are modified. Overrides CommandBaseClass.Execute(IMappingSource) See Also CommandBaseClass | Improve this Doc View Source ExecuteAsync(IMappingSource) Executes this instance. Declaration public override Task<int> ExecuteAsync(IMappingSource source) Parameters Type Name Description IMappingSource source The source. Returns Type Description Task<int> The number of rows that are modified. Overrides CommandBaseClass.ExecuteAsync(IMappingSource) See Also CommandBaseClass Implements ICommand See Also CommandBaseClass"
  },
  "api/Inflatable.Sessions.Commands.html": {
    "href": "api/Inflatable.Sessions.Commands.html",
    "title": "Namespace Inflatable.Sessions.Commands | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Sessions.Commands Classes DeleteCommand Delete command SaveCommand Save command"
  },
  "api/Inflatable.Sessions.ISession.html": {
    "href": "api/Inflatable.Sessions.ISession.html",
    "title": "Interface ISession | Inflatable API Reference",
    "keywords": "Interface ISession Session interface Namespace: Inflatable.Sessions Assembly: Inflatable.dll Syntax public interface ISession Methods | Improve this Doc View Source ClearCache() Clears the cache. Declaration void ClearCache() | Improve this Doc View Source Delete<TObject>(params TObject[]) Deletes the specified objects to delete. Declaration ISession Delete<TObject>(params TObject[] objectsToDelete) where TObject : class Parameters Type Name Description TObject[] objectsToDelete The objects to delete. Returns Type Description ISession Type Parameters Name Description TObject The type of the object. | Improve this Doc View Source Execute() Executes this instance. Declaration int Execute() Returns Type Description int | Improve this Doc View Source ExecuteAsync() Executes the asynchronous. Declaration Task<int> ExecuteAsync() Returns Type Description Task<int> | Improve this Doc View Source ExecuteAsync<TObject>(IDictionary<IMappingSource, QueryData<TObject>>) Executes the asynchronous. Declaration Task<IEnumerable<dynamic>> ExecuteAsync<TObject>(IDictionary<IMappingSource, QueryData<TObject>> queries) where TObject : class Parameters Type Name Description IDictionary<IMappingSource, QueryData<TObject>> queries The queries. Returns Type Description Task<IEnumerable<dynamic>> Type Parameters Name Description TObject The type of the object. | Improve this Doc View Source ExecuteAsync<TObject>(string, CommandType, string, params object[]) Executes the asynchronous. Declaration Task<IEnumerable<TObject>> ExecuteAsync<TObject>(string command, CommandType type, string connection, params object[] parameters) where TObject : class Parameters Type Name Description string command The command. CommandType type The type. string connection The connection. object[] parameters The parameters. Returns Type Description Task<IEnumerable<TObject>> Type Parameters Name Description TObject The type of the object. | Improve this Doc View Source ExecuteCountAsync<TObject>(IDictionary<IMappingSource, QueryData<TObject>>) Executes the count asynchronous. Declaration Task<int> ExecuteCountAsync<TObject>(IDictionary<IMappingSource, QueryData<TObject>> queries) where TObject : class Parameters Type Name Description IDictionary<IMappingSource, QueryData<TObject>> queries The queries. Returns Type Description Task<int> Type Parameters Name Description TObject The type of the object. | Improve this Doc View Source ExecuteDynamicAsync(string, CommandType, string, params object[]) Executes the dynamic asynchronous. Declaration Task<IEnumerable<dynamic>> ExecuteDynamicAsync(string command, CommandType type, string connection, params object[] parameters) Parameters Type Name Description string command The command. CommandType type The type. string connection The connection. object[] parameters The parameters. Returns Type Description Task<IEnumerable<dynamic>> | Improve this Doc View Source ExecuteScalarAsync<TObject>(string, CommandType, string, params object[]) Executes the scalar asynchronous. Declaration Task<TObject> ExecuteScalarAsync<TObject>(string command, CommandType type, string connection, params object[] parameters) Parameters Type Name Description string command The command. CommandType type The type. string connection The connection. object[] parameters The parameters. Returns Type Description Task<TObject> Type Parameters Name Description TObject The type of the object. | Improve this Doc View Source LoadPropertiesAsync<TObject, TData>(TObject, string) Loads the properties asynchronous. Declaration Task<IList<TData>> LoadPropertiesAsync<TObject, TData>(TObject objectToLoadProperty, string propertyName) where TObject : class where TData : class Parameters Type Name Description TObject objectToLoadProperty The object to load property. string propertyName Name of the property. Returns Type Description Task<IList<TData>> Type Parameters Name Description TObject The type of the object. TData The type of the data. | Improve this Doc View Source LoadProperties<TObject, TData>(TObject, string) Loads the properties. Declaration IList<TData> LoadProperties<TObject, TData>(TObject objectToLoadProperty, string propertyName) where TObject : class where TData : class Parameters Type Name Description TObject objectToLoadProperty The object to load property. string propertyName Name of the property. Returns Type Description IList<TData> Type Parameters Name Description TObject The type of the object. TData The type of the data. | Improve this Doc View Source LoadPropertyAsync<TObject, TData>(TObject, string) Loads the property asynchronous. Declaration Task<TData> LoadPropertyAsync<TObject, TData>(TObject objectToLoadProperty, string propertyName) where TObject : class where TData : class Parameters Type Name Description TObject objectToLoadProperty The object to load property. string propertyName Name of the property. Returns Type Description Task<TData> Type Parameters Name Description TObject The type of the object. TData The type of the data. | Improve this Doc View Source LoadProperty<TObject, TData>(TObject, string) Loads the property. Declaration TData LoadProperty<TObject, TData>(TObject objectToLoadProperty, string propertyName) where TObject : class where TData : class Parameters Type Name Description TObject objectToLoadProperty The object to load property. string propertyName Name of the property. Returns Type Description TData Type Parameters Name Description TObject The type of the object. TData The type of the data. | Improve this Doc View Source Save<TObject>(params TObject[]) Saves the specified objects to save. Declaration ISession Save<TObject>(params TObject[] objectsToSave) where TObject : class Parameters Type Name Description TObject[] objectsToSave The objects to save. Returns Type Description ISession Type Parameters Name Description TObject The type of the object."
  },
  "api/Inflatable.Sessions.Session.html": {
    "href": "api/Inflatable.Sessions.Session.html",
    "title": "Class Session | Inflatable API Reference",
    "keywords": "Class Session Class for an individual session Inheritance object Session Implements ISession Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Sessions Assembly: Inflatable.dll Syntax public class Session : ISession Constructors | Improve this Doc View Source Session(Aspectus, DataMapper, MappingManager, SchemaManager, QueryProviderManager, Cache, IEnumerable<IOptions<InflatableOptions>>, IServiceProvider, ILogger<Session>?) Initializes a new instance of the Session class. Declaration public Session(Aspectus aspectus, DataMapper dataMapper, MappingManager mappingManager, SchemaManager schemaManager, QueryProviderManager queryProviderManager, Cache cacheManager, IEnumerable<IOptions<InflatableOptions>> options, IServiceProvider serviceProvider, ILogger<Session>? logger = null) Parameters Type Name Description Aspectus aspectus DataMapper dataMapper The data mapper. MappingManager mappingManager The mapping manager. SchemaManager schemaManager The schema manager. QueryProviderManager queryProviderManager The query provider manager. Cache cacheManager The cache manager. IEnumerable<IOptions<InflatableOptions>> options The options. IServiceProvider serviceProvider ILogger<Session> logger The Logger?. Exceptions Type Condition ArgumentNullException mappingManager or queryProviderManager or logger See Also ISession Methods | Improve this Doc View Source ClearCache() Clears the cache. Declaration public void ClearCache() See Also ISession | Improve this Doc View Source Delete<TObject>(params TObject[]) Adds the objects for deletion. Declaration public ISession Delete<TObject>(params TObject[] objectsToDelete) where TObject : class Parameters Type Name Description TObject[] objectsToDelete The objects to delete. Returns Type Description ISession This. Type Parameters Name Description TObject The type of the object. See Also ISession | Improve this Doc View Source Execute() Executes all queued commands. Declaration public int Execute() Returns Type Description int The number of rows affected. See Also ISession | Improve this Doc View Source ExecuteAsync() Executes all queued commands. Declaration public Task<int> ExecuteAsync() Returns Type Description Task<int> The number of rows affected. See Also ISession | Improve this Doc View Source ExecuteAsync<TObject>(IDictionary<IMappingSource, QueryData<TObject>>) Executes the specified command and returns items of a specific type. Declaration public Task<IEnumerable<dynamic>> ExecuteAsync<TObject>(IDictionary<IMappingSource, QueryData<TObject>> queries) where TObject : class Parameters Type Name Description IDictionary<IMappingSource, QueryData<TObject>> queries The queries to run. Returns Type Description Task<IEnumerable<dynamic>> The resulting data Type Parameters Name Description TObject The type of the object. See Also ISession | Improve this Doc View Source ExecuteAsync<TObject>(string, CommandType, string, params object[]) Executes the specified command and returns items of a specific type. Declaration public Task<IEnumerable<TObject>> ExecuteAsync<TObject>(string command, CommandType type, string connection, params object[] parameters) where TObject : class Parameters Type Name Description string command The command. CommandType type The type. string connection The connection name. object[] parameters The parameters. Returns Type Description Task<IEnumerable<TObject>> The list of objects Type Parameters Name Description TObject The type of the object. Exceptions Type Condition ArgumentException See Also ISession | Improve this Doc View Source ExecuteCountAsync<TObject>(IDictionary<IMappingSource, QueryData<TObject>>) Executes the specified command and returns the count. Declaration public Task<int> ExecuteCountAsync<TObject>(IDictionary<IMappingSource, QueryData<TObject>> queries) where TObject : class Parameters Type Name Description IDictionary<IMappingSource, QueryData<TObject>> queries The queries to run. Returns Type Description Task<int> The resulting data Type Parameters Name Description TObject The type of the object. See Also ISession | Improve this Doc View Source ExecuteDynamicAsync(string, CommandType, string, params object[]) Executes the specified command and returns items of a specific type. Declaration public Task<IEnumerable<dynamic>> ExecuteDynamicAsync(string command, CommandType type, string connection, params object[] parameters) Parameters Type Name Description string command The command. CommandType type The type. string connection The connection name. object[] parameters The parameters. Returns Type Description Task<IEnumerable<dynamic>> The list of objects Exceptions Type Condition ArgumentException See Also ISession | Improve this Doc View Source ExecuteScalarAsync<TObject>(string, CommandType, string, params object[]) Executes the specified command and returns the first item of a specific type. Declaration public Task<TObject> ExecuteScalarAsync<TObject>(string command, CommandType type, string connection, params object[] parameters) Parameters Type Name Description string command The command. CommandType type The type. string connection The connection name. object[] parameters The parameters. Returns Type Description Task<TObject> The list of objects Type Parameters Name Description TObject The type of the object. Exceptions Type Condition ArgumentException Source not found {connection} See Also ISession | Improve this Doc View Source LoadPropertiesAsync<TObject, TData>(TObject, string) Loads a property (primarily used internally for lazy loading) Declaration public Task<IList<TData>> LoadPropertiesAsync<TObject, TData>(TObject objectToLoadProperty, string propertyName) where TObject : class where TData : class Parameters Type Name Description TObject objectToLoadProperty The object to load property. string propertyName Name of the property. Returns Type Description Task<IList<TData>> The appropriate property value Type Parameters Name Description TObject The type of the object. TData The type of the data. See Also ISession | Improve this Doc View Source LoadProperties<TObject, TData>(TObject, string) Loads a property (primarily used internally for lazy loading) Declaration public IList<TData> LoadProperties<TObject, TData>(TObject objectToLoadProperty, string propertyName) where TObject : class where TData : class Parameters Type Name Description TObject objectToLoadProperty The object to load property. string propertyName Name of the property. Returns Type Description IList<TData> The appropriate property value Type Parameters Name Description TObject The type of the object. TData The type of the data. See Also ISession | Improve this Doc View Source LoadPropertyAsync<TObject, TData>(TObject, string) Loads a property (primarily used internally for lazy loading) Declaration public Task<TData> LoadPropertyAsync<TObject, TData>(TObject objectToLoadProperty, string propertyName) where TObject : class where TData : class Parameters Type Name Description TObject objectToLoadProperty The object to load property. string propertyName Name of the property. Returns Type Description Task<TData> The appropriate property value Type Parameters Name Description TObject The type of the object. TData The type of the data. See Also ISession | Improve this Doc View Source LoadProperty<TObject, TData>(TObject, string) Loads a property (primarily used internally for lazy loading) Declaration public TData LoadProperty<TObject, TData>(TObject objectToLoadProperty, string propertyName) where TObject : class where TData : class Parameters Type Name Description TObject objectToLoadProperty The object to load property. string propertyName Name of the property. Returns Type Description TData The appropriate property value Type Parameters Name Description TObject The type of the object. TData The type of the data. See Also ISession | Improve this Doc View Source Save<TObject>(params TObject[]) Adds the specified objects to save. Declaration public ISession Save<TObject>(params TObject[] objectsToSave) where TObject : class Parameters Type Name Description TObject[] objectsToSave The objects to save. Returns Type Description ISession This Type Parameters Name Description TObject The type of the object. See Also ISession Implements ISession See Also ISession"
  },
  "api/Inflatable.Sessions.SessionQueryInfo.html": {
    "href": "api/Inflatable.Sessions.SessionQueryInfo.html",
    "title": "Class SessionQueryInfo | Inflatable API Reference",
    "keywords": "Class SessionQueryInfo Session query info Inheritance object SessionQueryInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Sessions Assembly: Inflatable.dll Syntax public class SessionQueryInfo Constructors | Improve this Doc View Source SessionQueryInfo(IMappingSource, IMapping[], IMapping[]) Initializes a new instance of the SessionQueryInfo class. Declaration public SessionQueryInfo(IMappingSource source, IMapping[] childMappings, IMapping[] parentMappings) Parameters Type Name Description IMappingSource source The source. IMapping[] childMappings The child mappings. IMapping[] parentMappings The parent mappings. Properties | Improve this Doc View Source AssociatedMapping Gets or sets the associated mapping. Declaration public IMapping AssociatedMapping { get; set; } Property Value Type Description IMapping The associated mapping. | Improve this Doc View Source ChildMappings Gets or sets the child mappings. Declaration public IMapping[] ChildMappings { get; set; } Property Value Type Description IMapping[] The child mappings. | Improve this Doc View Source IDColumnInfo Gets or sets the identifier column information. Declaration public IEnumerable<IQueryColumnInfo> IDColumnInfo { get; set; } Property Value Type Description IEnumerable<IQueryColumnInfo> The identifier column information. | Improve this Doc View Source IDProperties Gets or sets the identifier properties. Declaration public IEnumerable<IIDProperty> IDProperties { get; set; } Property Value Type Description IEnumerable<IIDProperty> The identifier properties. | Improve this Doc View Source ParentMappings Gets or sets the parent mappings. Declaration public IMapping[] ParentMappings { get; set; } Property Value Type Description IMapping[] The parent mappings. | Improve this Doc View Source Source Gets or sets the source. Declaration public IMappingSource Source { get; set; } Property Value Type Description IMappingSource The source."
  },
  "api/Inflatable.Sessions.html": {
    "href": "api/Inflatable.Sessions.html",
    "title": "Namespace Inflatable.Sessions | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Sessions Classes Session Class for an individual session SessionQueryInfo Session query info Interfaces ISession Session interface"
  },
  "api/Inflatable.Utils.ExpressionTypeConverter-2.html": {
    "href": "api/Inflatable.Utils.ExpressionTypeConverter-2.html",
    "title": "Class ExpressionTypeConverter<TData, TReturn> | Inflatable API Reference",
    "keywords": "Class ExpressionTypeConverter<TData, TReturn> Expression type converter Inheritance object ExpressionTypeConverter<TData, TReturn> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Utils Assembly: Inflatable.dll Syntax public class ExpressionTypeConverter<TData, TReturn> Type Parameters Name Description TData The type of the data. TReturn The type of the return. Constructors | Improve this Doc View Source ExpressionTypeConverter(Expression<Func<TData, TReturn>>) Initializes a new instance of the ExpressionTypeConverter<TData, TReturn> class. Declaration public ExpressionTypeConverter(Expression<Func<TData, TReturn>> expression) Parameters Type Name Description Expression<Func<TData, TReturn>> expression The expression. Properties | Improve this Doc View Source Expression Gets or sets the expression. Declaration public Expression<Func<TData, TReturn>> Expression { get; set; } Property Value Type Description Expression<Func<TData, TReturn>> The expression. Methods | Improve this Doc View Source Convert<TNewType>() Converts this instance. Declaration public Expression<Func<TNewType, TReturn>> Convert<TNewType>() Returns Type Description Expression<Func<TNewType, TReturn>> Type Parameters Name Description TNewType The type of the new type."
  },
  "api/Inflatable.Utils.Tree-1.html": {
    "href": "api/Inflatable.Utils.Tree-1.html",
    "title": "Class Tree<TData> | Inflatable API Reference",
    "keywords": "Class Tree<TData> Tree holding data. Inheritance object Tree<TData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Inflatable.Utils Assembly: Inflatable.dll Syntax public class Tree<TData> Type Parameters Name Description TData The type of the data. Constructors | Improve this Doc View Source Tree(TData) Initializes a new instance of the Tree<TData> class. Declaration public Tree(TData rootData) Parameters Type Name Description TData rootData The root data. Properties | Improve this Doc View Source Root Gets or sets the root. Declaration public TreeNode<TData> Root { get; set; } Property Value Type Description TreeNode<TData> The root. Methods | Improve this Doc View Source ContainsNode(TData, Func<TData, TData, bool>) Determines whether the specified data contains node. Declaration public bool ContainsNode(TData data, Func<TData, TData, bool> comparer) Parameters Type Name Description TData data The data. Func<TData, TData, bool> comparer The comparer. Returns Type Description bool true if the specified data contains node; otherwise, false. | Improve this Doc View Source ToList() Converts the tree to a list. Declaration public List<TData> ToList() Returns Type Description List<TData> The resulting list | Improve this Doc View Source ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString()"
  },
  "api/Inflatable.Utils.TreeNode-1.html": {
    "href": "api/Inflatable.Utils.TreeNode-1.html",
    "title": "Class TreeNode<TData> | Inflatable API Reference",
    "keywords": "Class TreeNode<TData> Tree node Inheritance object TreeNode<TData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Inflatable.Utils Assembly: Inflatable.dll Syntax public class TreeNode<TData> Type Parameters Name Description TData The type of the data. Constructors | Improve this Doc View Source TreeNode(TData, TreeNode<TData>?) Initializes a new instance of the TreeNode<TData> class. Declaration public TreeNode(TData data, TreeNode<TData>? parent) Parameters Type Name Description TData data The data. TreeNode<TData> parent The parent. Properties | Improve this Doc View Source Data Gets or sets the data. Declaration public TData Data { get; set; } Property Value Type Description TData The data. | Improve this Doc View Source Nodes Gets or sets the nodes. Declaration public List<TreeNode<TData>> Nodes { get; set; } Property Value Type Description List<TreeNode<TData>> The nodes. | Improve this Doc View Source Parent Gets or sets the parent. Declaration public TreeNode<TData>? Parent { get; set; } Property Value Type Description TreeNode<TData> The parent. Methods | Improve this Doc View Source AddNode(TData) Adds the node. Declaration public TreeNode<TData> AddNode(TData data) Parameters Type Name Description TData data The data. Returns Type Description TreeNode<TData> The resulting node. | Improve this Doc View Source ContainsNode(TData, Func<TData, TData, bool>) Determines whether the specified data contains node. Declaration public bool ContainsNode(TData data, Func<TData, TData, bool> comparer) Parameters Type Name Description TData data The data. Func<TData, TData, bool> comparer The comparer. Returns Type Description bool true if the specified data contains node; otherwise, false. | Improve this Doc View Source Remove() Removes this instance from the tree Declaration public TreeNode<TData> Remove() Returns Type Description TreeNode<TData> This | Improve this Doc View Source ToList() Returns the sub tree as a list. Declaration public List<TData> ToList() Returns Type Description List<TData> The resulting list. | Improve this Doc View Source ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString()"
  },
  "api/Inflatable.Utils.Visitor.html": {
    "href": "api/Inflatable.Utils.Visitor.html",
    "title": "Class Visitor | Inflatable API Reference",
    "keywords": "Class Visitor Visitor expression visitor Inheritance object ExpressionVisitor Visitor Inherited Members ExpressionVisitor.Visit(ReadOnlyCollection<Expression>) ExpressionVisitor.Visit(Expression) ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string) ExpressionVisitor.VisitAndConvert<T>(T, string) ExpressionVisitor.VisitBinary(BinaryExpression) ExpressionVisitor.VisitBlock(BlockExpression) ExpressionVisitor.VisitCatchBlock(CatchBlock) ExpressionVisitor.VisitConditional(ConditionalExpression) ExpressionVisitor.VisitConstant(ConstantExpression) ExpressionVisitor.VisitDebugInfo(DebugInfoExpression) ExpressionVisitor.VisitDefault(DefaultExpression) ExpressionVisitor.VisitDynamic(DynamicExpression) ExpressionVisitor.VisitElementInit(ElementInit) ExpressionVisitor.VisitExtension(Expression) ExpressionVisitor.VisitGoto(GotoExpression) ExpressionVisitor.VisitIndex(IndexExpression) ExpressionVisitor.VisitInvocation(InvocationExpression) ExpressionVisitor.VisitLabel(LabelExpression) ExpressionVisitor.VisitLabelTarget(LabelTarget) ExpressionVisitor.VisitLambda<T>(Expression<T>) ExpressionVisitor.VisitListInit(ListInitExpression) ExpressionVisitor.VisitLoop(LoopExpression) ExpressionVisitor.VisitMember(MemberExpression) ExpressionVisitor.VisitMemberAssignment(MemberAssignment) ExpressionVisitor.VisitMemberBinding(MemberBinding) ExpressionVisitor.VisitMemberInit(MemberInitExpression) ExpressionVisitor.VisitMemberListBinding(MemberListBinding) ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding) ExpressionVisitor.VisitMethodCall(MethodCallExpression) ExpressionVisitor.VisitNew(NewExpression) ExpressionVisitor.VisitNewArray(NewArrayExpression) ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression) ExpressionVisitor.VisitSwitch(SwitchExpression) ExpressionVisitor.VisitSwitchCase(SwitchCase) ExpressionVisitor.VisitTry(TryExpression) ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression) ExpressionVisitor.VisitUnary(UnaryExpression) ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Inflatable.Utils Assembly: Inflatable.dll Syntax public class Visitor : ExpressionVisitor Constructors | Improve this Doc View Source Visitor(ParameterExpression) Initializes a new instance of the Visitor class. Declaration public Visitor(ParameterExpression parameter) Parameters Type Name Description ParameterExpression parameter The parameter. See Also ExpressionVisitor Methods | Improve this Doc View Source VisitParameter(ParameterExpression) Visits the ParameterExpression. Declaration protected override Expression VisitParameter(ParameterExpression node) Parameters Type Name Description ParameterExpression node The expression to visit. Returns Type Description Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. Overrides ExpressionVisitor.VisitParameter(ParameterExpression) See Also ExpressionVisitor See Also ExpressionVisitor"
  },
  "api/Inflatable.Utils.html": {
    "href": "api/Inflatable.Utils.html",
    "title": "Namespace Inflatable.Utils | Inflatable API Reference",
    "keywords": "Namespace Inflatable.Utils Classes ExpressionTypeConverter<TData, TReturn> Expression type converter TreeNode<TData> Tree node Tree<TData> Tree holding data. Visitor Visitor expression visitor"
  },
  "api/Inflatable.html": {
    "href": "api/Inflatable.html",
    "title": "Namespace Inflatable | Inflatable API Reference",
    "keywords": "Namespace Inflatable Classes DbContext Db Context DbContext<TObject> Db context"
  },
  "api/Microsoft.Extensions.DependencyInjection.Registration.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.Registration.html",
    "title": "Class Registration | Inflatable API Reference",
    "keywords": "Class Registration Registration extension methods Inheritance object Registration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: Inflatable.dll Syntax public static class Registration Methods | Improve this Doc View Source RegisterInflatable(ICanisterConfiguration?) Registers the library with the bootstrapper. Declaration public static ICanisterConfiguration? RegisterInflatable(this ICanisterConfiguration? bootstrapper) Parameters Type Name Description ICanisterConfiguration bootstrapper The bootstrapper. Returns Type Description ICanisterConfiguration The bootstrapper"
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | Inflatable API Reference",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes Registration Registration extension methods"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | Inflatable API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | Inflatable API Reference",
    "keywords": "Code using BigBook; using Inflatable; using Inflatable.Benchmarks.Models; using Inflatable.Sessions; using Microsoft.Data.SqlClient; using Microsoft.Extensions.DependencyInjection; using SQLHelperDB; using System; using System.Data; using System.Linq; using System.Threading.Tasks; using TestApp.Models; namespace TestApp { /// <summary> /// Example program to show how to use the ORM /// </summary> internal class Program { /// <summary> /// The string val1 constant /// </summary> private const string StringVal1Const = \"A\"; /// <summary> /// The string val2 constant /// </summary> private const string StringVal2Const = \"ASDFGHKL\"; /// <summary> /// The services for the application /// </summary> private static ServiceProvider Services; /// <summary> /// A more complex example /// </summary> private static async Task ComplexTest() { Console.WriteLine(\"Complex test\"); Console.WriteLine(\"------------\"); // Starting by setting up the objects we'll be using Console.WriteLine(\"Setting up values\"); ComplexClass[] Values = 200.Times(x => { var ReturnValue = new ComplexClass() { Value1 = \"A\", Value2 = 1, Value3 = 2 }; ReturnValue.ManyToOneProperty.Add(new ComplexClass2() { DateValue = DateTime.Now }); return ReturnValue; }).ToArray(); // Save the objects to the database Console.WriteLine(\"Saving values\"); await new DbContext().Save(Values).ExecuteAsync().ConfigureAwait(false); // Now let's query the database and get back the values we saved Console.WriteLine(\"Querying values\"); var Results = DbContext<ComplexClass>.CreateQuery().ToList(); // Now let's update a sub class's properties Results.ForEach(x => x.ManyToOneProperty.ForEach(y => y.DateValue = DateTime.Now)); // And now let's save the changes Console.WriteLine(\"Resaving values\"); new DbContext().Save(Results.ToArray()).ExecuteAsync().GetAwaiter().GetResult(); Console.WriteLine(\"Done\"); Console.WriteLine(); } /// <summary> /// Data cleanup task /// </summary> private static void DataCleanup() { SQLHelper Helper = Services.GetService<SQLHelper>(); try { Task.Run(async () => await Helper.CreateBatch(SqlClientFactory.Instance, \"Data Source=localhost;Initial Catalog=master;Integrated Security=SSPI;Pooling=false\") .AddQuery(CommandType.Text, \"ALTER DATABASE InflatableTestDatabase SET OFFLINE WITH ROLLBACK IMMEDIATE\\r\\nALTER DATABASE InflatableTestDatabase SET ONLINE\\r\\nDROP DATABASE InflatableTestDatabase\") .ExecuteScalarAsync<int>().ConfigureAwait(false)).GetAwaiter().GetResult(); } catch { } } /// <summary> /// Defines the entry point of the application. /// </summary> private static async Task Main() { // Let's set up the services we'll be using for the application Services = new ServiceCollection() .AddLogging() // Add logging .AddCanisterModules() // Add Inflatable and required dependencies .BuildServiceProvider(); // Build the service provider // Now let's set up the database Console.WriteLine(\"Setting up session\"); Console.WriteLine(); Services.GetService<ISession>(); try { await SimpleTest().ConfigureAwait(false); await ComplexTest().ConfigureAwait(false); } finally { DataCleanup(); } } /// <summary> /// The simple test example /// </summary> private static async Task SimpleTest() { Console.WriteLine(\"Simple test\"); Console.WriteLine(\"-----------\"); // Starting by setting up the objects we'll be using Console.WriteLine(\"Setting up values\"); SimpleClass[] Values = 200.Times(x => new SimpleClass() { BoolValue = x % 2 == 0, StringValue1 = StringVal1Const, StringValue2 = StringVal2Const }).ToArray(); // Save the objects to the database Console.WriteLine(\"Saving values\"); new DbContext().Save(Values).ExecuteAsync().GetAwaiter().GetResult(); // Now let's query the database and get back the values we saved Console.WriteLine(\"Querying values\"); var Results = DbContext<SimpleClass>.CreateQuery().Where(x => x.BoolValue).ToList(); Console.WriteLine(\"Done\"); Console.WriteLine(); } } } Output Setting up session Simple Test ----------- Setting up values Saving values Querying values Done Complex Test ------------ Setting up values Saving values Querying values Resaving values Done"
  },
  "index.html": {
    "href": "index.html",
    "title": "Inflatable | Inflatable API Reference",
    "keywords": "Inflatable Inflatable is a feature-rich ORM (Object-Relational Mapping) library for .NET applications. It provides seamless integration with your data access layer, allowing you to interact with your database using a convenient and expressive API. Getting Started To use Inflatable, you need to wire it up with you ServiceCollection. Follow the steps below to configure your application: Install the Inflatable package from NuGet. In your application's startup code, add the following lines to configure Canister: var services = new ServiceCollection(); services.AddCanisterModules(); // ... The AddCanisterModules() extension method registers Inflatable with the IoC container. With these steps completed, Inflatable is ready to be used within your application. Basic Usage The primary class of interest in Inflatable is the DbContext class, which provides a rich set of features for querying and interacting with your database. Querying Data To retrieve data from the database, use the DbContext<T> class with the CreateQuery() method: var results = DbContext<MyPoco>.CreateQuery().Where(x => x.MyProperty == 12).ToList(); The CreateQuery() method returns an IQueryable<T>, allowing you to chain additional query operations such as Where, Select, OrderBy, Distinct, First, Single, Take, and their variations. Please note that functions like GroupBy, Union, and Include are not currently implemented. For more complex queries or when you need to execute raw SQL, you can use the ExecuteAsync() method: var results = await DbContext<MyPoco>.ExecuteAsync(\"SELECT * FROM MyTable\", CommandType.Text, \"MyConnectionString\"); Saving and Deleting Objects To save or delete an object, you need to create an instance of DbContext or a Session object: await new DbContext<MyPoco>().Save(myObject).ExecuteAsync(); Alternatively, you can resolve the DbContext from the service provider in your application. Documentation For detailed information on using Inflatable and its advanced features, refer to the documentation available on the project's website. Contributing Contributions are welcome! If you have any bug reports, feature requests, or would like to contribute to the project, please check out the contribution guidelines."
  }
}